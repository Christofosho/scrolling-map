(()=>{"use strict";var __webpack_modules__={782:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "a7": () => (/* binding */ all_users),\n  "jF": () => (/* binding */ entities),\n  "OH": () => (/* binding */ examine),\n  "JG": () => (/* binding */ object_name),\n  "E6": () => (/* binding */ resetExamine),\n  "Wb": () => (/* binding */ socket)\n});\n\n// UNUSED EXPORTS: action_data\n\n// NAMESPACE OBJECT: ./scrolling-map/js/player.js\nvar player_namespaceObject = {};\n__webpack_require__.r(player_namespaceObject);\n__webpack_require__.d(player_namespaceObject, {\n  "current_map": () => (current_map),\n  "current_map_name": () => (current_map_name),\n  "cx": () => (cx),\n  "cy": () => (cy),\n  "direction": () => (direction),\n  "eyes": () => (eyes),\n  "hair": () => (hair),\n  "hair_accessory": () => (hair_accessory),\n  "pants": () => (pants),\n  "shirt": () => (shirt),\n  "shoes": () => (shoes),\n  "skin": () => (skin),\n  "username": () => (username)\n});\n\n;// CONCATENATED MODULE: ./scrolling-map/js/player.js\n// player.js\n// Contains details and some logic\n// surrounding the local player.\nlet username = ""; // character start (0,0)\n\nlet cx = 0;\nlet cy = 0;\nlet direction = 0;\nlet current_map = [];\nlet current_map_name = "";\nlet shirt = 0;\nlet hair = 0;\nlet skin = 0;\nlet eyes = 0;\nlet pants = 0;\nlet shoes = 0;\nlet hair_accessory = 0;\n;// CONCATENATED MODULE: ./scrolling-map/js/map.js\n// map.js\n// Handles map manipulation logic.\n\n\nlet map_border_size = 0; // How many tiles from edge to player\n\nlet map_tile_buffer = 0; // Tile Buffer: How large tiles are\n\nfunction getTile(x_, y_) {\n  let click_x = Math.floor(x_ / 30);\n  let click_y = Math.floor(y_ / 30);\n  let tile_x = -1;\n  let tile_y = -1;\n\n  if (map_border_size > click_y) {\n    tile_y = cy - (map_border_size - click_y);\n  } else {\n    tile_y = cy + (click_y - map_border_size);\n  }\n\n  if (map_border_size > click_x) {\n    tile_x = cx - (map_border_size - click_x);\n  } else {\n    tile_x = cx + (click_x - map_border_size);\n  }\n\n  return current_map[tile_y][tile_x];\n} // Check if the tile at (x_, y_) has an object.\n\nfunction containsObject(x_, y_) {\n  if (Array.isArray(current_map[y_][x_])) {\n    if (entities[current_map[y_][x_][1]].type == "object") {\n      return true;\n    }\n  }\n\n  return false;\n}\n;// CONCATENATED MODULE: ./scrolling-map/js/settings.js\n// settings.js\n\n\n\nlet settings = {\n  player_names: true,\n  coordinates: false,\n  zoom: false\n};\nfunction handleClick(click_x, click_y, canvas_width, canvas_height) {\n  const quarter_width = canvas_width / 4 - 20; // Show player names\n\n  if (polygon_click_test(4, [quarter_width, quarter_width * 3, quarter_width * 3, quarter_width], // x values\n  [50, 50, 72, 72],\n  /* y values */\n  click_x, click_y)) {\n    settings.player_names = !settings.player_names;\n    sendSettings();\n    return true;\n  } // Show current coordinates\n  else if (polygon_click_test(4, [quarter_width, quarter_width * 3, quarter_width * 3, quarter_width], // x values\n    [73, 73, 95, 95],\n    /* y values */\n    click_x, click_y)) {\n      settings.coordinates = !settings.coordinates;\n      sendSettings();\n      return true;\n    } // Zoom canvas\n    else if (polygon_click_test(4, [quarter_width, quarter_width * 3, quarter_width * 3, quarter_width], // x values\n      [96, 96, 128, 128],\n      /* y values */\n      click_x, click_y)) {\n        settings.zoom = !settings.zoom;\n        sendSettings();\n        return true;\n      }\n\n  return false;\n}\n\nfunction sendSettings() {\n  socket.emit(\'settings\', JSON.stringify({\n    \'username\': username,\n    \'settings\': settings\n  }));\n}\n;// CONCATENATED MODULE: ./scrolling-map/js/input.js\n// input.js\n// Handles user input.\n\n\n\n\n\nlet last_click_x = -1;\nlet last_click_y = -1;\nlet last_click_time = Date.now();\n\nfunction sendAction(e) {\n  if (!["Space", "ArrowLeft", "ArrowUp", "ArrowRight", "ArrowDown", "KeyA", "KeyD", "KeyE", "KeyS", "KeyW"].includes(e.code)) return;\n  e.preventDefault();\n\n  if (last_click_time >= Date.now() - 300) {\n    return; // 300ms delay on clicks\n  }\n\n  last_click_time = Date.now();\n\n  if (e.code == "Space") {\n    // Spacebar\n    console.log("Eventually we will implement the spacebar for interacting" + " with items below your character.");\n  }\n\n  socket.emit(\'json\', JSON.stringify({\n    \'username\': username,\n    \'action\': e.code\n  }));\n}\n\nfunction determineLeftClick(click_x, click_y) {\n  let canvas_width = draw_canvas.width - 60;\n  let canvas_height = draw_canvas.height - 20;\n  const mid_width = Math.floor(canvas_width / 2);\n  const mid_height = Math.floor(canvas_height / 2);\n  const mid_offset = Math.floor(map_tile_buffer / 2);\n  const mid_low = mid_width - mid_offset;\n  const mid_high = mid_width + mid_offset;\n  resetExamine(); // We divide this into "paged" checking\n  // Return if we find a matching click, to avoid multiple\n  // executions.\n  // Settings scope\n\n  if (overlay == OVERLAYS.Settings) {\n    // Check if a setting is clicked. If so, send data to server.\n    if (handleClick(click_x, click_y, canvas_width, canvas_height)) {\n      return;\n    }\n  } // Message History Scope\n  else if (overlay == OVERLAYS.History) {// Check for message history interaction.\n    } // Inventory scope\n    else if (overlay == OVERLAYS.Inventory) {// Check for inventory interaction.\n      } // Map scope\n      else if (overlay == OVERLAYS.None) {\n          if (clickUnderTile(click_x, click_y, mid_low, mid_high)) {\n            return;\n          }\n\n          if (clickAdjacentTile(click_x, click_y, mid_low, mid_high)) {\n            return;\n          }\n\n          if (clickFarTile(click_x, click_y, canvas_width, canvas_height, mid_width, mid_height)) {\n            return;\n          }\n        } // General scope\n\n\n  if (checkMenuIconClicked(click_x, click_y, canvas_width)) {\n    return;\n  }\n}\n\nfunction checkMenuIconClicked(click_x, click_y, canvas_width) {\n  // Click on settings menu icon\n  if (polygon_click_test(4, [canvas_width, canvas.width, canvas.width, canvas_width], // x values\n  [0, 0, 59, 59],\n  /* y values */\n  click_x, click_y)) {\n    overlay = overlay != OVERLAYS.Settings ? OVERLAYS.Settings : OVERLAYS.None;\n  } // Click message history icon\n  else if (polygon_click_test(4, [canvas_width, canvas.width, canvas.width, canvas_width], // x values\n    [60, 60, 119, 119],\n    /* y values */\n    click_x, click_y)) {\n      overlay = overlay != OVERLAYS.Inventory ? OVERLAYS.Inventory : OVERLAYS.None;\n    } // Click inventory icon\n    else if (polygon_click_test(4, [canvas_width, canvas.width, canvas.width, canvas_width], // x values\n      [120, 120, 179, 179],\n      /* y values */\n      click_x, click_y)) {\n        overlay = overlay != OVERLAYS.History ? OVERLAYS.History : OVERLAYS.None;\n      } // Click logout icon\n      else if (polygon_click_test(4, [canvas_width, canvas.width, canvas.width, canvas_width], // x values\n        [canvas.height - 30, canvas.height - 30, canvas.height, canvas.height],\n        /* y values */\n        click_x, click_y)) {\n          socket.emit(\'logout\');\n        }\n}\n\nfunction clickUnderTile(click_x, click_y, mid_low, mid_high) {\n  // Click on middle square (where player is standing)\n  if (polygon_click_test(4, [mid_low, mid_high, mid_high, mid_low], // x values\n  [mid_low, mid_low, mid_high, mid_high], // y values\n  click_x, click_y)) {\n    sendAction({\n      \'code\': "Space",\n      \'preventDefault\': function () {}\n    });\n    return true;\n  }\n\n  return false;\n}\n\nfunction clickAdjacentTile(click_x, click_y, mid_low, mid_high) {\n  // Click on square directly above player location.\n  if (polygon_click_test(4, [mid_low, mid_high, mid_high, mid_low], // x values\n  [mid_low - map_tile_buffer, mid_low - map_tile_buffer, mid_low, mid_low], // y values\n  click_x, click_y)) {\n    if (direction == 1 && containsObject(cx, cy - 1)) {\n      sendAction({\n        \'code\': "KeyE",\n        \'preventDefault\': function () {}\n      });\n    } else {\n      sendAction({\n        \'code\': "ArrowUp",\n        \'preventDefault\': function () {}\n      });\n    }\n\n    return true;\n  } // Click on square one below player location.\n  else if (polygon_click_test(4, [mid_low, mid_low, mid_high, mid_high], // x values\n    [mid_high, mid_high + map_tile_buffer, mid_high + map_tile_buffer, mid_high], // y values\n    click_x, click_y)) {\n      if (direction == 0 && containsObject(cx, cy + 1)) {\n        sendAction({\n          \'code\': "KeyE",\n          \'preventDefault\': function () {}\n        });\n      } else {\n        sendAction({\n          \'code\': "ArrowDown",\n          \'preventDefault\': function () {}\n        });\n      }\n\n      return true;\n    } // Click on square directly left player location.\n    else if (polygon_click_test(4, [mid_low - map_tile_buffer, mid_low, mid_low, mid_low - map_tile_buffer], // x values\n      [mid_low, mid_low, mid_high, mid_high], // y values\n      click_x, click_y)) {\n        if (direction == 3 && containsObject(cx - 1, cy)) {\n          sendAction({\n            \'code\': "KeyE",\n            \'preventDefault\': function () {}\n          });\n        } else {\n          sendAction({\n            \'code\': "ArrowLeft",\n            \'preventDefault\': function () {}\n          });\n        }\n\n        return true;\n      } // Click on square directly right player location.\n      else if (polygon_click_test(4, [mid_high, mid_high + map_tile_buffer, mid_high + map_tile_buffer, mid_high], // x values\n        [mid_low, mid_low, mid_high, mid_high], // y values\n        click_x, click_y)) {\n          if (direction == 2 && containsObject(cx + 1, cy)) {\n            sendAction({\n              \'code\': "KeyE",\n              \'preventDefault\': function () {}\n            });\n          } else {\n            sendAction({\n              \'code\': "ArrowRight",\n              \'preventDefault\': function () {}\n            });\n          }\n\n          return true;\n        }\n\n  return false;\n}\n\nfunction clickFarTile(click_x, click_y, canvas_width, canvas_height, mid_width, mid_height) {\n  /* Movement */\n  if (polygon_click_test(3, [0, mid_width, canvas_width], [0, mid_height, 0], click_x, click_y)) {\n    sendAction({\n      \'code\': "ArrowUp",\n      \'preventDefault\': function () {}\n    });\n    return true;\n  } else if (polygon_click_test(3, [0, mid_width, canvas_width], [canvas_height, mid_height, canvas_height], click_x, click_y)) {\n    sendAction({\n      \'code\': "ArrowDown",\n      \'preventDefault\': function () {}\n    });\n    return true;\n  } else if (polygon_click_test(3, [0, mid_width, 0], [0, mid_height, canvas_height], click_x, click_y)) {\n    sendAction({\n      \'code\': "ArrowLeft",\n      \'preventDefault\': function () {}\n    });\n    return true;\n  } else if (polygon_click_test(3, [canvas_width, mid_width, canvas_width], [0, mid_height, canvas_height], click_x, click_y)) {\n    sendAction({\n      \'code\': "ArrowRight",\n      \'preventDefault\': function () {}\n    });\n    return true;\n  }\n\n  return false;\n} // polygon_click_test by Wm. Randolph Franklin\n// int list(int) list(int) int int -> bool\n// Consumes the number of vertices, along with each vertex coordinate,\n// as a list of x coordinates and a second list of y coordinates.\n// Tests against clicked coordinates to determine whether the\n// click was within the polygon formed by said vertices.\n\n\nfunction polygon_click_test(nvert, vertx, verty, testx, testy) {\n  let i,\n      j,\n      c = false;\n\n  for (i = 0, j = nvert - 1; i < nvert; j = i++) {\n    if (verty[i] > testy != verty[j] > testy && testx < (vertx[j] - vertx[i]) * (testy - verty[i]) / (verty[j] - verty[i]) + vertx[i]) {\n      c = !c;\n    }\n  }\n\n  return c;\n}\n\nfunction setTouchCoords(e) {\n  e.preventDefault();\n  e.stopPropagation();\n  last_click_x = e.touches[0].clientX - draw_canvas.getBoundingClientRect().left;\n  last_click_y = e.touches[0].clientY - draw_canvas.getBoundingClientRect().top;\n}\n\nfunction getClickCoords(e) {\n  e.preventDefault();\n\n  if (last_click_x > -1 || last_click_y > -1) {\n    last_click_x = 0;\n    last_click_y = 0;\n    return;\n  }\n\n  const click_x = e.offsetX;\n  const click_y = e.offsetY;\n\n  if (e.button == 2) {\n    last_click_x = click_x;\n    last_click_y = click_y;\n    return;\n  }\n\n  determineLeftClick(click_x, click_y);\n}\n\nfunction getTouchCoords(e) {\n  e.preventDefault();\n  determineLeftClick(last_click_x, last_click_y);\n}\n\nfunction setContextMenu(e) {\n  e.preventDefault();\n  let tile = getTile(last_click_x, last_click_y);\n\n  if (Array.isArray(tile)) {\n    let object = entities[tile[1]];\n\n    if (object.type == "object") {\n      examine = object.examine;\n    }\n  }\n}\n\nfunction handleMouseMovement(e) {\n  e.preventDefault();\n  let mouse_x = e.offsetX;\n  let mouse_y = e.offsetY; // Mouse off right-click menu closes it (+- 5px)\n\n  if (!polygon_click_test(4, [examine_menu_vertices[0][0], examine_menu_vertices[1][0], examine_menu_vertices[2][0], examine_menu_vertices[3][0]], [examine_menu_vertices[0][1], examine_menu_vertices[1][1], examine_menu_vertices[2][1], examine_menu_vertices[3][1]], mouse_x, mouse_y)) {\n    resetExamine();\n  } // Mouse over object shows text in corner\n\n\n  let tile = getTile(mouse_x, mouse_y);\n\n  if (Array.isArray(tile)) {\n    let object = entities[tile[1]];\n\n    if (object.type == "object" || object.type == "item") {\n      object_name = object.name;\n    }\n  } else {\n    object_name = "";\n  }\n}\n\nfunction listener() {\n  document.addEventListener(\'keydown\', sendAction);\n}\nfunction clickListener() {\n  draw_canvas.addEventListener(\'mousedown\', getClickCoords);\n  draw_canvas.addEventListener(\'touchstart\', setTouchCoords, {\n    passive: false\n  });\n  draw_canvas.addEventListener(\'touchend\', getTouchCoords, {\n    passive: false\n  });\n  draw_canvas.addEventListener(\'contextmenu\', setContextMenu);\n  draw_canvas.addEventListener(\'mousemove\', handleMouseMovement);\n}\nfunction removeListeners() {\n  document.removeEventListener(\'keydown\', sendAction);\n  draw_canvas.removeEventListener(\'mousedown\', getClickCoords);\n  draw_canvas.removeEventListener(\'touchstart\', setTouchCoords, {\n    passive: false\n  });\n  draw_canvas.removeEventListener(\'touchend\', getTouchCoords, {\n    passive: false\n  });\n  draw_canvas.removeEventListener(\'contextmenu\', setContextMenu);\n  draw_canvas.removeEventListener(\'mousemove\', handleMouseMovement);\n}\n;// CONCATENATED MODULE: ./scrolling-map/js/draw.js\n// draw.js\n\n\n\n\n\nconst draw_canvas = document.getElementById(\'canvas\');\nconst ctx = draw_canvas.getContext(\'2d\'); // Rows of 10 30x30 tiles.\n\nconst tilesheet = new Image();\ntilesheet.src = "static/tilesheet.png";\nconst charsheet = new Image();\ncharsheet.src = "static/spritesheet.png";\nconst optionsheet = new Image();\noptionsheet.src = "static/optionsheet.png";\nlet examine_menu_vertices = [[0, 0], [0, 0], [0, 0], [0, 0]];\nconst OVERLAYS = {\n  None: 0,\n  Settings: 1,\n  History: 2,\n  Inventory: 3\n};\nlet overlay = OVERLAYS.None; // Small windows means smaller canvas.\n\nif (window.innerWidth < 600 || window.innerHeight < 600) {\n  draw_canvas.width = 330;\n  draw_canvas.height = 300;\n}\n/* DRAWING */\n\n\nfunction draw() {\n  const canvas_width = draw_canvas.width - 60;\n  const canvas_height = draw_canvas.height - 30;\n  const tile_buffer = settings.zoom ? map_tile_buffer * 3 : map_tile_buffer;\n  const border_size = settings.zoom ? 2 : map_border_size;\n  ctx.clearRect(0, 0, draw_canvas.width, draw_canvas.height);\n\n  if (settings.zoom) {\n    ctx.imageSmoothingEnabled = false;\n  } else {\n    ctx.imageSmoothingEnabled = true;\n  }\n\n  if (overlay == OVERLAYS.Settings) {\n    drawSettings(canvas_width, canvas_height);\n  } else if (overlay == OVERLAYS.History) {\n    drawHistory(canvas_width, canvas_height);\n  } else if (overlay == OVERLAYS.Inventory) {\n    drawInventory(canvas_width, canvas_height);\n  } else {\n    drawTiles(canvas_width, canvas_height, tile_buffer, border_size);\n    drawOthers(tile_buffer, border_size); // Fill the local character tile\n\n    if (charsheet.complete) {\n      drawPlayer(border_size, border_size, player_namespaceObject, tile_buffer);\n    } else {\n      charsheet.addEventListener(\'load\', drawPlayer.bind(border_size, border_size, player_namespaceObject, tile_buffer));\n    }\n\n    if (object_name.length > 0) {\n      drawObjectName();\n    }\n\n    if (examine.length > 0) {\n      drawRightClickExamine();\n    }\n  }\n\n  if (settings.coordinates) {\n    drawCoordinates(canvas_width, canvas_height);\n  }\n\n  drawMapName(canvas_height);\n  drawSidePanel(canvas_width, canvas_height);\n}\n\nfunction drawTiles(canvas_width, canvas_height, tile_buffer, border_size) {\n  for (let x = 0; x < canvas_width; x += tile_buffer) {\n    const curr_x = x / tile_buffer + (cx - border_size);\n\n    for (let y = 0; y < canvas_height; y += tile_buffer) {\n      const tile = current_map[y / tile_buffer + (cy - border_size)][curr_x];\n\n      if (Array.isArray(tile)) {\n        for (const def in tile) {\n          drawTile(tile[def], x, y, tile_buffer);\n        }\n      } else {\n        drawTile(tile, x, y, tile_buffer);\n      }\n    }\n  }\n}\n\nfunction drawTile(tile, x, y, tile_buffer) {\n  if (tilesheet.complete) {\n    drawImage(tile, x, y, tile_buffer);\n  } else {\n    tilesheet.load = drawImage.bind(tile, x, y, tile_buffer);\n  }\n  /*\r\n  ctx.beginPath();\r\n  ctx.moveTo(x, y);\r\n  ctx.lineTo(x + map.tile_buffer, y);\r\n  ctx.moveTo(x, y);\r\n  ctx.lineTo(x, y + map.tile_buffer);\r\n  ctx.stroke();\r\n  ctx.closePath();\r\n  */\n\n}\n\nfunction drawImage(tile, x, y, tile_buffer) {\n  ctx.strokeStyle = "transparent";\n  ctx.drawImage(tilesheet, tile % 10 * map_tile_buffer, Math.floor(tile / 10) * map_tile_buffer, map_tile_buffer, map_tile_buffer, x, y, tile_buffer, tile_buffer);\n}\n\nfunction drawPlayer(x_, y_, p, tile_buffer) {\n  ctx.strokeStyle = "transparent"; // Used to go horizontally to the next\n  // player portion on the spritesheet.\n\n  let y_offset = 4; // Shirt\n\n  ctx.drawImage(charsheet, p.direction * map_tile_buffer, p.shirt * map_tile_buffer, map_tile_buffer, map_tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer); // Hair\n\n  ctx.drawImage(charsheet, (p.direction + y_offset) * map_tile_buffer, p.hair * map_tile_buffer, map_tile_buffer, map_tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n  y_offset += 4; // Skin\n\n  ctx.drawImage(charsheet, (p.direction + y_offset) * map_tile_buffer, p.skin * map_tile_buffer, map_tile_buffer, map_tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n  y_offset += 4; // Eyes\n\n  ctx.drawImage(charsheet, (p.direction + y_offset) * map_tile_buffer, p.eyes * map_tile_buffer, map_tile_buffer, map_tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n  y_offset += 4; // Pants\n\n  ctx.drawImage(charsheet, (p.direction + y_offset) * map_tile_buffer, p.pants * map_tile_buffer, map_tile_buffer, map_tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n  y_offset += 4; // Shoes\n\n  ctx.drawImage(charsheet, (p.direction + y_offset) * map_tile_buffer, p.shoes * map_tile_buffer, map_tile_buffer, map_tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n  y_offset += 4; // Hair Accessory\n\n  ctx.drawImage(charsheet, (p.direction + y_offset) * map_tile_buffer, p.hair_accessory * map_tile_buffer, map_tile_buffer, map_tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n\n  if (settings.player_names) {\n    ctx.fillStyle = "black";\n    ctx.font = "10pt Merriweather Sans";\n    ctx.textBaseline = "middle";\n    ctx.textAlign = "center";\n    ctx.fillText(p.username, x_ * tile_buffer + tile_buffer / 2, y_ * tile_buffer - 5);\n  }\n}\n\nfunction drawOthers(tile_buffer, border_size) {\n  for (const u in all_users) {\n    if (u != username) {\n      const ucx = all_users[u].cx;\n      const ucy = all_users[u].cy;\n      const x = ucx - cx;\n      const y = ucy - cy;\n\n      if (x >= -border_size && x <= border_size && y >= -border_size && y <= border_size) {\n        // Fill the character tile\n        drawPlayer(x + border_size, y + border_size, all_users[u], tile_buffer);\n      }\n    }\n  }\n}\n\nfunction drawSidePanel(canvas_width, canvas_height) {\n  ctx.strokeStyle = "transparent";\n  ctx.fillStyle = "white";\n  ctx.fillRect(canvas_width, 0, 60, canvas_height); // Settings\n\n  ctx.drawImage(optionsheet, 0, 0, 60, 60, draw_canvas.width - 60, 0, 60, 60); // Message History\n\n  ctx.drawImage(optionsheet, 0, 60, 60, 60, draw_canvas.width - 60, 60, 60, 60); // Inventory\n\n  ctx.drawImage(optionsheet, 0, 120, 60, 60, draw_canvas.width - 60, 120, 60, 60); // Logout\n\n  ctx.drawImage(optionsheet, 0, 420, 60, 30, draw_canvas.width - 60, draw_canvas.height - 30, 60, 30);\n}\n\nfunction drawRightClickExamine() {\n  let box_width = ctx.measureText(examine).width + 10;\n  let box_height = 22;\n  ctx.fillStyle = "black";\n  ctx.fillRect(last_click_x, last_click_y, box_width, box_height);\n  examine_menu_vertices = [[last_click_x - 5, last_click_y - 5], [last_click_x + box_width + 5, last_click_y - 5], [last_click_x + box_width + 5, last_click_y + box_height + 5], [last_click_x - 5, last_click_y + box_height + 5]];\n  ctx.fillStyle = "white";\n  ctx.textAlign = "center";\n  ctx.fillText(examine, last_click_x + Math.floor(box_width / 2), last_click_y + Math.floor(box_height / 2));\n}\n\nfunction drawObjectName() {\n  ctx.fillStyle = "white";\n  ctx.textAlign = "end";\n  ctx.fillText(object_name, draw_canvas.width - 65, 10);\n}\n\nfunction drawCoordinates(canvas_width, canvas_height) {\n  // Fill the position\n  ctx.fillStyle = "white";\n  ctx.textAlign = "end";\n  ctx.fillRect(0, canvas_height, canvas_width, 20);\n  ctx.font = "12pt Merriweather Sans";\n  ctx.fillStyle = "black";\n  ctx.fillText("(" + cx + ", " + cy + ")", canvas_width - 5, canvas_height + 10);\n}\n\nfunction drawOverlay(canvas_width, canvas_height) {\n  ctx.fillStyle = "white";\n  ctx.fillRect(0, 0, canvas_width, canvas_height);\n}\n\nfunction drawSettings(canvas_width, canvas_height) {\n  drawOverlay(canvas_width, canvas_height);\n  ctx.fillStyle = "black";\n  ctx.textAlign = "start";\n  ctx.font = "bold 24pt Merriweather Sans";\n  ctx.fillText("Settings", canvas_width / 4 - 25, 40);\n  ctx.font = "12pt Merriweather Sans"; // Show player names\n\n  ctx.fillText("Show Player Names: " + (settings.player_names ? "On" : "Off"), canvas_width / 4 - 24, 70); // Show current coordinates\n\n  ctx.fillText("Show Coordinates: " + (settings.coordinates ? "On" : "Off"), canvas_width / 4 - 24, 95); // Show current coordinates\n\n  ctx.fillText("Zoom: " + (settings.zoom ? "Close" : "Far"), canvas_width / 4 - 24, 120);\n}\n\nfunction drawHistory(canvas_width, canvas_height) {\n  drawOverlay(canvas_width, canvas_height);\n}\n\nfunction drawInventory(canvas_width, canvas_height) {\n  drawOverlay(canvas_width, canvas_height);\n}\n\nfunction drawMapName(canvas_height) {\n  ctx.fillStyle = "white";\n  ctx.fillRect(0, canvas_height, draw_canvas.width, 30);\n  ctx.fillStyle = "black";\n  ctx.textAlign = "start";\n  ctx.font = "bold 12pt Merriweather Sans";\n  ctx.fillText(current_map_name, 5, draw_canvas.height - 10);\n}\n;// CONCATENATED MODULE: ./scrolling-map/js/game.js\n// game.js\n// import \'@babel/polyfill\';\n\n\n\n\n\n/* Initializing */\n\nconst socket = io.connect(\'//\' + document.domain + \':\' + location.port);\nlet logout = false;\nlet all_users = {};\nlet entities = [];\nlet action_data = {};\nlet examine = "";\nfunction resetExamine() {\n  examine = "";\n  examine_menu_vertices = [[0, 0], [0, 0], [0, 0], [0, 0]];\n}\nlet object_name = "";\n/* Movement */\n\nfunction doMove(movement) {\n  cx = movement.cx;\n  cy = movement.cy;\n  direction = movement.direction;\n}\n/* Main game loop and socket listeners */\n\n\nlet last;\n\n(function () {\n  function main(timestamp) {\n    if (logout) {\n      return;\n    }\n\n    draw();\n    requestAnimationFrame(main);\n  }\n\n  socket.on(\'connect\', function () {\n    const form = document.getElementById("authentication");\n    form.addEventListener(\'submit\', function (e) {\n      e.preventDefault();\n      socket.emit(\'authentication\', JSON.stringify({\n        \'username\': document.getElementById(\'username\').value\n      }));\n    });\n  });\n  socket.on(\'authenticated\', function (data) {\n    data = JSON.parse(data);\n    const msg = document.getElementById("message");\n\n    if (data.success) {\n      msg.innerHTML = "Authenticated successfully!";\n      setTimeout(function () {\n        msg.innerHTML = "Loading data...";\n        socket.emit(\'retrieve_init_data\', JSON.stringify({\n          \'username\': data.username\n        }));\n      }, 300);\n    } else {\n      msg.innerHTML = "Authentication failed. Please try again.";\n    }\n  });\n\n  function loadMap(attempts) {\n    const loaded = checkDataAcquired();\n\n    if (loaded) {\n      setTimeout(function () {\n        document.getElementById("message").innerHTML = "";\n        document.getElementById(\'message\').className = "hide";\n        document.getElementById(\'auth\').className = "hide";\n        document.getElementById(\'canvas\').className = "show centered";\n        logout = false;\n        main(); // Start the cycle\n\n        listener(); // Begin movement listeners\n\n        clickListener();\n      }, 300);\n      return; // Do not execute the rest of the function.\n    }\n\n    attempts++;\n\n    if (attempts < 10) {\n      setTimeout(function () {\n        loadMap(attempts);\n      }, 100);\n      return; // Do not execute the rest of the function.\n    }\n\n    msg.innerHTML = "Failed to get data from the server.";\n  }\n\n  function checkDataAcquired() {\n    const got_user = username !== "";\n    const got_map = current_map !== undefined || current_map.length > 0;\n    return got_user && got_map;\n  } // Recieves and populates initial data.\n\n\n  socket.on(\'init_data\', function (data) {\n    data = JSON.parse(data);\n    [username, [cx, cy, direction], [current_map, current_map_name], [shirt, hair, skin, eyes, pants, shoes, hair_accessory], entities, settings, [map_tile_buffer, map_border_size], all_users] = data;\n\n    if (draw_canvas.width < 450) {\n      map_border_size = 4;\n    }\n\n    loadMap(0);\n  });\n  socket.on(\'object_action\', function (data) {\n    action_data = JSON.parse(data);\n  }); // Recieves and populates map data.\n\n  socket.on(\'map_data\', function (data) {\n    [current_map, current_map_name] = JSON.parse(data);\n  });\n  socket.on(\'entity_data\', function (data) {\n    entities = JSON.parse(data);\n  }); // Moves the local player\n\n  socket.on(\'movement_self\', function (data) {\n    data = JSON.parse(data);\n    if (username == data.username) doMove(data);\n  }); // Updates specific player\'s data\n\n  socket.on(\'update_player\', function (data) {\n    data = JSON.parse(data);\n\n    if (data.username == username) {\n      cx = data.cx;\n      cy = data.cy;\n      direction = data.direction;\n      shirt = data.shirt;\n      hair = data.hair;\n      skin = data.skin;\n      eyes = data.eyes;\n      pants = data.pants;\n      shoes = data.shoes;\n      hair_accessory = data.hair_accessory;\n    } else {\n      all_users[data.username] = data;\n    }\n  }); // Remove player from users data\n\n  socket.on(\'remove_user\', function (data) {\n    data = JSON.parse(data);\n\n    if (data.username) {\n      delete all_users[data.username];\n    } // Logout if self\n\n\n    if (data.username == username) {\n      logout = true;\n      all_users = {};\n      document.getElementById(\'message\').className = "show";\n      document.getElementById(\'auth\').className = "show";\n      document.getElementById(\'canvas\').className = "hide";\n      removeListeners();\n    }\n  });\n  socket.on(\'failure\', function (data) {\n    console.log(\'Unsynchronized.\');\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///782\n')}},__webpack_require__={d:(Q,F)=>{for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},o:(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),r:Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})}},__webpack_exports__={};__webpack_modules__[782](0,__webpack_exports__,__webpack_require__)})();