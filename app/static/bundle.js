!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var s=F[U]={i:U,l:!1,exports:{}};return Q[U].call(s.exports,s,s.exports,B),s.l=!0,s.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var s in Q)B.d(U,s,function(F){return Q[F]}.bind(null,s));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./js/draw.js\n// draw.js\n\nconst canvas = document.getElementById('canvas');\ncanvas.addEventListener(\"contextmenu\", function (e) {\n  e.preventDefault();\n}, false);\nconst ctx = canvas.getContext('2d'); // Rows of 10 30x30 tiles.\n\nconst tilesheet = new Image();\ntilesheet.src = \"static/tilesheet.png\";\nconst charsheet = new Image();\ncharsheet.src = \"static/charsheet.png\"; // Small windows means smaller canvas.\n\nif (window.innerWidth < 500) {\n  canvas.width = 270;\n  canvas.height = 290;\n}\n/* DRAWING */\n\n\nfunction draw() {\n  const canvas_height = canvas.height - 20;\n  ctx.clearRect(0, 0, canvas.width, canvas_height);\n\n  for (let x = 0; x < canvas.width; x += tile_buffer) {\n    const curr_x = x / tile_buffer + (cx - sx);\n\n    for (let y = 0; y < canvas_height; y += tile_buffer) {\n      const tile = map[y / tile_buffer + (cy - sy)][curr_x];\n\n      if (Array.isArray(tile)) {\n        for (const def in tile) {\n          drawTile(tile[def], x, y);\n        }\n      } else {\n        drawTile(tile, x, y);\n      }\n    }\n  }\n\n  drawOthers(); // Fill the local character tile\n\n  if (charsheet.complete) {\n    drawPlayer(sx, sy, dir);\n  } else {\n    charsheet.addEventListener('load', drawPlayer);\n  } // Fill the position\n\n\n  ctx.fillStyle = \"white\";\n  ctx.strokeStyle = \"black\";\n  ctx.fillRect(0, canvas_height, canvas.width, 20);\n  ctx.strokeText(\"(\" + cx + \", \" + cy + \")\", canvas.width - 40, canvas_height + 10);\n}\n\nfunction drawTile(tile, x, y) {\n  ctx.beginPath();\n\n  if (tilesheet.complete) {\n    drawImage(tile, x, y);\n  } else {\n    tilesheet.load = drawImage.bind(tile, x, y);\n  }\n\n  ctx.moveTo(x, y);\n  ctx.lineTo(x + tile_buffer, y);\n  ctx.moveTo(x, y);\n  ctx.lineTo(x, y + tile_buffer);\n  ctx.stroke();\n  ctx.closePath();\n}\n\nfunction drawPlayer(x_, y_, direction) {\n  ctx.strokeStyle = \"transparent\";\n  ctx.drawImage(charsheet, direction * tile_buffer, 0, tile_buffer, tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n}\n\nfunction drawImage(tile, x, y) {\n  ctx.strokeStyle = \"transparent\";\n  ctx.drawImage(tilesheet, tile % 10 * tile_buffer, Math.floor(tile / 10) * tile_buffer, tile_buffer, tile_buffer, x, y, tile_buffer, tile_buffer);\n}\n\nfunction drawOthers() {\n  for (const u in all_users) {\n    if (u != user) {\n      const ucx = all_users[u]['cx'];\n      const ucy = all_users[u]['cy'];\n      const x = ucx - cx;\n      const y = ucy - cy;\n\n      if (x >= -sx && x <= sx && y >= -sy && y <= sy) {\n        // Fill the character tile\n        drawPlayer(x + sx, y + sy, all_users[u]['direction']);\n      }\n    }\n  }\n}\n// CONCATENATED MODULE: ./js/game.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"user\", function() { return user; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"all_users\", function() { return all_users; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cx\", function() { return cx; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cy\", function() { return cy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dir\", function() { return dir; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sx\", function() { return sx; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sy\", function() { return sy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"map\", function() { return map; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tiles\", function() { return tiles; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tile_buffer\", function() { return tile_buffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"listener\", function() { return listener; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clickListener\", function() { return clickListener; });\n// game.js\n// import '@babel/polyfill';\n\n/* Initializing */\n\nconst socket = io.connect('//' + document.domain + ':' + location.port);\nlet user = \"\";\nlet all_users = {}; // character start (0,0)\n\nlet cx = 0;\nlet cy = 0;\nlet dir = 0;\nlet sx = 0;\nlet sy = 0;\n/* MAP OPTIONS */\n\nlet map = [];\nlet tiles = {};\nlet tile_buffer = 0; // Tile Buffer: How large tiles are\n\nconst mid_width = canvas.width / 2;\nconst mid_height = canvas.height / 2;\n\nfunction determineClick(click_x, click_y) {\n  const mid_offset = 15;\n  const mid_low = mid_width - mid_offset;\n  const mid_high = mid_width - mid_offset;\n\n  if (polygon_click_test(4, [mid_low, mid_high, mid_high, mid_low], // x values\n  [mid_low, mid_low, mid_high, mid_high], // y values\n  click_x, click_y)) {\n    sendAction({\n      'keyCode': 32,\n      'preventDefault': function preventDefault() {}\n    }); // Spacebar\n  } else if (polygon_click_test(3, [0, mid_width, canvas.width], [0, mid_height, 0], click_x, click_y)) {\n    sendAction({\n      'keyCode': 38,\n      'preventDefault': function preventDefault() {}\n    }); // Up\n  } else if (polygon_click_test(3, [0, mid_width, canvas.width], [canvas.height, mid_height, canvas.height], click_x, click_y)) {\n    sendAction({\n      'keyCode': 40,\n      'preventDefault': function preventDefault() {}\n    }); // Down\n  } else if (polygon_click_test(3, [0, mid_width, 0], [0, mid_height, canvas.height], click_x, click_y)) {\n    sendAction({\n      'keyCode': 37,\n      'preventDefault': function preventDefault() {}\n    }); // Left\n  } else if (polygon_click_test(3, [canvas.width, mid_width, canvas.width], [0, mid_height, canvas.height], click_x, click_y)) {\n    sendAction({\n      'keyCode': 39,\n      'preventDefault': function preventDefault() {}\n    }); // Right\n  }\n} // polygon_click_test by Wm. Randolph Franklin\n// int list(int) list(int) int int -> bool\n// Consumes the number of vertices, along with each vertex coordinate,\n// as a list of x coordinates and a second list of y coordinates.\n// Tests against clicked coordinates to determine whether the\n// click was within the polygon formed by said vertices.\n\n\nfunction polygon_click_test(nvert, vertx, verty, testx, testy) {\n  let i,\n      j,\n      c = false;\n\n  for (i = 0, j = nvert - 1; i < nvert; j = i++) {\n    if (verty[i] > testy != verty[j] > testy && testx < (vertx[j] - vertx[i]) * (testy - verty[i]) / (verty[j] - verty[i]) + vertx[i]) {\n      c = !c;\n    }\n  }\n\n  return c;\n}\n\nfunction getClickCoords(e) {\n  e.preventDefault();\n  const click_x = e.offsetX;\n  const click_y = e.offsetY;\n  determineClick(click_x, click_y);\n}\n\nfunction getTouchCoords(e) {\n  e.preventDefault();\n  const click_x = e.touches[0].clientX - canvas.getBoundingClientRect().left;\n  const click_y = e.touches[0].clientY - canvas.getBoundingClientRect().top;\n  determineClick(click_x, click_y);\n}\n\nfunction listener() {\n  document.addEventListener('keydown', sendAction);\n}\nfunction clickListener() {\n  canvas.addEventListener('mousedown', getClickCoords);\n  canvas.addEventListener('touchstart', getTouchCoords);\n  canvas.addEventListener('touchend', function (e) {\n    e.preventDefault();\n  });\n}\n/* MOVEMENT */\n\nfunction sendAction(e) {\n  if (![32, 37, 38, 39, 40, 65, 68, 69, 83, 87].includes(e.keyCode)) return;\n  e.preventDefault();\n\n  if (e.keyCode == 32) {\n    // Spacebar\n    console.log(\"Eventually we will implement the spacebar for interacting\" + \" with items below your character.\");\n  } else if (e.keyCode == 69) {\n    console.log(\"Eventually we will implement the 'e' key for interacting\" + \" with nearby npcs and objects, if your player is facing them!\");\n  }\n\n  socket.emit('json', JSON.stringify({\n    'user': user,\n    'action': e.keyCode\n  }));\n}\n\nfunction doMove(movement) {\n  cx = movement['cx'];\n  cy = movement['cy'];\n  dir = movement['direction'];\n}\n\nlet last;\n\n(function () {\n  function main(timestamp) {\n    if (!last) {\n      last = timestamp;\n      draw();\n    } else {\n      if (timestamp - last > 100) {\n        draw();\n      }\n    }\n\n    requestAnimationFrame(main);\n  }\n\n  socket.on('connect', function () {\n    const form = document.getElementById(\"authentication\");\n    form.addEventListener('submit', function (e) {\n      e.preventDefault();\n      socket.emit('authentication', JSON.stringify({\n        'username': document.getElementById('username').value\n      }));\n    });\n  });\n  socket.on('authenticated', function (data) {\n    data = JSON.parse(data);\n    const msg = document.getElementById(\"message\");\n\n    if (data.success) {\n      msg.innerHTML = \"Authenticated successfully!\";\n      setTimeout(function () {\n        msg.innerHTML = \"Loading data...\";\n        loadMap(0);\n      }, 1000);\n    } else {\n      msg.innerHTML = \"Authentication failed. Please try again.\";\n    }\n  });\n\n  async function loadMap(attempts) {\n    const loaded = await checkDataAcquired();\n    const msg = document.getElementById(\"message\");\n\n    if (loaded) {\n      return setTimeout(function () {\n        document.getElementById('auth').className = \"hide\";\n        document.querySelector('main').className = \"show\";\n        msg.innerHTML = \"Welcome to the world.\";\n        main(); // Start the cycle\n\n        listener(); // Begin movement listeners\n\n        clickListener();\n      }, 1000);\n    }\n\n    attempts++;\n\n    if (attempts < 100) {\n      return setTimeout(function () {\n        loadMap(attempts);\n      }, 100);\n    }\n\n    msg.innerHTML = \"Failed to get data from the server.\";\n    return;\n  }\n\n  function checkDataAcquired() {\n    return new Promise(resolve => {\n      const got_user = user != \"\";\n      const got_map = map !== undefined || map.length > 0;\n      if (got_user && got_map) return resolve(true);\n      return resolve(false);\n    });\n  } // Recieves and populates initial data.\n\n\n  socket.on('init_data', function (data) {\n    data = JSON.parse(data);\n    user = data[0];\n    cx = data[1][0];\n    cy = data[1][1];\n    dir = data[1][2];\n    map = data[2]['map'];\n    tile_buffer = data[3][0];\n\n    if (canvas.width < 450) {\n      sx = 4;\n      sy = 4;\n    } else {\n      sx = data[3][1];\n      sy = data[3][2];\n    }\n  });\n  socket.on('tiles', function (data) {\n    tiles = JSON.parse(data);\n  }); // Recieves and populates map data.\n\n  socket.on('map_data', function (data) {\n    data = JSON.parse(data);\n  }); // Moves the local player\n\n  socket.on('movement_self', function (data) {\n    data = JSON.parse(data);\n    if (user == data['username']) doMove(data);\n  }); // Updates all players\n\n  socket.on('update_all', function (data) {\n    all_users = JSON.parse(data);\n  });\n  socket.on('failure', function (data) {\n    console.log('Unsynchronized.');\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9kcmF3LmpzP2IyM2YiLCJ3ZWJwYWNrOi8vLy4vanMvZ2FtZS5qcz9lNjU3Il0sIm5hbWVzIjpbImNhbnZhcyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwiY3R4IiwiZ2V0Q29udGV4dCIsInRpbGVzaGVldCIsIkltYWdlIiwic3JjIiwiY2hhcnNoZWV0Iiwid2luZG93IiwiaW5uZXJXaWR0aCIsIndpZHRoIiwiaGVpZ2h0IiwiZHJhdyIsImNhbnZhc19oZWlnaHQiLCJjbGVhclJlY3QiLCJ4IiwidGlsZV9idWZmZXIiLCJjdXJyX3giLCJjeCIsInN4IiwieSIsInRpbGUiLCJtYXAiLCJjeSIsInN5IiwiQXJyYXkiLCJpc0FycmF5IiwiZGVmIiwiZHJhd1RpbGUiLCJkcmF3T3RoZXJzIiwiY29tcGxldGUiLCJkcmF3UGxheWVyIiwiZGlyIiwiZmlsbFN0eWxlIiwic3Ryb2tlU3R5bGUiLCJmaWxsUmVjdCIsInN0cm9rZVRleHQiLCJiZWdpblBhdGgiLCJkcmF3SW1hZ2UiLCJsb2FkIiwiYmluZCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsImNsb3NlUGF0aCIsInhfIiwieV8iLCJkaXJlY3Rpb24iLCJNYXRoIiwiZmxvb3IiLCJ1IiwiYWxsX3VzZXJzIiwidXNlciIsInVjeCIsInVjeSIsInNvY2tldCIsImlvIiwiY29ubmVjdCIsImRvbWFpbiIsImxvY2F0aW9uIiwicG9ydCIsInRpbGVzIiwibWlkX3dpZHRoIiwibWlkX2hlaWdodCIsImRldGVybWluZUNsaWNrIiwiY2xpY2tfeCIsImNsaWNrX3kiLCJtaWRfb2Zmc2V0IiwibWlkX2xvdyIsIm1pZF9oaWdoIiwicG9seWdvbl9jbGlja190ZXN0Iiwic2VuZEFjdGlvbiIsIm52ZXJ0IiwidmVydHgiLCJ2ZXJ0eSIsInRlc3R4IiwidGVzdHkiLCJpIiwiaiIsImMiLCJnZXRDbGlja0Nvb3JkcyIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZ2V0VG91Y2hDb29yZHMiLCJ0b3VjaGVzIiwiY2xpZW50WCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJjbGllbnRZIiwidG9wIiwibGlzdGVuZXIiLCJjbGlja0xpc3RlbmVyIiwiaW5jbHVkZXMiLCJrZXlDb2RlIiwiY29uc29sZSIsImxvZyIsImVtaXQiLCJKU09OIiwic3RyaW5naWZ5IiwiZG9Nb3ZlIiwibW92ZW1lbnQiLCJsYXN0IiwibWFpbiIsInRpbWVzdGFtcCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9uIiwiZm9ybSIsInZhbHVlIiwiZGF0YSIsInBhcnNlIiwibXNnIiwic3VjY2VzcyIsImlubmVySFRNTCIsInNldFRpbWVvdXQiLCJsb2FkTWFwIiwiYXR0ZW1wdHMiLCJsb2FkZWQiLCJjaGVja0RhdGFBY3F1aXJlZCIsImNsYXNzTmFtZSIsInF1ZXJ5U2VsZWN0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdvdF91c2VyIiwiZ290X21hcCIsInVuZGVmaW5lZCIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFFQTtBQUVPLE1BQU1BLE1BQU0sR0FBR0MsUUFBUSxDQUFDQyxjQUFULENBQXdCLFFBQXhCLENBQWY7QUFDUEYsTUFBTSxDQUFDRyxnQkFBUCxDQUF3QixhQUF4QixFQUNFLFVBQVVDLENBQVYsRUFBYTtBQUFDQSxHQUFDLENBQUNDLGNBQUY7QUFBb0IsQ0FEcEMsRUFDc0MsS0FEdEM7QUFHQSxNQUFNQyxHQUFHLEdBQUdOLE1BQU0sQ0FBQ08sVUFBUCxDQUFrQixJQUFsQixDQUFaLEMsQ0FFQTs7QUFDQSxNQUFNQyxTQUFTLEdBQUcsSUFBSUMsS0FBSixFQUFsQjtBQUNBRCxTQUFTLENBQUNFLEdBQVYsR0FBZ0Isc0JBQWhCO0FBRUEsTUFBTUMsU0FBUyxHQUFHLElBQUlGLEtBQUosRUFBbEI7QUFDQUUsU0FBUyxDQUFDRCxHQUFWLEdBQWdCLHNCQUFoQixDLENBRUE7O0FBQ0EsSUFBSUUsTUFBTSxD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UUFBTSxDQUFDa0QsRUFBUCxDQUFVLE9BQVYsRUFBbUIsVUFBVUcsSUFBVixFQUFnQjtBQUNqQy9DLFNBQUssR0FBR29DLElBQUksQ0FBQ1ksS0FBTCxDQUFXRCxJQUFYLENBQVI7QUFDRCxHQUZELEVBM0ZXLENBK0ZYOztBQUNBckQsUUFBTSxDQUFDa0QsRUFBUCxDQUFVLFVBQVYsRUFBc0IsVUFBVUcsSUFBVixFQUFnQjtBQUNwQ0EsUUFBSSxHQUFHWCxJQUFJLENBQUNZLEtBQUwsQ0FBV0QsSUFBWCxDQUFQO0FBQ0QsR0FGRCxFQWhHVyxDQW9HWDs7QUFDQXJELFFBQU0sQ0FBQ2tELEVBQVAsQ0FBVSxlQUFWLEVBQTJCLFVBQVVHLElBQVYsRUFBZ0I7QUFDekNBLFFBQUksR0FBR1gsSUFBSSxDQUFDWSxLQUFMLENBQVdELElBQVgsQ0FBUDtBQUNBLFFBQUl4RCxJQUFJLElBQUl3RCxJQUFJLENBQUMsVUFBRCxDQUFoQixFQUNFVCxNQUFNLENBQUNTLElBQUQsQ0FBTjtBQUNILEdBSkQsRUFyR1csQ0EyR1g7O0FBQ0FyRCxRQUFNLENBQUNrRCxFQUFQLENBQVUsWUFBVixFQUF3QixVQUFVRyxJQUFWLEVBQWdCO0FBQ3RDekQsYUFBUyxHQUFHOEMsSUFBSSxDQUFDWSxLQUFMLENBQVdELElBQVgsQ0FBWjtBQUNELEdBRkQ7QUFJQXJELFFBQU0sQ0FBQ2tELEVBQVAsQ0FBVSxTQUFWLEVBQXFCLFVBQVVHLElBQVYsRUFBZ0I7QUFDbkNkLFdBQU8sQ0FBQ0MsR0FBUixDQUFZLGlCQUFaO0FBQ0QsR0FGRDtBQUdELENBbkhEIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBkcmF3LmpzXHJcblxyXG5pbXBvcnQge2FsbF91c2VycywgY3gsIGN5LCBkaXIsIG1hcCwgc3gsIHN5LCB0aWxlX2J1ZmZlciwgdXNlcn0gZnJvbSAnLi9nYW1lLmpzJztcclxuXHJcbmV4cG9ydCBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzJyk7XHJcbmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIixcclxuICBmdW5jdGlvbiAoZSkge2UucHJldmVudERlZmF1bHQoKTt9LCBmYWxzZSk7XHJcblxyXG5jb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcbi8vIFJvd3Mgb2YgMTAgMzB4MzAgdGlsZXMuXHJcbmNvbnN0IHRpbGVzaGVldCA9IG5ldyBJbWFnZSgpO1xyXG50aWxlc2hlZXQuc3JjID0gXCJzdGF0aWMvdGlsZXNoZWV0LnBuZ1wiO1xyXG5cclxuY29uc3QgY2hhcnNoZWV0ID0gbmV3IEltYWdlKCk7XHJcbmNoYXJzaGVldC5zcmMgPSBcInN0YXRpYy9jaGFyc2hlZXQucG5nXCI7XHJcblxyXG4vLyBTbWFsbCB3aW5kb3dzIG1lYW5zIHNtYWxsZXIgY2FudmFzLlxyXG5pZiAod2luZG93LmlubmVyV2lkdGggPCA1MDApIHtcclxuICBjYW52YXMud2lkdGggPSAyNzA7XHJcbiAgY2FudmFzLmhlaWdodCA9IDI5MDtcclxufVxyXG5cclxuLyogRFJBV0lORyAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZHJhdygpIHtcclxuICBjb25zdCBjYW52YXNfaGVpZ2h0ID0gY2FudmFzLmhlaWdodCAtIDIwO1xyXG4gIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXNfaGVpZ2h0KTtcclxuICBmb3IgKGxldCB4ID0gMDsgeCA8IGNhbnZhcy53aWR0aDsgeCArPSB0aWxlX2J1ZmZlcikge1xyXG4gICAgY29uc3QgY3Vycl94ID0geC90aWxlX2J1ZmZlcisoY3gtc3gpO1xyXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBjYW52YXNfaGVpZ2h0OyB5ICs9IHRpbGVfYnVmZmVyKSB7XHJcbiAgICAgIGNvbnN0IHRpbGUgPSBtYXBbeS90aWxlX2J1ZmZlcisoY3ktc3kpXVtjdXJyX3hdO1xyXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aWxlKSkge1xyXG4gICAgICAgIGZvciAoY29uc3QgZGVmIGluIHRpbGUpIHtcclxuICAgICAgICAgIGRyYXdUaWxlKHRpbGVbZGVmXSwgeCwgeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGRyYXdUaWxlKHRpbGUsIHgsIHkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkcmF3T3RoZXJzKCk7XHJcblxyXG4gIC8vIEZpbGwgdGhlIGxvY2FsIGNoYXJhY3RlciB0aWxlXHJcbiAgaWYgKGNoYXJzaGVldC5jb21wbGV0ZSkge1xyXG4gICAgZHJhd1BsYXllcihzeCwgc3ksIGRpcik7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgY2hhcnNoZWV0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBkcmF3UGxheWVyKTtcclxuICB9XHJcblxyXG4gIC8vIEZpbGwgdGhlIHBvc2l0aW9uXHJcbiAgY3R4LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcclxuICBjdHguc3Ryb2tlU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgY3R4LmZpbGxSZWN0KDAsIGNhbnZhc19oZWlnaHQsIGNhbnZhcy53aWR0aCwgMjApO1xyXG4gIGN0eC5zdHJva2VUZXh0KFxyXG4gICAgXCIoXCIgKyBjeCArIFwiLCBcIiArIGN5ICsgXCIpXCIsXHJcbiAgICBjYW52YXMud2lkdGggLSA0MCwgY2FudmFzX2hlaWdodCArIDEwXHJcbiAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1RpbGUodGlsZSwgeCwgeSkge1xyXG4gIGN0eC5iZWdpblBhdGgoKTtcclxuICBpZiAodGlsZXNoZWV0LmNvbXBsZXRlKSB7XHJcbiAgICBkcmF3SW1hZ2UodGlsZSwgeCwgeSk7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgdGlsZXNoZWV0LmxvYWQgPSBkcmF3SW1hZ2UuYmluZCh0aWxlLCB4LCB5KTtcclxuICB9XHJcbiAgY3R4Lm1vdmVUbyh4LCB5KTtcclxuICBjdHgubGluZVRvKHggKyB0aWxlX2J1ZmZlciwgeSk7XHJcbiAgY3R4Lm1vdmVUbyh4LCB5KTtcclxuICBjdHgubGluZVRvKHgsIHkgKyB0aWxlX2J1ZmZlcik7XHJcbiAgY3R4LnN0cm9rZSgpO1xyXG4gIGN0eC5jbG9zZVBhdGgoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1BsYXllcih4XywgeV8sIGRpcmVjdGlvbikge1xyXG4gIGN0eC5zdHJva2VTdHlsZSA9IFwidHJhbnNwYXJlbnRcIjtcclxuICBjdHguZHJhd0ltYWdlKGNoYXJzaGVldCwgZGlyZWN0aW9uICogdGlsZV9idWZmZXIsIDAsXHJcbiAgICB0aWxlX2J1ZmZlciwgdGlsZV9idWZmZXIsIHhfKnRpbGVfYnVmZmVyLCB5Xyp0aWxlX2J1ZmZlciwgdGlsZV9idWZmZXIsIHRpbGVfYnVmZmVyKVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3SW1hZ2UodGlsZSwgeCwgeSkge1xyXG4gIGN0eC5zdHJva2VTdHlsZSA9IFwidHJhbnNwYXJlbnRcIjtcclxuICBjdHguZHJhd0ltYWdlKHRpbGVzaGVldCwgKHRpbGUgJSAxMCkgKiB0aWxlX2J1ZmZlciwgTWF0aC5mbG9vcih0aWxlIC8gMTApICogdGlsZV9idWZmZXIsXHJcbiAgICB0aWxlX2J1ZmZlciwgdGlsZV9idWZmZXIsIHgsIHksIHRpbGVfYnVmZmVyLCB0aWxlX2J1ZmZlcik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdPdGhlcnMoKSB7XHJcbiAgZm9yIChjb25zdCB1IGluIGFsbF91c2Vycykge1xyXG4gICAgaWYgKHUgIT0gdXNlcikge1xyXG4gICAgICBjb25zdCB1Y3ggPSBhbGxfdXNlcnNbdV1bJ2N4J107XHJcbiAgICAgIGNvbnN0IHVjeSA9IGFsbF91c2Vyc1t1XVsnY3knXTtcclxuICAgICAgY29uc3QgeCA9IHVjeCAtIGN4O1xyXG4gICAgICBjb25zdCB5ID0gdWN5IC0gY3k7XHJcbiAgICAgIGlmICh4ID49IC1zeCAmJiB4IDw9IHN4ICYmIHkgPj0gLXN5ICYmIHkgPD0gc3kpIHtcclxuICAgICAgICAvLyBGaWxsIHRoZSBjaGFyYWN0ZXIgdGlsZVxyXG4gICAgICAgIGRyYXdQbGF5ZXIoeCtzeCwgeStzeSwgYWxsX3VzZXJzW3VdWydkaXJlY3Rpb24nXSlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCIvLyBnYW1lLmpzXHJcblxyXG4vLyBpbXBvcnQgJ0BiYWJlbC9wb2x5ZmlsbCc7XHJcbmltcG9ydCB7Y2FudmFzLCBkcmF3fSBmcm9tICcuL2RyYXcnO1xyXG5cclxuLyogSW5pdGlhbGl6aW5nICovXHJcbmNvbnN0IHNvY2tldCA9IGlvLmNvbm5lY3QoJy8vJyArIGRvY3VtZW50LmRvbWFpbiArICc6JyArIGxvY2F0aW9uLnBvcnQpO1xyXG5cclxuZXhwb3J0IGxldCB1c2VyID0gXCJcIjtcclxuZXhwb3J0IGxldCBhbGxfdXNlcnMgPSB7fTtcclxuXHJcbi8vIGNoYXJhY3RlciBzdGFydCAoMCwwKVxyXG5leHBvcnQgbGV0IGN4ID0gMDtcclxuZXhwb3J0IGxldCBjeSA9IDA7XHJcbmV4cG9ydCBsZXQgZGlyID0gMDtcclxuXHJcbmV4cG9ydCBsZXQgc3ggPSAwO1xyXG5leHBvcnQgbGV0IHN5ID0gMDtcclxuXHJcbi8qIE1BUCBPUFRJT05TICovXHJcbmV4cG9ydCBsZXQgbWFwID0gW107XHJcbmV4cG9ydCBsZXQgdGlsZXMgPSB7fTtcclxuZXhwb3J0IGxldCB0aWxlX2J1ZmZlciA9IDA7IC8vIFRpbGUgQnVmZmVyOiBIb3cgbGFyZ2UgdGlsZXMgYXJlXHJcblxyXG5jb25zdCBtaWRfd2lkdGggPSBjYW52YXMud2lkdGggLyAyO1xyXG5jb25zdCBtaWRfaGVpZ2h0ID0gY2FudmFzLmhlaWdodCAvIDI7XHJcblxyXG5mdW5jdGlvbiBkZXRlcm1pbmVDbGljayhjbGlja194LCBjbGlja195KSB7XHJcbiAgY29uc3QgbWlkX29mZnNldCA9IDE1O1xyXG4gIGNvbnN0IG1pZF9sb3cgPSBtaWRfd2lkdGggLSBtaWRfb2Zmc2V0O1xyXG4gIGNvbnN0IG1pZF9oaWdoID0gbWlkX3dpZHRoIC0gbWlkX29mZnNldDtcclxuICBpZiAocG9seWdvbl9jbGlja190ZXN0KDQsXHJcbiAgICBbbWlkX2xvdywgbWlkX2hpZ2gsIG1pZF9oaWdoLCBtaWRfbG93XSwgLy8geCB2YWx1ZXNcclxuICAgIFttaWRfbG93LCBtaWRfbG93LCBtaWRfaGlnaCwgbWlkX2hpZ2hdLCAvLyB5IHZhbHVlc1xyXG4gICAgY2xpY2tfeCwgY2xpY2tfeSkpIHtcclxuICAgIHNlbmRBY3Rpb24oeydrZXlDb2RlJzogMzIsICdwcmV2ZW50RGVmYXVsdCc6IGZ1bmN0aW9uKCl7fX0pOyAvLyBTcGFjZWJhclxyXG4gIH1cclxuICBlbHNlIGlmIChwb2x5Z29uX2NsaWNrX3Rlc3QoMyxcclxuICAgIFswLCBtaWRfd2lkdGgsIGNhbnZhcy53aWR0aF0sIFswLCBtaWRfaGVpZ2h0LCAwXSxcclxuICAgIGNsaWNrX3gsIGNsaWNrX3kpKSB7XHJcbiAgICBzZW5kQWN0aW9uKHsna2V5Q29kZSc6IDM4LCAncHJldmVudERlZmF1bHQnOiBmdW5jdGlvbigpe319KTsgLy8gVXBcclxuICB9XHJcbiAgZWxzZSBpZiAocG9seWdvbl9jbGlja190ZXN0KDMsXHJcbiAgICBbMCwgbWlkX3dpZHRoLCBjYW52YXMud2lkdGhdLCBbY2FudmFzLmhlaWdodCwgbWlkX2hlaWdodCwgY2FudmFzLmhlaWdodF0sXHJcbiAgICBjbGlja194LCBjbGlja195KSkge1xyXG4gICAgc2VuZEFjdGlvbih7J2tleUNvZGUnOiA0MCwgJ3ByZXZlbnREZWZhdWx0JzogZnVuY3Rpb24oKXt9fSk7IC8vIERvd25cclxuICB9XHJcbiAgZWxzZSBpZiAocG9seWdvbl9jbGlja190ZXN0KDMsXHJcbiAgICBbMCwgbWlkX3dpZHRoLCAwXSwgWzAsIG1pZF9oZWlnaHQsIGNhbnZhcy5oZWlnaHRdLFxyXG4gICAgY2xpY2tfeCwgY2xpY2tfeSkpIHtcclxuICAgIHNlbmRBY3Rpb24oeydrZXlDb2RlJzogMzcsICdwcmV2ZW50RGVmYXVsdCc6IGZ1bmN0aW9uKCl7fX0pOyAvLyBMZWZ0XHJcbiAgfVxyXG4gIGVsc2UgaWYgKHBvbHlnb25fY2xpY2tfdGVzdCgzLFxyXG4gICAgW2NhbnZhcy53aWR0aCwgbWlkX3dpZHRoLCBjYW52YXMud2lkdGhdLCBbMCwgbWlkX2hlaWdodCwgY2FudmFzLmhlaWdodF0sXHJcbiAgICBjbGlja194LCBjbGlja195KSkge1xyXG4gICAgc2VuZEFjdGlvbih7J2tleUNvZGUnOiAzOSwgJ3ByZXZlbnREZWZhdWx0JzogZnVuY3Rpb24oKXt9fSk7IC8vIFJpZ2h0XHJcbiAgfVxyXG59XHJcblxyXG4vLyBwb2x5Z29uX2NsaWNrX3Rlc3QgYnkgV20uIFJhbmRvbHBoIEZyYW5rbGluXHJcbi8vIGludCBsaXN0KGludCkgbGlzdChpbnQpIGludCBpbnQgLT4gYm9vbFxyXG4vLyBDb25zdW1lcyB0aGUgbnVtYmVyIG9mIHZlcnRpY2VzLCBhbG9uZyB3aXRoIGVhY2ggdmVydGV4IGNvb3JkaW5hdGUsXHJcbi8vIGFzIGEgbGlzdCBvZiB4IGNvb3JkaW5hdGVzIGFuZCBhIHNlY29uZCBsaXN0IG9mIHkgY29vcmRpbmF0ZXMuXHJcbi8vIFRlc3RzIGFnYWluc3QgY2xpY2tlZCBjb29yZGluYXRlcyB0byBkZXRlcm1pbmUgd2hldGhlciB0aGVcclxuLy8gY2xpY2sgd2FzIHdpdGhpbiB0aGUgcG9seWdvbiBmb3JtZWQgYnkgc2FpZCB2ZXJ0aWNlcy5cclxuZnVuY3Rpb24gcG9seWdvbl9jbGlja190ZXN0KCBudmVydCwgdmVydHgsIHZlcnR5LCB0ZXN0eCwgdGVzdHkgKSB7XHJcbiAgICBsZXQgaSwgaiwgYyA9IGZhbHNlO1xyXG4gICAgZm9yKCBpID0gMCwgaiA9IG52ZXJ0LTE7IGkgPCBudmVydDsgaiA9IGkrKyApIHtcclxuICAgICAgICBpZiggKCAoIHZlcnR5W2ldID4gdGVzdHkgKSAhPSAoIHZlcnR5W2pdID4gdGVzdHkgKSApICYmXHJcbiAgICAgICAgICAgICggdGVzdHggPCAoIHZlcnR4W2pdIC0gdmVydHhbaV0gKSAqICggdGVzdHkgLSB2ZXJ0eVtpXSApIC8gKCB2ZXJ0eVtqXSAtIHZlcnR5W2ldICkgKyB2ZXJ0eFtpXSApICkge1xyXG4gICAgICAgICAgICAgICAgYyA9ICFjO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDbGlja0Nvb3JkcyhlKSB7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIGNvbnN0IGNsaWNrX3ggPSBlLm9mZnNldFg7XHJcbiAgY29uc3QgY2xpY2tfeSA9IGUub2Zmc2V0WTtcclxuICBkZXRlcm1pbmVDbGljayhjbGlja194LCBjbGlja195KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VG91Y2hDb29yZHMoZSkge1xyXG4gIGUucHJldmVudERlZmF1bHQoKTtcclxuICBjb25zdCBjbGlja194ID0gZS50b3VjaGVzWzBdLmNsaWVudFggLSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcclxuICBjb25zdCBjbGlja195ID0gZS50b3VjaGVzWzBdLmNsaWVudFkgLSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xyXG4gIGRldGVybWluZUNsaWNrKGNsaWNrX3gsIGNsaWNrX3kpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHNlbmRBY3Rpb24pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xpY2tMaXN0ZW5lcigpIHtcclxuICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZ2V0Q2xpY2tDb29yZHMpO1xyXG4gIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZ2V0VG91Y2hDb29yZHMpO1xyXG4gIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKX0pO1xyXG59XHJcblxyXG4vKiBNT1ZFTUVOVCAqL1xyXG5mdW5jdGlvbiBzZW5kQWN0aW9uKGUpIHtcclxuICBpZiAoIVtcclxuICAgIDMyLCAzNywgMzgsIDM5LCA0MCwgNjUsIDY4LCA2OSwgODMsIDg3XHJcbiAgXS5pbmNsdWRlcyhlLmtleUNvZGUpKSByZXR1cm47XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICBpZiAoZS5rZXlDb2RlID09IDMyKSB7IC8vIFNwYWNlYmFyXHJcbiAgICBjb25zb2xlLmxvZyhcIkV2ZW50dWFsbHkgd2Ugd2lsbCBpbXBsZW1lbnQgdGhlIHNwYWNlYmFyIGZvciBpbnRlcmFjdGluZ1wiXHJcbiAgICAgICsgXCIgd2l0aCBpdGVtcyBiZWxvdyB5b3VyIGNoYXJhY3Rlci5cIik7XHJcbiAgfVxyXG5cclxuICBlbHNlIGlmIChlLmtleUNvZGUgPT0gNjkpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiRXZlbnR1YWxseSB3ZSB3aWxsIGltcGxlbWVudCB0aGUgJ2UnIGtleSBmb3IgaW50ZXJhY3RpbmdcIlxyXG4gICAgICArIFwiIHdpdGggbmVhcmJ5IG5wY3MgYW5kIG9iamVjdHMsIGlmIHlvdXIgcGxheWVyIGlzIGZhY2luZyB0aGVtIVwiKTtcclxuICB9XHJcblxyXG4gIHNvY2tldC5lbWl0KCdqc29uJywgSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgJ3VzZXInOiB1c2VyLFxyXG4gICAgJ2FjdGlvbic6IGUua2V5Q29kZSxcclxuICB9KSlcclxufVxyXG5cclxuZnVuY3Rpb24gZG9Nb3ZlKG1vdmVtZW50KSB7XHJcbiAgY3ggPSBtb3ZlbWVudFsnY3gnXTtcclxuICBjeSA9IG1vdmVtZW50WydjeSddO1xyXG4gIGRpciA9IG1vdmVtZW50WydkaXJlY3Rpb24nXTtcclxufVxyXG5cclxubGV0IGxhc3Q7XHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgZnVuY3Rpb24gbWFpbiggdGltZXN0YW1wICkge1xyXG4gICAgaWYgKCFsYXN0KSB7XHJcbiAgICAgIGxhc3QgPSB0aW1lc3RhbXBcclxuICAgICAgZHJhdygpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGlmICh0aW1lc3RhbXAgLSBsYXN0ID4gMTAwKSB7XHJcbiAgICAgICAgZHJhdygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIG1haW4gKTtcclxuICB9XHJcblxyXG4gIHNvY2tldC5vbignY29ubmVjdCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXV0aGVudGljYXRpb25cIik7XHJcbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBzb2NrZXQuZW1pdCgnYXV0aGVudGljYXRpb24nLCBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgJ3VzZXJuYW1lJzogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZXJuYW1lJykudmFsdWVcclxuICAgICAgfSkpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIHNvY2tldC5vbignYXV0aGVudGljYXRlZCcsIGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgY29uc3QgbXNnID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtZXNzYWdlXCIpO1xyXG4gICAgaWYgKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICBtc2cuaW5uZXJIVE1MID0gXCJBdXRoZW50aWNhdGVkIHN1Y2Nlc3NmdWxseSFcIjtcclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICBtc2cuaW5uZXJIVE1MID0gXCJMb2FkaW5nIGRhdGEuLi5cIjtcclxuICAgICAgICBsb2FkTWFwKDApO1xyXG4gICAgICB9LCAxMDAwKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBtc2cuaW5uZXJIVE1MID0gXCJBdXRoZW50aWNhdGlvbiBmYWlsZWQuIFBsZWFzZSB0cnkgYWdhaW4uXCI7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGFzeW5jIGZ1bmN0aW9uIGxvYWRNYXAoYXR0ZW1wdHMpIHtcclxuICAgIGNvbnN0IGxvYWRlZCA9IGF3YWl0IGNoZWNrRGF0YUFjcXVpcmVkKCk7XHJcbiAgICBjb25zdCBtc2cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1lc3NhZ2VcIik7XHJcbiAgICBpZiAobG9hZGVkKSB7XHJcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhdXRoJykuY2xhc3NOYW1lID0gXCJoaWRlXCI7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWFpbicpLmNsYXNzTmFtZSA9IFwic2hvd1wiO1xyXG4gICAgICAgIG1zZy5pbm5lckhUTUwgPSBcIldlbGNvbWUgdG8gdGhlIHdvcmxkLlwiO1xyXG4gICAgICAgIG1haW4oKTsgLy8gU3RhcnQgdGhlIGN5Y2xlXHJcbiAgICAgICAgbGlzdGVuZXIoKTsgLy8gQmVnaW4gbW92ZW1lbnQgbGlzdGVuZXJzXHJcbiAgICAgICAgY2xpY2tMaXN0ZW5lcigpO1xyXG4gICAgICB9LCAxMDAwKTtcclxuICAgIH1cclxuICAgIGF0dGVtcHRzKys7XHJcbiAgICBpZiAoYXR0ZW1wdHMgPCAxMDApIHtcclxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICBsb2FkTWFwKGF0dGVtcHRzKTtcclxuICAgICAgfSwgMTAwKTtcclxuICAgIH1cclxuXHJcbiAgICBtc2cuaW5uZXJIVE1MID0gXCJGYWlsZWQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgc2VydmVyLlwiO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2hlY2tEYXRhQWNxdWlyZWQoKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgY29uc3QgZ290X3VzZXIgPSB1c2VyICE9IFwiXCI7XHJcbiAgICAgIGNvbnN0IGdvdF9tYXAgPSBtYXAgIT09IHVuZGVmaW5lZCB8fCBtYXAubGVuZ3RoID4gMDtcclxuICAgICAgaWYgKGdvdF91c2VyICYmIGdvdF9tYXApIHJldHVybiByZXNvbHZlKHRydWUpO1xyXG4gICAgICByZXR1cm4gcmVzb2x2ZShmYWxzZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIFJlY2lldmVzIGFuZCBwb3B1bGF0ZXMgaW5pdGlhbCBkYXRhLlxyXG4gIHNvY2tldC5vbignaW5pdF9kYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgdXNlciA9IGRhdGFbMF07XHJcbiAgICBjeCA9IGRhdGFbMV1bMF07XHJcbiAgICBjeSA9IGRhdGFbMV1bMV07XHJcbiAgICBkaXIgPSBkYXRhWzFdWzJdO1xyXG4gICAgbWFwICA9IGRhdGFbMl1bJ21hcCddO1xyXG4gICAgdGlsZV9idWZmZXIgPSBkYXRhWzNdWzBdO1xyXG4gICAgaWYgKGNhbnZhcy53aWR0aCA8IDQ1MCkge1xyXG4gICAgICBzeCA9IDQ7XHJcbiAgICAgIHN5ID0gNDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBzeCA9IGRhdGFbM11bMV07XHJcbiAgICAgIHN5ID0gZGF0YVszXVsyXTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgc29ja2V0Lm9uKCd0aWxlcycsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB0aWxlcyA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIFJlY2lldmVzIGFuZCBwb3B1bGF0ZXMgbWFwIGRhdGEuXHJcbiAgc29ja2V0Lm9uKCdtYXBfZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICB9KTtcclxuXHJcbiAgLy8gTW92ZXMgdGhlIGxvY2FsIHBsYXllclxyXG4gIHNvY2tldC5vbignbW92ZW1lbnRfc2VsZicsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgIGlmICh1c2VyID09IGRhdGFbJ3VzZXJuYW1lJ10pXHJcbiAgICAgIGRvTW92ZShkYXRhKTtcclxuICB9KTtcclxuXHJcbiAgLy8gVXBkYXRlcyBhbGwgcGxheWVyc1xyXG4gIHNvY2tldC5vbigndXBkYXRlX2FsbCcsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICBhbGxfdXNlcnMgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gIH0pO1xyXG5cclxuICBzb2NrZXQub24oJ2ZhaWx1cmUnLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgY29uc29sZS5sb2coJ1Vuc3luY2hyb25pemVkLicpO1xyXG4gIH0pO1xyXG59KSgpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")}]);