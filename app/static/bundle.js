!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var c=F[U]={i:U,l:!1,exports:{}};return Q[U].call(c.exports,c,c.exports,B),c.l=!0,c.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var c in Q)B.d(U,c,function(F){return Q[F]}.bind(null,c));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./js/player.js\n// player.js\n// Contains details and some logic\n// surrounding the local player.\nlet player_username = ""; // character start (0,0)\n\nlet cx = 0;\nlet cy = 0;\nlet dir = 0;\nlet current_map = [];\nlet current_map_name = "";\nlet player_shirt = 0;\nlet player_hair = 0;\n// CONCATENATED MODULE: ./js/map.js\n// map.js\n// Handles map manipulation logic.\n\n\nlet border_size = 0; // How many tiles from edge to player\n\nlet tile_buffer = 0; // Tile Buffer: How large tiles are\n\nfunction getTile(x_, y_) {\n  let click_x = Math.floor(x_ / 30);\n  let click_y = Math.floor(y_ / 30);\n  let tile_x = -1;\n  let tile_y = -1;\n\n  if (border_size > click_y) {\n    tile_y = cy - (border_size - click_y);\n  } else {\n    tile_y = cy + (click_y - border_size);\n  }\n\n  if (border_size > click_x) {\n    tile_x = cx - (border_size - click_x);\n  } else {\n    tile_x = cx + (click_x - border_size);\n  }\n\n  return current_map[tile_y][tile_x];\n} // Check if the tile at (x_, y_) has an object.\n\nfunction containsObject(x_, y_) {\n  if (Array.isArray(current_map[y_][x_])) {\n    if (entities[current_map[y_][x_][1]].type == "object") {\n      return true;\n    }\n  }\n\n  return false;\n}\n// CONCATENATED MODULE: ./js/settings.js\n// settings.js\n\n\n\nlet settings = {\n  player_names: true,\n  coordinates: false\n};\nfunction handleClick(click_x, click_y, canvas_width, canvas_height) {\n  const quarter_width = canvas_width / 4 - 20; // Show player names\n\n  if (polygon_click_test(4, [quarter_width, quarter_width * 3, quarter_width * 3, quarter_width], // x values\n  [50, 50, 72, 72],\n  /* y values */\n  click_x, click_y)) {\n    settings.player_names = !settings.player_names;\n    sendSettings();\n    return true;\n  } // Show current coordinates\n  else if (polygon_click_test(4, [quarter_width, quarter_width * 3, quarter_width * 3, quarter_width], // x values\n    [73, 73, 95, 95],\n    /* y values */\n    click_x, click_y)) {\n      settings.coordinates = !settings.coordinates;\n      sendSettings();\n      return true;\n    }\n\n  return false;\n}\n\nfunction sendSettings() {\n  socket.emit(\'settings\', JSON.stringify({\n    \'username\': player_username,\n    \'settings\': settings\n  }));\n}\n// CONCATENATED MODULE: ./js/input.js\n// input.js\n// Handles user input.\n\n\n\n\n\nlet last_click_x = -1;\nlet last_click_y = -1;\n\nfunction sendAction(e) {\n  if (![32, 37, 38, 39, 40, 65, 68, 69, 83, 87].includes(e.keyCode)) return;\n  e.preventDefault();\n\n  if (e.keyCode == 32) {\n    // Spacebar\n    console.log("Eventually we will implement the spacebar for interacting" + " with items below your character.");\n  }\n\n  socket.emit(\'json\', JSON.stringify({\n    \'username\': player_username,\n    \'action\': e.keyCode\n  }));\n}\n\nfunction determineLeftClick(click_x, click_y) {\n  let canvas_width = draw_canvas.width - 60;\n  let canvas_height = draw_canvas.height - 20;\n  const mid_width = Math.floor(canvas_width / 2);\n  const mid_height = Math.floor(canvas_height / 2);\n  const mid_offset = Math.floor(tile_buffer / 2);\n  const mid_low = mid_width - mid_offset;\n  const mid_high = mid_width + mid_offset;\n  resetExamine(); // We divide this into "paged" checking\n  // Return if we find a matching click, to avoid multiple\n  // executions.\n  // Settings scope\n\n  if (overlay == OVERLAYS.Settings) {\n    // Check if a setting is clicked. If so, send data to server.\n    if (handleClick(click_x, click_y, canvas_width, canvas_height)) {\n      return;\n    }\n  } // Inventory scope\n  else if (overlay == OVERLAYS.Inventory) {} // Check for inventory interaction here.\n    // Map scope\n    else if (overlay == OVERLAYS.None) {\n        if (clickUnderTile(click_x, click_y, mid_low, mid_high)) {\n          return;\n        }\n\n        if (clickAdjacentTile(click_x, click_y, mid_low, mid_high)) {\n          return;\n        }\n\n        if (clickFarTile(click_x, click_y, canvas_width, canvas_height, mid_width, mid_height)) {\n          return;\n        }\n      } // General scope\n\n\n  if (checkMenuIconClicked(click_x, click_y, canvas_width)) {\n    return;\n  }\n}\n\nfunction checkMenuIconClicked(click_x, click_y, canvas_width) {\n  // Click on settings menu icon\n  if (polygon_click_test(4, [canvas_width, canvas.width, canvas.width, canvas_width], // x values\n  [0, 0, 60, 60],\n  /* y values */\n  click_x, click_y)) {\n    overlay = overlay != OVERLAYS.Settings ? OVERLAYS.Settings : OVERLAYS.None;\n  } // Click help icon\n  else if (polygon_click_test(4, [canvas_width, canvas.width, canvas.width, canvas_width], // x values\n    [60, 60, 120, 120],\n    /* y values */\n    click_x, click_y)) {\n      overlay = overlay != OVERLAYS.Help ? OVERLAYS.Help : OVERLAYS.None;\n    } // Click inventory icon\n    else if (polygon_click_test(4, [canvas_width, canvas.width, canvas.width, canvas_width], // x values\n      [60, 60, 120, 120],\n      /* y values */\n      click_x, click_y)) {\n        overlay = overlay != OVERLAYS.Inventory ? OVERLAYS.Inventory : OVERLAYS.None;\n      }\n}\n\nfunction clickUnderTile(click_x, click_y, mid_low, mid_high) {\n  // Click on middle square (where player is standing)\n  if (polygon_click_test(4, [mid_low, mid_high, mid_high, mid_low], // x values\n  [mid_low, mid_low, mid_high, mid_high], // y values\n  click_x, click_y)) {\n    sendAction({\n      \'keyCode\': 32,\n      \'preventDefault\': function preventDefault() {}\n    }); // Spacebar\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction clickAdjacentTile(click_x, click_y, mid_low, mid_high) {\n  // Click on square directly above player location.\n  if (polygon_click_test(4, [mid_low, mid_high, mid_high, mid_low], // x values\n  [mid_low - tile_buffer, mid_low - tile_buffer, mid_low, mid_low], // y values\n  click_x, click_y)) {\n    if (dir == 1 && containsObject(cx, cy - 1)) {\n      sendAction({\n        \'keyCode\': 69,\n        \'preventDefault\': function preventDefault() {}\n      }); // E\n    } else {\n      sendAction({\n        \'keyCode\': 38,\n        \'preventDefault\': function preventDefault() {}\n      }); // Up\n    }\n\n    return true;\n  } // Click on square one below player location.\n  else if (polygon_click_test(4, [mid_low, mid_low, mid_high, mid_high], // x values\n    [mid_high, mid_high + tile_buffer, mid_high + tile_buffer, mid_high], // y values\n    click_x, click_y)) {\n      if (dir == 0 && containsObject(cx, cy + 1)) {\n        sendAction({\n          \'keyCode\': 69,\n          \'preventDefault\': function preventDefault() {}\n        }); // E\n      } else {\n        sendAction({\n          \'keyCode\': 40,\n          \'preventDefault\': function preventDefault() {}\n        }); // Up\n      }\n\n      return true;\n    } // Click on square directly left player location.\n    else if (polygon_click_test(4, [mid_low - tile_buffer, mid_low, mid_low, mid_low - tile_buffer], // x values\n      [mid_low, mid_low, mid_high, mid_high], // y values\n      click_x, click_y)) {\n        if (dir == 3 && containsObject(cx - 1, cy)) {\n          sendAction({\n            \'keyCode\': 69,\n            \'preventDefault\': function preventDefault() {}\n          }); // E\n        } else {\n          sendAction({\n            \'keyCode\': 37,\n            \'preventDefault\': function preventDefault() {}\n          }); // Up\n        }\n\n        return true;\n      } // Click on square directly right player location.\n      else if (polygon_click_test(4, [mid_high, mid_high + tile_buffer, mid_high + tile_buffer, mid_high], // x values\n        [mid_low, mid_low, mid_high, mid_high], // y values\n        click_x, click_y)) {\n          if (dir == 2 && containsObject(cx + 1, cy)) {\n            sendAction({\n              \'keyCode\': 69,\n              \'preventDefault\': function preventDefault() {}\n            }); // E\n          } else {\n            sendAction({\n              \'keyCode\': 39,\n              \'preventDefault\': function preventDefault() {}\n            }); // Up\n          }\n\n          return true;\n        }\n\n  return false;\n}\n\nfunction clickFarTile(click_x, click_y, canvas_width, canvas_height, mid_width, mid_height) {\n  /* Movement */\n  if (polygon_click_test(3, [0, mid_width, canvas_width], [0, mid_height, 0], click_x, click_y)) {\n    // Up\n    sendAction({\n      \'keyCode\': 38,\n      \'preventDefault\': function preventDefault() {}\n    });\n    return true;\n  } else if (polygon_click_test(3, [0, mid_width, canvas_width], [canvas_height, mid_height, canvas_height], click_x, click_y)) {\n    // Down\n    sendAction({\n      \'keyCode\': 40,\n      \'preventDefault\': function preventDefault() {}\n    });\n    return true;\n  } else if (polygon_click_test(3, [0, mid_width, 0], [0, mid_height, canvas_height], click_x, click_y)) {\n    // Left\n    sendAction({\n      \'keyCode\': 37,\n      \'preventDefault\': function preventDefault() {}\n    });\n    return true;\n  } else if (polygon_click_test(3, [canvas_width, mid_width, canvas_width], [0, mid_height, canvas_height], click_x, click_y)) {\n    // Right\n    sendAction({\n      \'keyCode\': 39,\n      \'preventDefault\': function preventDefault() {}\n    });\n    return true;\n  }\n\n  return false;\n} // polygon_click_test by Wm. Randolph Franklin\n// int list(int) list(int) int int -> bool\n// Consumes the number of vertices, along with each vertex coordinate,\n// as a list of x coordinates and a second list of y coordinates.\n// Tests against clicked coordinates to determine whether the\n// click was within the polygon formed by said vertices.\n\n\nfunction polygon_click_test(nvert, vertx, verty, testx, testy) {\n  let i,\n      j,\n      c = false;\n\n  for (i = 0, j = nvert - 1; i < nvert; j = i++) {\n    if (verty[i] > testy != verty[j] > testy && testx < (vertx[j] - vertx[i]) * (testy - verty[i]) / (verty[j] - verty[i]) + vertx[i]) {\n      c = !c;\n    }\n  }\n\n  return c;\n}\n\nfunction setTouchCoords(e) {\n  e.preventDefault();\n  last_click_x = e.touches[0].clientX - draw_canvas.getBoundingClientRect().left;\n  last_click_y = e.touches[0].clientY - draw_canvas.getBoundingClientRect().top;\n}\n\nfunction getClickCoords(e) {\n  e.preventDefault();\n  const click_x = e.offsetX;\n  const click_y = e.offsetY;\n\n  if (e.button == 2) {\n    last_click_x = click_x;\n    last_click_y = click_y;\n    return;\n  }\n\n  determineLeftClick(click_x, click_y);\n}\n\nfunction getTouchCoords(e) {\n  e.preventDefault();\n\n  if (last_click_x > -1 || last_click_y > -1) {\n    return;\n  }\n\n  const click_x = e.touches[0].clientX - draw_canvas.getBoundingClientRect().left;\n  const click_y = e.touches[0].clientY - draw_canvas.getBoundingClientRect().top;\n  determineLeftClick(click_x, click_y);\n}\n\nfunction setContextMenu(e) {\n  e.preventDefault();\n  let tile = getTile(last_click_x, last_click_y);\n\n  if (Array.isArray(tile)) {\n    let object = entities[tile[1]];\n\n    if (object.type == "object") {\n      examine = object.examine;\n    }\n  }\n}\n\nfunction handleMouseMovement(e) {\n  e.preventDefault();\n  let mouse_x = e.offsetX;\n  let mouse_y = e.offsetY; // Mouse off right-click menu closes it (+- 5px)\n\n  if (!polygon_click_test(4, [examine_menu_vertices[0][0], examine_menu_vertices[1][0], examine_menu_vertices[2][0], examine_menu_vertices[3][0]], [examine_menu_vertices[0][1], examine_menu_vertices[1][1], examine_menu_vertices[2][1], examine_menu_vertices[3][1]], mouse_x, mouse_y)) {\n    resetExamine();\n  } // Mouse over object shows text in corner\n\n\n  let tile = getTile(mouse_x, mouse_y);\n\n  if (Array.isArray(tile)) {\n    let object = entities[tile[1]];\n\n    if (object.type == "object" || object.type == "item") {\n      object_name = object.name;\n    }\n  } else {\n    object_name = "";\n  }\n}\n\nfunction listener() {\n  document.addEventListener(\'keydown\', sendAction);\n}\nfunction clickListener() {\n  draw_canvas.addEventListener(\'mousedown\', getClickCoords);\n  draw_canvas.addEventListener(\'touchstart\', setTouchCoords, {\n    passive: false\n  });\n  draw_canvas.addEventListener(\'touchend\', getTouchCoords, {\n    passive: false\n  });\n  draw_canvas.addEventListener(\'contextmenu\', setContextMenu);\n  draw_canvas.addEventListener(\'mousemove\', handleMouseMovement);\n}\n// CONCATENATED MODULE: ./js/draw.js\n// draw.js\n\n\n\n\n\nconst draw_canvas = document.getElementById(\'canvas\');\nconst ctx = draw_canvas.getContext(\'2d\'); // Rows of 10 30x30 tiles.\n\nconst tilesheet = new Image();\ntilesheet.src = "static/tilesheet.png";\nconst charsheet = new Image();\ncharsheet.src = "static/charsheet.png";\nconst optionsheet = new Image();\noptionsheet.src = "static/optionsheet.png";\nlet examine_menu_vertices = [[0, 0], [0, 0], [0, 0], [0, 0]];\nconst OVERLAYS = {\n  None: 0,\n  Settings: 1,\n  Help: 2,\n  Inventory: 7\n};\nlet overlay = OVERLAYS.None; // Small windows means smaller canvas.\n\nif (window.innerWidth < 600 || window.innerHeight < 600) {\n  draw_canvas.width = 330;\n  draw_canvas.height = 290;\n}\n/* DRAWING */\n\n\nfunction draw() {\n  const canvas_width = draw_canvas.width - 60;\n  const canvas_height = draw_canvas.height - 20;\n  ctx.clearRect(0, 0, draw_canvas.width, draw_canvas.height);\n\n  if (overlay == OVERLAYS.Settings) {\n    drawSettings(canvas_width, canvas_height);\n  } else if (overlay == OVERLAYS.Help) {\n    drawHelp(canvas_width, canvas_height);\n  } else {\n    drawTiles(canvas_width, canvas_height);\n    drawOthers(); // Fill the local character tile\n\n    if (charsheet.complete) {\n      drawPlayer(border_size, border_size, dir, player_username, player_shirt, player_hair);\n    } else {\n      charsheet.addEventListener(\'load\', drawPlayer);\n    }\n\n    if (object_name.length > 0) {\n      drawObjectName();\n    }\n\n    if (examine.length > 0) {\n      drawRightClickExamine();\n    }\n  }\n\n  if (settings.coordinates) {\n    drawCoordinates(canvas_width, canvas_height);\n  }\n\n  drawMapName(canvas_height);\n  drawSidePanel();\n}\n\nfunction drawTiles(canvas_width, canvas_height) {\n  for (let x = 0; x < canvas_width; x += tile_buffer) {\n    const curr_x = x / tile_buffer + (cx - border_size);\n\n    for (let y = 0; y < canvas_height; y += tile_buffer) {\n      const tile = current_map[y / tile_buffer + (cy - border_size)][curr_x];\n\n      if (Array.isArray(tile)) {\n        for (const def in tile) {\n          drawTile(tile[def], x, y);\n        }\n      } else {\n        drawTile(tile, x, y);\n      }\n    }\n  }\n}\n\nfunction drawTile(tile, x, y) {\n  ctx.beginPath();\n\n  if (tilesheet.complete) {\n    drawImage(tile, x, y);\n  } else {\n    tilesheet.load = drawImage.bind(tile, x, y);\n  }\n\n  ctx.moveTo(x, y);\n  ctx.lineTo(x + tile_buffer, y);\n  ctx.moveTo(x, y);\n  ctx.lineTo(x, y + tile_buffer);\n  ctx.stroke();\n  ctx.closePath();\n}\n\nfunction drawPlayer(x_, y_, direction, username, shirt, hair) {\n  ctx.strokeStyle = "transparent";\n  ctx.drawImage(charsheet, (direction + hair) * tile_buffer, shirt * tile_buffer, tile_buffer, tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n\n  if (settings.player_names) {\n    ctx.fillStyle = "black";\n    ctx.font = "10pt Arial";\n    ctx.textBaseline = "middle";\n    ctx.textAlign = "center";\n    ctx.shadowOffsetX = 1;\n    ctx.shadowOffsetY = 1;\n    ctx.shadowColor = "rgba(0, 0, 0, 0.3)";\n    ctx.fillText(username, x_ * tile_buffer + tile_buffer / 2, y_ * tile_buffer - 5);\n    ctx.shadowOffsetX = 0;\n    ctx.shadowOffsetY = 0;\n    ctx.shadowBlur = 0;\n  }\n}\n\nfunction drawImage(tile, x, y) {\n  ctx.strokeStyle = "transparent";\n  ctx.drawImage(tilesheet, tile % 10 * tile_buffer, Math.floor(tile / 10) * tile_buffer, tile_buffer, tile_buffer, x, y, tile_buffer, tile_buffer);\n}\n\nfunction drawOthers() {\n  for (const u in all_users) {\n    if (u != player_username) {\n      const ucx = all_users[u].cx;\n      const ucy = all_users[u].cy;\n      const x = ucx - cx;\n      const y = ucy - cy;\n\n      if (x >= -border_size && x <= border_size && y >= -border_size && y <= border_size) {\n        // Fill the character tile\n        drawPlayer(x + border_size, y + border_size, all_users[u].direction, all_users[u].username, all_users[u].shirt, all_users[u].hair);\n      }\n    }\n  }\n}\n\nfunction drawSidePanel() {\n  ctx.strokeStyle = "transparent";\n  ctx.drawImage(optionsheet, 0, 0, 60, 450, draw_canvas.width - 60, 0, 60, 450);\n}\n\nfunction drawRightClickExamine() {\n  let box_width = ctx.measureText(examine).width + 10;\n  let box_height = 22;\n  ctx.fillStyle = "black";\n  ctx.fillRect(last_click_x, last_click_y, box_width, box_height);\n  examine_menu_vertices = [[last_click_x - 5, last_click_y - 5], [last_click_x + box_width + 5, last_click_y - 5], [last_click_x + box_width + 5, last_click_y + box_height + 5], [last_click_x - 5, last_click_y + box_height + 5]];\n  ctx.fillStyle = "white";\n  ctx.textAlign = "center";\n  ctx.fillText(examine, last_click_x + Math.floor(box_width / 2), last_click_y + Math.floor(box_height / 2));\n}\n\nfunction drawObjectName() {\n  ctx.fillStyle = "white";\n  ctx.textAlign = "end";\n  ctx.fillText(object_name, draw_canvas.width - 65, 10);\n}\n\nfunction drawCoordinates(canvas_width, canvas_height) {\n  // Fill the position\n  ctx.fillStyle = "white";\n  ctx.textAlign = "end";\n  ctx.fillRect(0, canvas_height, canvas_width, 20);\n  ctx.font = "12pt Arial";\n  ctx.fillStyle = "black";\n  ctx.fillText("(" + cx + ", " + cy + ")", canvas_width - 5, canvas_height + 10);\n}\n\nfunction drawOverlay(canvas_width, canvas_height) {\n  ctx.fillStyle = "white";\n  ctx.fillRect(0, 0, canvas_width, canvas_height);\n}\n\nfunction drawSettings(canvas_width, canvas_height) {\n  drawOverlay(canvas_width, canvas_height);\n  ctx.fillStyle = "black";\n  ctx.textAlign = "start";\n  ctx.font = "bold 24pt Arial";\n  ctx.fillText("Settings", canvas_width / 4 - 25, 40);\n  ctx.font = "12pt Arial"; // Show player names\n\n  ctx.fillText("Show Player Names: " + (settings.player_names ? "On" : "Off"), canvas_width / 4 - 24, 70); // Show current coordinates\n\n  ctx.fillText("Show Coordinates: " + (settings.coordinates ? "On" : "Off"), canvas_width / 4 - 24, 95);\n}\n\nfunction drawHelp(canvas_width, canvas_height) {\n  drawOverlay(canvas_width, canvas_height);\n  ctx.fillStyle = "black";\n  ctx.textAlign = "start";\n  ctx.font = "bold 24pt Arial";\n  ctx.fillText("Helpful Hints", canvas_width / 4 - 25, 40);\n  ctx.font = "12pt Arial";\n  ctx.fillText("Movement: WASD, Arrows, or click", canvas_width / 4 - 24, 70);\n  ctx.fillText("Examine: Q or Right-click", canvas_width / 4 - 24, 95);\n  ctx.fillText("Use Object: E or Left-click", canvas_width / 4 - 24, 120);\n}\n\nfunction drawMapName(canvas_height) {\n  ctx.fillStyle = "black";\n  ctx.textAlign = "start";\n  ctx.font = "bold 12pt Arial";\n  ctx.fillText(current_map_name, 5, canvas_height + 11);\n}\n// CONCATENATED MODULE: ./js/game.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "socket", function() { return socket; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "all_users", function() { return all_users; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "entities", function() { return entities; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "action_data", function() { return action_data; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "examine", function() { return examine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resetExamine", function() { return resetExamine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "object_name", function() { return object_name; });\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n// game.js\n// import \'@babel/polyfill\';\n\n\n\n\n\n/* Initializing */\n\nconst socket = io.connect(\'//\' + document.domain + \':\' + location.port);\nlet all_users = {};\nlet entities = [];\nlet action_data = {};\nlet examine = "";\nfunction resetExamine() {\n  examine = "";\n  examine_menu_vertices = [[0, 0], [0, 0], [0, 0], [0, 0]];\n}\nlet object_name = "";\n/* Movement */\n\nfunction doMove(movement) {\n  cx = movement.cx;\n  cy = movement.cy;\n  dir = movement.direction;\n}\n/* Main game loop and socket listeners */\n\n\nlet last;\n\n(function () {\n  function main(timestamp) {\n    if (!last) {\n      last = timestamp;\n      draw();\n    } else {\n      if (timestamp - last > 100) {\n        draw();\n      }\n    }\n\n    requestAnimationFrame(main);\n  }\n\n  socket.on(\'connect\', function () {\n    const form = document.getElementById("authentication");\n    form.addEventListener(\'submit\', function (e) {\n      e.preventDefault();\n      socket.emit(\'authentication\', JSON.stringify({\n        \'username\': document.getElementById(\'username\').value\n      }));\n    });\n  });\n  socket.on(\'authenticated\', function (data) {\n    data = JSON.parse(data);\n    const msg = document.getElementById("message");\n\n    if (data.success) {\n      msg.innerHTML = "Authenticated successfully!";\n      setTimeout(function () {\n        msg.innerHTML = "Loading data...";\n        socket.emit(\'retrieve_init_data\', JSON.stringify({\n          \'username\': data.username\n        }));\n      }, 600);\n    } else {\n      msg.innerHTML = "Authentication failed. Please try again.";\n    }\n  });\n\n  function loadMap(attempts) {\n    const loaded = checkDataAcquired();\n\n    if (loaded) {\n      setTimeout(function () {\n        document.getElementById(\'message\').className = "hide";\n        document.getElementById(\'auth\').className = "hide";\n        document.getElementById(\'canvas\').className = "show centered";\n        main(); // Start the cycle\n\n        listener(); // Begin movement listeners\n\n        clickListener();\n      }, 1000);\n      return; // Do not execute the rest of the function.\n    }\n\n    attempts++;\n\n    if (attempts < 10) {\n      setTimeout(function () {\n        loadMap(attempts);\n      }, 100);\n      return; // Do not execute the rest of the function.\n    }\n\n    msg.innerHTML = "Failed to get data from the server.";\n  }\n\n  function checkDataAcquired() {\n    const got_user = player_username !== "";\n    const got_map = current_map !== undefined || current_map.length > 0;\n    return got_user && got_map;\n  } // Recieves and populates initial data.\n\n\n  socket.on(\'init_data\', function (data) {\n    data = JSON.parse(data);\n    var _data = data;\n\n    var _data2 = _slicedToArray(_data, 9);\n\n    player_username = _data2[0];\n\n    var _data2$ = _slicedToArray(_data2[1], 3);\n\n    cx = _data2$[0];\n    cy = _data2$[1];\n    dir = _data2$[2];\n\n    var _data2$2 = _slicedToArray(_data2[2], 2);\n\n    current_map = _data2$2[0];\n    current_map_name = _data2$2[1];\n    player_shirt = _data2[3];\n    player_hair = _data2[4];\n    entities = _data2[5];\n    settings = _data2[6];\n\n    var _data2$3 = _slicedToArray(_data2[7], 2);\n\n    tile_buffer = _data2$3[0];\n    border_size = _data2$3[1];\n    all_users = _data2[8];\n\n    if (draw_canvas.width < 450) {\n      border_size = 4;\n    }\n\n    loadMap(0);\n  });\n  socket.on(\'object_action\', function (data) {\n    action_data = JSON.parse(data);\n  }); // Recieves and populates map data.\n\n  socket.on(\'map_data\', function (data) {\n    var _JSON$parse = JSON.parse(data);\n\n    var _JSON$parse2 = _slicedToArray(_JSON$parse, 2);\n\n    current_map = _JSON$parse2[0];\n    current_map_name = _JSON$parse2[1];\n  });\n  socket.on(\'entity_data\', function (data) {\n    entities = JSON.parse(data);\n  }); // Moves the local player\n\n  socket.on(\'movement_self\', function (data) {\n    data = JSON.parse(data);\n    if (player_username == data.username) doMove(data);\n  }); // Updates specific player\'s data\n\n  socket.on(\'update_player\', function (data) {\n    data = JSON.parse(data);\n\n    if (data.username == player_username) {\n      player_shirt = data.shirt;\n      player_hair = data.hair;\n    } else {\n      all_users[data.username] = data;\n    }\n  }); // Remove player from users data\n\n  socket.on(\'remove_user\', function (data) {\n    data = JSON.parse(data);\n\n    if (data.username) {\n      delete all_users[data.username];\n    }\n  });\n  socket.on(\'failure\', function (data) {\n    console.log(\'Unsynchronized.\');\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9wbGF5ZXIuanM/N2UxYiIsIndlYnBhY2s6Ly8vLi9qcy9tYXAuanM/ZjdjNCIsIndlYnBhY2s6Ly8vLi9qcy9zZXR0aW5ncy5qcz9hNTMwIiwid2VicGFjazovLy8uL2pzL2lucHV0LmpzPzdhZWYiLCJ3ZWJwYWNrOi8vLy4vanMvZHJhdy5qcz9iMjNmIiwid2VicGFjazovLy8uL2pzL2dhbWUuanM/ZTY1NyJdLCJuYW1lcyI6WyJ1c2VybmFtZSIsImN4IiwiY3kiLCJkaXIiLCJjdXJyZW50X21hcCIsImN1cnJlbnRfbWFwX25hbWUiLCJzaGlydCIsImhhaXIiLCJib3JkZXJfc2l6ZSIsInRpbGVfYnVmZmVyIiwiZ2V0VGlsZSIsInhfIiwieV8iLCJjbGlja194IiwiTWF0aCIsImZsb29yIiwiY2xpY2tfeSIsInRpbGVfeCIsInRpbGVfeSIsInBsYXllciIsImNvbnRhaW5zT2JqZWN0IiwiQXJyYXkiLCJpc0FycmF5IiwiZ2FtZSIsInR5cGUiLCJzZXR0aW5ncyIsInBsYXllcl9uYW1lcyIsImNvb3JkaW5hdGVzIiwiaGFuZGxlQ2xpY2siLCJjYW52YXNfd2lkdGgiLCJjYW52YXNfaGVpZ2h0IiwicXVhcnRlcl93aWR0aCIsInBvbHlnb25fY2xpY2tfdGVzdCIsInNlbmRTZXR0aW5ncyIsInNvY2tldCIsImVtaXQiLCJKU09OIiwic3RyaW5naWZ5IiwibGFzdF9jbGlja194IiwibGFzdF9jbGlja195Iiwic2VuZEFjdGlvbiIsImUiLCJpbmNsdWRlcyIsImtleUNvZGUiLCJwcmV2ZW50RGVmYXVsdCIsImNvbnNvbGUiLCJsb2ciLCJkZXRlcm1pbmVMZWZ0Q2xpY2siLCJkcmF3Iiwid2lkdGgiLCJoZWlnaHQiLCJtaWRfd2lkdGgiLCJtaWRfaGVpZ2h0IiwibWlkX29mZnNldCIsIm1hcCIsIm1pZF9sb3ciLCJtaWRfaGlnaCIsIlNldHRpbmdzIiwiSW52ZW50b3J5IiwiTm9uZSIsImNsaWNrVW5kZXJUaWxlIiwiY2xpY2tBZGphY2VudFRpbGUiLCJjbGlja0ZhclRpbGUiLCJjaGVja01lbnVJY29uQ2xpY2tlZCIsImNhbnZhcyIsIkhlbHAiLCJudmVydCIsInZlcnR4IiwidmVydHkiLCJ0ZXN0eCIsInRlc3R5IiwiaSIsImoiLCJjIiwic2V0VG91Y2hDb29yZHMiLCJ0b3VjaGVzIiwiY2xpZW50WCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJjbGllbnRZIiwidG9wIiwiZ2V0Q2xpY2tDb29yZHMiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImJ1dHRvbiIsImdldFRvdWNoQ29vcmRzIiwic2V0Q29udGV4dE1lbnUiLCJ0aWxlIiwib2JqZWN0IiwiZXhhbWluZSIsImhhbmRsZU1vdXNlTW92ZW1lbnQiLCJtb3VzZV94IiwibW91c2VfeSIsIm5hbWUiLCJsaXN0ZW5lciIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsaWNrTGlzdGVuZXIiLCJwYXNzaXZlIiwiZ2V0RWxlbWVudEJ5SWQiLCJjdHgiLCJnZXRDb250ZXh0IiwidGlsZXNoZWV0IiwiSW1hZ2UiLCJzcmMiLCJjaGFyc2hlZXQiLCJvcHRpb25zaGVldCIsImV4YW1pbmVfbWVudV92ZXJ0aWNlcyIsIk9WRVJMQVlTIiwib3ZlcmxheSIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImNsZWFyUmVjdCIsImRyYXdTZXR0aW5ncyIsImRyYXdIZWxwIiwiZHJhd1RpbGVzIiwiZHJhd090aGVycyIsImNvbXBsZXRlIiwiZHJhd1BsYXllciIsImxlbmd0aCIsImRyYXdPYmplY3ROYW1lIiwiZHJhd1JpZ2h0Q2xpY2tFeGFtaW5lIiwiZHJhd0Nvb3JkaW5hdGVzIiwiZHJhd01hcE5hbWUiLCJkcmF3U2lkZVBhbmVsIiwieCIsImN1cnJfeCIsInkiLCJkZWYiLCJkcmF3VGlsZSIsImJlZ2luUGF0aCIsImRyYXdJbWFnZSIsImxvYWQiLCJiaW5kIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiY2xvc2VQYXRoIiwiZGlyZWN0aW9uIiwic3Ryb2tlU3R5bGUiLCJmaWxsU3R5bGUiLCJmb250IiwidGV4dEJhc2VsaW5lIiwidGV4dEFsaWduIiwic2hhZG93T2Zmc2V0WCIsInNoYWRvd09mZnNldFkiLCJzaGFkb3dDb2xvciIsImZpbGxUZXh0Iiwic2hhZG93Qmx1ciIsInUiLCJ1Y3giLCJ1Y3kiLCJib3hfd2lkdGgiLCJtZWFzdXJlVGV4dCIsImJveF9oZWlnaHQiLCJmaWxsUmVjdCIsImlucHV0IiwiZHJhd092ZXJsYXkiLCJpbyIsImNvbm5lY3QiLCJkb21haW4iLCJsb2NhdGlvbiIsInBvcnQiLCJhbGxfdXNlcnMiLCJlbnRpdGllcyIsImFjdGlvbl9kYXRhIiwicmVzZXRFeGFtaW5lIiwib2JqZWN0X25hbWUiLCJkb01vdmUiLCJtb3ZlbWVudCIsImxhc3QiLCJtYWluIiwidGltZXN0YW1wIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib24iLCJmb3JtIiwidmFsdWUiLCJkYXRhIiwicGFyc2UiLCJtc2ciLCJzdWNjZXNzIiwiaW5uZXJIVE1MIiwic2V0VGltZW91dCIsImxvYWRNYXAiLCJhdHRlbXB0cyIsImxvYWRlZCIsImNoZWNrRGF0YUFjcXVpcmVkIiwiY2xhc3NOYW1lIiwiZ290X3VzZXIiLCJnb3RfbWFwIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFFTyxJQUFJQSxlQUFRLEdBQUcsRUFBZixDLENBRVA7O0FBQ08sSUFBSUMsRUFBRSxHQUFHLENBQVQ7QUFDQSxJQUFJQyxFQUFFLEdBQUcsQ0FBVDtBQUNBLElBQUlDLEdBQUcsR0FBRyxDQUFWO0FBRUEsSUFBSUMsV0FBVyxHQUFHLEVBQWxCO0FBQ0EsSUFBSUMsZ0JBQWdCLEdBQUcsRUFBdkI7QUFFQSxJQUFJQyxZQUFLLEdBQUcsQ0FBWjtBQUNBLElBQUlDLFdBQUksR0FBRyxDQUFYLEM7O0FDZlA7QUFDQTtBQUNBO0FBQ0E7QUFFTyxJQUFJQyxXQUFXLEdBQUcsQ0FBbEIsQyxDQUFxQjs7QUFDckIsSUFBSUMsV0FBVyxHQUFHLENB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R1csQ0EwR1g7O0FBQ0FoSixRQUFNLENBQUM2SSxFQUFQLENBQVUsZUFBVixFQUEyQixVQUFVRyxJQUFWLEVBQWdCO0FBQ3pDQSxRQUFJLEdBQUc5SSxJQUFJLENBQUMrSSxLQUFMLENBQVdELElBQVgsQ0FBUDs7QUFDQSxRQUFJQSxJQUFJLENBQUNsTCxRQUFMLElBQWlCbUIsZUFBckIsRUFBc0M7QUFDcENBLGtCQUFBLEdBQWUrSixJQUFJLENBQUM1SyxLQUFwQjtBQUNBYSxpQkFBQSxHQUFjK0osSUFBSSxDQUFDM0ssSUFBbkI7QUFDRCxLQUhELE1BSUs7QUFDSDZKLGVBQVMsQ0FBQ2MsSUFBSSxDQUFDbEwsUUFBTixDQUFULEdBQTJCa0wsSUFBM0I7QUFDRDtBQUNGLEdBVEQsRUEzR1csQ0FzSFg7O0FBQ0FoSixRQUFNLENBQUM2SSxFQUFQLENBQVUsYUFBVixFQUF5QixVQUFVRyxJQUFWLEVBQWdCO0FBQ3ZDQSxRQUFJLEdBQUc5SSxJQUFJLENBQUMrSSxLQUFMLENBQVdELElBQVgsQ0FBUDs7QUFDQSxRQUFJQSxJQUFJLENBQUNsTCxRQUFULEVBQW1CO0FBQ2pCLGFBQU9vSyxTQUFTLENBQUNjLElBQUksQ0FBQ2xMLFFBQU4sQ0FBaEI7QUFDRDtBQUNGLEdBTEQ7QUFPQWtDLFFBQU0sQ0FBQzZJLEVBQVAsQ0FBVSxTQUFWLEVBQXFCLFVBQVVHLElBQVYsRUFBZ0I7QUFDbkNySSxXQUFPLENBQUNDLEdBQVIsQ0FBWSxpQkFBWjtBQUNELEdBRkQ7QUFHRCxDQWpJRCIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcGxheWVyLmpzXHJcbi8vIENvbnRhaW5zIGRldGFpbHMgYW5kIHNvbWUgbG9naWNcclxuLy8gc3Vycm91bmRpbmcgdGhlIGxvY2FsIHBsYXllci5cclxuXHJcbmV4cG9ydCBsZXQgdXNlcm5hbWUgPSBcIlwiO1xyXG5cclxuLy8gY2hhcmFjdGVyIHN0YXJ0ICgwLDApXHJcbmV4cG9ydCBsZXQgY3ggPSAwO1xyXG5leHBvcnQgbGV0IGN5ID0gMDtcclxuZXhwb3J0IGxldCBkaXIgPSAwO1xyXG5cclxuZXhwb3J0IGxldCBjdXJyZW50X21hcCA9IFtdO1xyXG5leHBvcnQgbGV0IGN1cnJlbnRfbWFwX25hbWUgPSBcIlwiO1xyXG5cclxuZXhwb3J0IGxldCBzaGlydCA9IDA7XHJcbmV4cG9ydCBsZXQgaGFpciA9IDA7IiwiLy8gbWFwLmpzXHJcbi8vIEhhbmRsZXMgbWFwIG1hbmlwdWxhdGlvbiBsb2dpYy5cclxuaW1wb3J0ICogYXMgZ2FtZSBmcm9tICcuL2dhbWUnO1xyXG5pbXBvcnQgKiBhcyBwbGF5ZXIgZnJvbSAnLi9wbGF5ZXInO1xyXG5cclxuZXhwb3J0IGxldCBib3JkZXJfc2l6ZSA9IDA7IC8vIEhvdyBtYW55IHRpbGVzIGZyb20gZWRnZSB0byBwbGF5ZXJcclxuZXhwb3J0IGxldCB0aWxlX2J1ZmZlciA9IDA7IC8vIFRpbGUgQnVmZmVyOiBIb3cgbGFyZ2UgdGlsZXMgYXJlXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGlsZSh4XywgeV8pIHtcclxuICBsZXQgY2xpY2tfeCA9IE1hdGguZmxvb3IoeF8gLyAzMCk7XHJcbiAgbGV0IGNsaWNrX3kgPSBNYXRoLmZsb29yKHlfIC8gMzApO1xyXG4gIGxldCB0aWxlX3ggPSAtMTtcclxuICBsZXQgdGlsZV95ID0gLTE7XHJcbiAgaWYgKGJvcmRlcl9zaXplID4gY2xpY2tfeSkge1xyXG4gICAgdGlsZV95ID0gcGxheWVyLmN5IC0gKGJvcmRlcl9zaXplIC0gY2xpY2tfeSk7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgdGlsZV95ID0gcGxheWVyLmN5ICsgKGNsaWNrX3kgLSBib3JkZXJfc2l6ZSk7XHJcbiAgfVxyXG5cclxuICBpZiAoYm9yZGVyX3NpemUgPiBjbGlja194KSB7XHJcbiAgICB0aWxlX3ggPSBwbGF5ZXIuY3ggLSAoYm9yZGVyX3NpemUgLSBjbGlja194KTtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB0aWxlX3ggPSBwbGF5ZXIuY3ggKyAoY2xpY2tfeCAtIGJvcmRlcl9zaXplKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBwbGF5ZXIuY3VycmVudF9tYXBbdGlsZV95XVt0aWxlX3hdO1xyXG59XHJcblxyXG4vLyBDaGVjayBpZiB0aGUgdGlsZSBhdCAoeF8sIHlfKSBoYXMgYW4gb2JqZWN0LlxyXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNPYmplY3QoeF8sIHlfKSB7XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkocGxheWVyLmN1cnJlbnRfbWFwW3lfXVt4X10pKSB7XHJcbiAgICBpZiAoZ2FtZS5lbnRpdGllc1twbGF5ZXIuY3VycmVudF9tYXBbeV9dW3hfXVsxXV0udHlwZSA9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gZmFsc2U7XHJcbn0iLCIvLyBzZXR0aW5ncy5qc1xyXG5cclxuaW1wb3J0IHtzb2NrZXR9IGZyb20gJy4vZ2FtZSc7XHJcbmltcG9ydCB7dXNlcm5hbWV9IGZyb20gJy4vcGxheWVyJztcclxuaW1wb3J0IHtwb2x5Z29uX2NsaWNrX3Rlc3R9IGZyb20gJy4vaW5wdXQnO1xyXG5cclxuZXhwb3J0IGxldCBzZXR0aW5ncyA9IHtcclxuICBwbGF5ZXJfbmFtZXM6IHRydWUsXHJcbiAgY29vcmRpbmF0ZXM6IGZhbHNlXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVDbGljayhjbGlja194LCBjbGlja195LCBjYW52YXNfd2lkdGgsIGNhbnZhc19oZWlnaHQpIHtcclxuICBjb25zdCBxdWFydGVyX3dpZHRoID0gY2FudmFzX3dpZHRoIC8gNCAtIDIwO1xyXG5cclxuICAvLyBTaG93IHBsYXllciBuYW1lc1xyXG4gIGlmIChwb2x5Z29uX2NsaWNrX3Rlc3QoNCxcclxuICAgIFtxdWFydGVyX3dpZHRoLCBxdWFydGVyX3dpZHRoKjMsIHF1YXJ0ZXJfd2lkdGgqMywgcXVhcnRlcl93aWR0aF0sIC8vIHggdmFsdWVzXHJcbiAgICBbNTAsIDUwLCA3MiwgNzJdLCAvKiB5IHZhbHVlcyAqLyBjbGlja194LCBjbGlja195KSkge1xyXG4gICAgc2V0dGluZ3MucGxheWVyX25hbWVzID0gIXNldHRpbmdzLnBsYXllcl9uYW1lcztcclxuICAgIHNlbmRTZXR0aW5ncygpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvLyBTaG93IGN1cnJlbnQgY29vcmRpbmF0ZXNcclxuICBlbHNlIGlmIChwb2x5Z29uX2NsaWNrX3Rlc3QoNCxcclxuICAgIFtxdWFydGVyX3dpZHRoLCBxdWFydGVyX3dpZHRoKjMsIHF1YXJ0ZXJfd2lkdGgqMywgcXVhcnRlcl93aWR0aF0sIC8vIHggdmFsdWVzXHJcbiAgICBbNzMsIDczLCA5NSwgOTVdLCAvKiB5IHZhbHVlcyAqLyBjbGlja194LCBjbGlja195KSkge1xyXG4gICAgc2V0dGluZ3MuY29vcmRpbmF0ZXMgPSAhc2V0dGluZ3MuY29vcmRpbmF0ZXM7XHJcbiAgICBzZW5kU2V0dGluZ3MoKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNlbmRTZXR0aW5ncygpIHtcclxuICBzb2NrZXQuZW1pdCgnc2V0dGluZ3MnLCBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAndXNlcm5hbWUnOiB1c2VybmFtZSxcclxuICAgICdzZXR0aW5ncyc6IHNldHRpbmdzLFxyXG4gIH0pKTtcclxufSIsIi8vIGlucHV0LmpzXHJcbi8vIEhhbmRsZXMgdXNlciBpbnB1dC5cclxuXHJcbmltcG9ydCAqIGFzIGRyYXcgZnJvbSAnLi9kcmF3JztcclxuaW1wb3J0ICogYXMgZ2FtZSBmcm9tICcuL2dhbWUnO1xyXG5pbXBvcnQgKiBhcyBtYXAgZnJvbSAnLi9tYXAnO1xyXG5pbXBvcnQgKiBhcyBwbGF5ZXIgZnJvbSAnLi9wbGF5ZXInO1xyXG5pbXBvcnQgKiBhcyBzZXR0aW5ncyBmcm9tICcuL3NldHRpbmdzJztcclxuXHJcbmV4cG9ydCBsZXQgbGFzdF9jbGlja194ID0gLTE7XHJcbmV4cG9ydCBsZXQgbGFzdF9jbGlja195ID0gLTE7XHJcblxyXG5mdW5jdGlvbiBzZW5kQWN0aW9uKGUpIHtcclxuICBpZiAoIVtcclxuICAgIDMyLCAzNywgMzgsIDM5LCA0MCwgNjUsIDY4LCA2OSwgODMsIDg3XHJcbiAgXS5pbmNsdWRlcyhlLmtleUNvZGUpKSByZXR1cm47XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICBpZiAoZS5rZXlDb2RlID09IDMyKSB7IC8vIFNwYWNlYmFyXHJcbiAgICBjb25zb2xlLmxvZyhcIkV2ZW50dWFsbHkgd2Ugd2lsbCBpbXBsZW1lbnQgdGhlIHNwYWNlYmFyIGZvciBpbnRlcmFjdGluZ1wiXHJcbiAgICAgICsgXCIgd2l0aCBpdGVtcyBiZWxvdyB5b3VyIGNoYXJhY3Rlci5cIik7XHJcbiAgfVxyXG5cclxuICBnYW1lLnNvY2tldC5lbWl0KCdqc29uJywgSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgJ3VzZXJuYW1lJzogcGxheWVyLnVzZXJuYW1lLFxyXG4gICAgJ2FjdGlvbic6IGUua2V5Q29kZSxcclxuICB9KSlcclxufVxyXG5cclxuZnVuY3Rpb24gZGV0ZXJtaW5lTGVmdENsaWNrKGNsaWNrX3gsIGNsaWNrX3kpIHtcclxuICBsZXQgY2FudmFzX3dpZHRoID0gZHJhdy5jYW52YXMud2lkdGggLSA2MDtcclxuICBsZXQgY2FudmFzX2hlaWdodCA9IGRyYXcuY2FudmFzLmhlaWdodCAtIDIwO1xyXG5cclxuICBjb25zdCBtaWRfd2lkdGggPSBNYXRoLmZsb29yKGNhbnZhc193aWR0aCAvIDIpO1xyXG4gIGNvbnN0IG1pZF9oZWlnaHQgPSBNYXRoLmZsb29yKGNhbnZhc19oZWlnaHQgLyAyKTtcclxuICBjb25zdCBtaWRfb2Zmc2V0ID0gTWF0aC5mbG9vcihtYXAudGlsZV9idWZmZXIgLyAyKTtcclxuICBjb25zdCBtaWRfbG93ID0gbWlkX3dpZHRoIC0gbWlkX29mZnNldDtcclxuICBjb25zdCBtaWRfaGlnaCA9IG1pZF93aWR0aCArIG1pZF9vZmZzZXQ7XHJcblxyXG4gIGdhbWUucmVzZXRFeGFtaW5lKCk7XHJcblxyXG4gIC8vIFdlIGRpdmlkZSB0aGlzIGludG8gXCJwYWdlZFwiIGNoZWNraW5nXHJcbiAgLy8gUmV0dXJuIGlmIHdlIGZpbmQgYSBtYXRjaGluZyBjbGljaywgdG8gYXZvaWQgbXVsdGlwbGVcclxuICAvLyBleGVjdXRpb25zLlxyXG5cclxuICAvLyBTZXR0aW5ncyBzY29wZVxyXG4gIGlmIChkcmF3Lm92ZXJsYXkgPT0gZHJhdy5PVkVSTEFZUy5TZXR0aW5ncykge1xyXG5cclxuICAgIC8vIENoZWNrIGlmIGEgc2V0dGluZyBpcyBjbGlja2VkLiBJZiBzbywgc2VuZCBkYXRhIHRvIHNlcnZlci5cclxuICAgIGlmIChzZXR0aW5ncy5oYW5kbGVDbGljayhjbGlja194LCBjbGlja195LCBjYW52YXNfd2lkdGgsIGNhbnZhc19oZWlnaHQpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEludmVudG9yeSBzY29wZVxyXG4gIGVsc2UgaWYgKGRyYXcub3ZlcmxheSA9PSBkcmF3Lk9WRVJMQVlTLkludmVudG9yeSkge1xyXG4gICAgLy8gQ2hlY2sgZm9yIGludmVudG9yeSBpbnRlcmFjdGlvbiBoZXJlLlxyXG4gIH1cclxuXHJcbiAgLy8gTWFwIHNjb3BlXHJcbiAgZWxzZSBpZiAoZHJhdy5vdmVybGF5ID09IGRyYXcuT1ZFUkxBWVMuTm9uZSkge1xyXG4gICAgaWYgKGNsaWNrVW5kZXJUaWxlKGNsaWNrX3gsIGNsaWNrX3ksIG1pZF9sb3csIG1pZF9oaWdoKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNsaWNrQWRqYWNlbnRUaWxlKGNsaWNrX3gsIGNsaWNrX3ksIG1pZF9sb3csIG1pZF9oaWdoKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNsaWNrRmFyVGlsZShjbGlja194LCBjbGlja195LCBjYW52YXNfd2lkdGgsIGNhbnZhc19oZWlnaHQsIG1pZF93aWR0aCwgbWlkX2hlaWdodCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gR2VuZXJhbCBzY29wZVxyXG4gIGlmIChjaGVja01lbnVJY29uQ2xpY2tlZChjbGlja194LCBjbGlja195LCBjYW52YXNfd2lkdGgpKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tNZW51SWNvbkNsaWNrZWQoY2xpY2tfeCwgY2xpY2tfeSwgY2FudmFzX3dpZHRoKSB7XHJcbiAgLy8gQ2xpY2sgb24gc2V0dGluZ3MgbWVudSBpY29uXHJcbiAgaWYgKHBvbHlnb25fY2xpY2tfdGVzdCg0LFxyXG4gICAgW2NhbnZhc193aWR0aCwgY2FudmFzLndpZHRoLCBjYW52YXMud2lkdGgsIGNhbnZhc193aWR0aF0sIC8vIHggdmFsdWVzXHJcbiAgICBbMCwgMCwgNjAsIDYwXSwgLyogeSB2YWx1ZXMgKi8gY2xpY2tfeCwgY2xpY2tfeSkpIHtcclxuICAgIGRyYXcub3ZlcmxheSA9IGRyYXcub3ZlcmxheSAhPSBkcmF3Lk9WRVJMQVlTLlNldHRpbmdzID9cclxuICAgICAgZHJhdy5PVkVSTEFZUy5TZXR0aW5ncyA6IGRyYXcuT1ZFUkxBWVMuTm9uZTtcclxuICB9XHJcblxyXG4gIC8vIENsaWNrIGhlbHAgaWNvblxyXG4gIGVsc2UgaWYgKHBvbHlnb25fY2xpY2tfdGVzdCg0LFxyXG4gICAgW2NhbnZhc193aWR0aCwgY2FudmFzLndpZHRoLCBjYW52YXMud2lkdGgsIGNhbnZhc193aWR0aF0sIC8vIHggdmFsdWVzXHJcbiAgICBbNjAsIDYwLCAxMjAsIDEyMF0sIC8qIHkgdmFsdWVzICovIGNsaWNrX3gsIGNsaWNrX3kpKSB7XHJcbiAgICBkcmF3Lm92ZXJsYXkgPSBkcmF3Lm92ZXJsYXkgIT0gZHJhdy5PVkVSTEFZUy5IZWxwID9cclxuICAgICAgZHJhdy5PVkVSTEFZUy5IZWxwIDogZHJhdy5PVkVSTEFZUy5Ob25lO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2xpY2sgaW52ZW50b3J5IGljb25cclxuICBlbHNlIGlmIChwb2x5Z29uX2NsaWNrX3Rlc3QoNCxcclxuICAgIFtjYW52YXNfd2lkdGgsIGNhbnZhcy53aWR0aCwgY2FudmFzLndpZHRoLCBjYW52YXNfd2lkdGhdLCAvLyB4IHZhbHVlc1xyXG4gICAgWzYwLCA2MCwgMTIwLCAxMjBdLCAvKiB5IHZhbHVlcyAqLyBjbGlja194LCBjbGlja195KSkge1xyXG4gICAgZHJhdy5vdmVybGF5ID0gZHJhdy5vdmVybGF5ICE9IGRyYXcuT1ZFUkxBWVMuSW52ZW50b3J5ID9cclxuICAgICAgZHJhdy5PVkVSTEFZUy5JbnZlbnRvcnkgOiBkcmF3Lk9WRVJMQVlTLk5vbmU7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjbGlja1VuZGVyVGlsZShjbGlja194LCBjbGlja195LCBtaWRfbG93LCBtaWRfaGlnaCkge1xyXG4gIC8vIENsaWNrIG9uIG1pZGRsZSBzcXVhcmUgKHdoZXJlIHBsYXllciBpcyBzdGFuZGluZylcclxuICBpZiAocG9seWdvbl9jbGlja190ZXN0KDQsXHJcbiAgICBbbWlkX2xvdywgbWlkX2hpZ2gsIG1pZF9oaWdoLCBtaWRfbG93XSwgLy8geCB2YWx1ZXNcclxuICAgIFttaWRfbG93LCBtaWRfbG93LCBtaWRfaGlnaCwgbWlkX2hpZ2hdLCAvLyB5IHZhbHVlc1xyXG4gICAgY2xpY2tfeCwgY2xpY2tfeSkpIHtcclxuICAgIHNlbmRBY3Rpb24oeydrZXlDb2RlJzogMzIsICdwcmV2ZW50RGVmYXVsdCc6IGZ1bmN0aW9uKCl7fX0pOyAvLyBTcGFjZWJhclxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2xpY2tBZGphY2VudFRpbGUoY2xpY2tfeCwgY2xpY2tfeSwgbWlkX2xvdywgbWlkX2hpZ2gpIHtcclxuICAvLyBDbGljayBvbiBzcXVhcmUgZGlyZWN0bHkgYWJvdmUgcGxheWVyIGxvY2F0aW9uLlxyXG4gIGlmIChwb2x5Z29uX2NsaWNrX3Rlc3QoNCxcclxuICAgIFttaWRfbG93LCBtaWRfaGlnaCwgbWlkX2hpZ2gsIG1pZF9sb3ddLCAvLyB4IHZhbHVlc1xyXG4gICAgW21pZF9sb3cgLSBtYXAudGlsZV9idWZmZXIsIG1pZF9sb3cgLSBtYXAudGlsZV9idWZmZXIsIG1pZF9sb3csIG1pZF9sb3ddLCAvLyB5IHZhbHVlc1xyXG4gICAgY2xpY2tfeCwgY2xpY2tfeSkpIHtcclxuICAgIGlmIChwbGF5ZXIuZGlyID09IDEgJiYgbWFwLmNvbnRhaW5zT2JqZWN0KHBsYXllci5jeCwgcGxheWVyLmN5LTEpKSB7XHJcbiAgICAgIHNlbmRBY3Rpb24oeydrZXlDb2RlJzogNjksICdwcmV2ZW50RGVmYXVsdCc6IGZ1bmN0aW9uKCl7fX0pOyAvLyBFXHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgc2VuZEFjdGlvbih7J2tleUNvZGUnOiAzOCwgJ3ByZXZlbnREZWZhdWx0JzogZnVuY3Rpb24oKXt9fSk7IC8vIFVwXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8vIENsaWNrIG9uIHNxdWFyZSBvbmUgYmVsb3cgcGxheWVyIGxvY2F0aW9uLlxyXG4gIGVsc2UgaWYgKHBvbHlnb25fY2xpY2tfdGVzdCg0LFxyXG4gICAgW21pZF9sb3csIG1pZF9sb3csIG1pZF9oaWdoLCBtaWRfaGlnaF0sIC8vIHggdmFsdWVzXHJcbiAgICBbbWlkX2hpZ2gsIG1pZF9oaWdoICsgbWFwLnRpbGVfYnVmZmVyLCBtaWRfaGlnaCArIG1hcC50aWxlX2J1ZmZlciwgbWlkX2hpZ2hdLCAvLyB5IHZhbHVlc1xyXG4gICAgY2xpY2tfeCwgY2xpY2tfeSkpIHtcclxuICAgIGlmIChwbGF5ZXIuZGlyID09IDAgJiYgbWFwLmNvbnRhaW5zT2JqZWN0KHBsYXllci5jeCwgcGxheWVyLmN5KzEpKSB7XHJcbiAgICAgIHNlbmRBY3Rpb24oeydrZXlDb2RlJzogNjksICdwcmV2ZW50RGVmYXVsdCc6IGZ1bmN0aW9uKCl7fX0pOyAvLyBFXHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgc2VuZEFjdGlvbih7J2tleUNvZGUnOiA0MCwgJ3ByZXZlbnREZWZhdWx0JzogZnVuY3Rpb24oKXt9fSk7IC8vIFVwXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8vIENsaWNrIG9uIHNxdWFyZSBkaXJlY3RseSBsZWZ0IHBsYXllciBsb2NhdGlvbi5cclxuICBlbHNlIGlmIChwb2x5Z29uX2NsaWNrX3Rlc3QoNCxcclxuICAgIFttaWRfbG93IC0gbWFwLnRpbGVfYnVmZmVyLCBtaWRfbG93LCBtaWRfbG93LCBtaWRfbG93IC0gbWFwLnRpbGVfYnVmZmVyXSwgLy8geCB2YWx1ZXNcclxuICAgIFttaWRfbG93LCBtaWRfbG93LCBtaWRfaGlnaCwgbWlkX2hpZ2hdLCAvLyB5IHZhbHVlc1xyXG4gICAgY2xpY2tfeCwgY2xpY2tfeSkpIHtcclxuICAgIGlmIChwbGF5ZXIuZGlyID09IDMgJiYgbWFwLmNvbnRhaW5zT2JqZWN0KHBsYXllci5jeC0xLCBwbGF5ZXIuY3kpKSB7XHJcbiAgICAgIHNlbmRBY3Rpb24oeydrZXlDb2RlJzogNjksICdwcmV2ZW50RGVmYXVsdCc6IGZ1bmN0aW9uKCl7fX0pOyAvLyBFXHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgc2VuZEFjdGlvbih7J2tleUNvZGUnOiAzNywgJ3ByZXZlbnREZWZhdWx0JzogZnVuY3Rpb24oKXt9fSk7IC8vIFVwXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8vIENsaWNrIG9uIHNxdWFyZSBkaXJlY3RseSByaWdodCBwbGF5ZXIgbG9jYXRpb24uXHJcbiAgZWxzZSBpZiAocG9seWdvbl9jbGlja190ZXN0KDQsXHJcbiAgICBbbWlkX2hpZ2gsIG1pZF9oaWdoICsgbWFwLnRpbGVfYnVmZmVyLCBtaWRfaGlnaCArIG1hcC50aWxlX2J1ZmZlciwgbWlkX2hpZ2hdLCAvLyB4IHZhbHVlc1xyXG4gICAgW21pZF9sb3csIG1pZF9sb3csIG1pZF9oaWdoLCBtaWRfaGlnaF0sIC8vIHkgdmFsdWVzXHJcbiAgICBjbGlja194LCBjbGlja195KSkge1xyXG4gICAgaWYgKHBsYXllci5kaXIgPT0gMiAmJiBtYXAuY29udGFpbnNPYmplY3QocGxheWVyLmN4KzEsIHBsYXllci5jeSkpIHtcclxuICAgICAgc2VuZEFjdGlvbih7J2tleUNvZGUnOiA2OSwgJ3ByZXZlbnREZWZhdWx0JzogZnVuY3Rpb24oKXt9fSk7IC8vIEVcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBzZW5kQWN0aW9uKHsna2V5Q29kZSc6IDM5LCAncHJldmVudERlZmF1bHQnOiBmdW5jdGlvbigpe319KTsgLy8gVXBcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsaWNrRmFyVGlsZShjbGlja194LCBjbGlja195LCBjYW52YXNfd2lkdGgsIGNhbnZhc19oZWlnaHQsIG1pZF93aWR0aCwgbWlkX2hlaWdodCkge1xyXG5cclxuICAvKiBNb3ZlbWVudCAqL1xyXG4gIGlmIChwb2x5Z29uX2NsaWNrX3Rlc3QoMyxcclxuICAgIFswLCBtaWRfd2lkdGgsIGNhbnZhc193aWR0aF0sIFswLCBtaWRfaGVpZ2h0LCAwXSxcclxuICAgIGNsaWNrX3gsIGNsaWNrX3kpKSB7IC8vIFVwXHJcbiAgICBzZW5kQWN0aW9uKHsna2V5Q29kZSc6IDM4LCAncHJldmVudERlZmF1bHQnOiBmdW5jdGlvbigpe319KTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICBlbHNlIGlmIChwb2x5Z29uX2NsaWNrX3Rlc3QoMyxcclxuICAgIFswLCBtaWRfd2lkdGgsIGNhbnZhc193aWR0aF0sIFtjYW52YXNfaGVpZ2h0LCBtaWRfaGVpZ2h0LCBjYW52YXNfaGVpZ2h0XSxcclxuICAgIGNsaWNrX3gsIGNsaWNrX3kpKSB7IC8vIERvd25cclxuICAgIHNlbmRBY3Rpb24oeydrZXlDb2RlJzogNDAsICdwcmV2ZW50RGVmYXVsdCc6IGZ1bmN0aW9uKCl7fX0pO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIGVsc2UgaWYgKHBvbHlnb25fY2xpY2tfdGVzdCgzLFxyXG4gICAgWzAsIG1pZF93aWR0aCwgMF0sIFswLCBtaWRfaGVpZ2h0LCBjYW52YXNfaGVpZ2h0XSxcclxuICAgIGNsaWNrX3gsIGNsaWNrX3kpKSB7IC8vIExlZnRcclxuICAgIHNlbmRBY3Rpb24oeydrZXlDb2RlJzogMzcsICdwcmV2ZW50RGVmYXVsdCc6IGZ1bmN0aW9uKCl7fX0pO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIGVsc2UgaWYgKHBvbHlnb25fY2xpY2tfdGVzdCgzLFxyXG4gICAgW2NhbnZhc193aWR0aCwgbWlkX3dpZHRoLCBjYW52YXNfd2lkdGhdLCBbMCwgbWlkX2hlaWdodCwgY2FudmFzX2hlaWdodF0sXHJcbiAgICBjbGlja194LCBjbGlja195KSkgeyAvLyBSaWdodFxyXG4gICAgc2VuZEFjdGlvbih7J2tleUNvZGUnOiAzOSwgJ3ByZXZlbnREZWZhdWx0JzogZnVuY3Rpb24oKXt9fSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG4vLyBwb2x5Z29uX2NsaWNrX3Rlc3QgYnkgV20uIFJhbmRvbHBoIEZyYW5rbGluXHJcbi8vIGludCBsaXN0KGludCkgbGlzdChpbnQpIGludCBpbnQgLT4gYm9vbFxyXG4vLyBDb25zdW1lcyB0aGUgbnVtYmVyIG9mIHZlcnRpY2VzLCBhbG9uZyB3aXRoIGVhY2ggdmVydGV4IGNvb3JkaW5hdGUsXHJcbi8vIGFzIGEgbGlzdCBvZiB4IGNvb3JkaW5hdGVzIGFuZCBhIHNlY29uZCBsaXN0IG9mIHkgY29vcmRpbmF0ZXMuXHJcbi8vIFRlc3RzIGFnYWluc3QgY2xpY2tlZCBjb29yZGluYXRlcyB0byBkZXRlcm1pbmUgd2hldGhlciB0aGVcclxuLy8gY2xpY2sgd2FzIHdpdGhpbiB0aGUgcG9seWdvbiBmb3JtZWQgYnkgc2FpZCB2ZXJ0aWNlcy5cclxuZXhwb3J0IGZ1bmN0aW9uIHBvbHlnb25fY2xpY2tfdGVzdCggbnZlcnQsIHZlcnR4LCB2ZXJ0eSwgdGVzdHgsIHRlc3R5ICkge1xyXG4gICAgbGV0IGksIGosIGMgPSBmYWxzZTtcclxuICAgIGZvciggaSA9IDAsIGogPSBudmVydC0xOyBpIDwgbnZlcnQ7IGogPSBpKysgKSB7XHJcbiAgICAgICAgaWYoICggKCB2ZXJ0eVtpXSA+IHRlc3R5ICkgIT0gKCB2ZXJ0eVtqXSA+IHRlc3R5ICkgKSAmJlxyXG4gICAgICAgICAgICAoIHRlc3R4IDwgKCB2ZXJ0eFtqXSAtIHZlcnR4W2ldICkgKiAoIHRlc3R5IC0gdmVydHlbaV0gKSAvICggdmVydHlbal0gLSB2ZXJ0eVtpXSApICsgdmVydHhbaV0gKSApIHtcclxuICAgICAgICAgIGMgPSAhYztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYztcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0VG91Y2hDb29yZHMoZSkge1xyXG4gIGUucHJldmVudERlZmF1bHQoKTtcclxuICBsYXN0X2NsaWNrX3ggPSBlLnRvdWNoZXNbMF0uY2xpZW50WCAtIGRyYXcuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XHJcbiAgbGFzdF9jbGlja195ID0gZS50b3VjaGVzWzBdLmNsaWVudFkgLSBkcmF3LmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENsaWNrQ29vcmRzKGUpIHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgY29uc3QgY2xpY2tfeCA9IGUub2Zmc2V0WDtcclxuICBjb25zdCBjbGlja195ID0gZS5vZmZzZXRZO1xyXG4gIGlmIChlLmJ1dHRvbiA9PSAyKSB7XHJcbiAgICBsYXN0X2NsaWNrX3ggPSBjbGlja194O1xyXG4gICAgbGFzdF9jbGlja195ID0gY2xpY2tfeTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgZGV0ZXJtaW5lTGVmdENsaWNrKGNsaWNrX3gsIGNsaWNrX3kpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUb3VjaENvb3JkcyhlKSB7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIGlmIChsYXN0X2NsaWNrX3ggPiAtMSB8fCBsYXN0X2NsaWNrX3kgPiAtMSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBjb25zdCBjbGlja194ID0gZS50b3VjaGVzWzBdLmNsaWVudFggLSBkcmF3LmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xyXG4gIGNvbnN0IGNsaWNrX3kgPSBlLnRvdWNoZXNbMF0uY2xpZW50WSAtIGRyYXcuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuICBkZXRlcm1pbmVMZWZ0Q2xpY2soY2xpY2tfeCwgY2xpY2tfeSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldENvbnRleHRNZW51KGUpIHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgbGV0IHRpbGUgPSBtYXAuZ2V0VGlsZShsYXN0X2NsaWNrX3gsIGxhc3RfY2xpY2tfeSk7XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkodGlsZSkpIHtcclxuICAgIGxldCBvYmplY3QgPSBnYW1lLmVudGl0aWVzW3RpbGVbMV1dO1xyXG4gICAgaWYgKG9iamVjdC50eXBlID09IFwib2JqZWN0XCIpIHtcclxuICAgICAgZ2FtZS5leGFtaW5lID0gb2JqZWN0LmV4YW1pbmU7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVNb3VzZU1vdmVtZW50KGUpIHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgbGV0IG1vdXNlX3ggPSBlLm9mZnNldFg7XHJcbiAgbGV0IG1vdXNlX3kgPSBlLm9mZnNldFk7XHJcblxyXG4gIC8vIE1vdXNlIG9mZiByaWdodC1jbGljayBtZW51IGNsb3NlcyBpdCAoKy0gNXB4KVxyXG4gIGlmICghcG9seWdvbl9jbGlja190ZXN0KDQsIFtcclxuICAgIGRyYXcuZXhhbWluZV9tZW51X3ZlcnRpY2VzWzBdWzBdLCBkcmF3LmV4YW1pbmVfbWVudV92ZXJ0aWNlc1sxXVswXSxcclxuICAgIGRyYXcuZXhhbWluZV9tZW51X3ZlcnRpY2VzWzJdWzBdLCBkcmF3LmV4YW1pbmVfbWVudV92ZXJ0aWNlc1szXVswXVxyXG4gIF0sIFtcclxuICAgIGRyYXcuZXhhbWluZV9tZW51X3ZlcnRpY2VzWzBdWzFdLCBkcmF3LmV4YW1pbmVfbWVudV92ZXJ0aWNlc1sxXVsxXSxcclxuICAgIGRyYXcuZXhhbWluZV9tZW51X3ZlcnRpY2VzWzJdWzFdLCBkcmF3LmV4YW1pbmVfbWVudV92ZXJ0aWNlc1szXVsxXVxyXG4gIF0sIG1vdXNlX3gsIG1vdXNlX3kpKSB7XHJcbiAgICBnYW1lLnJlc2V0RXhhbWluZSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gTW91c2Ugb3ZlciBvYmplY3Qgc2hvd3MgdGV4dCBpbiBjb3JuZXJcclxuICBsZXQgdGlsZSA9IG1hcC5nZXRUaWxlKG1vdXNlX3gsIG1vdXNlX3kpO1xyXG4gIGlmIChBcnJheS5pc0FycmF5KHRpbGUpKSB7XHJcbiAgICBsZXQgb2JqZWN0ID0gZ2FtZS5lbnRpdGllc1t0aWxlWzFdXTtcclxuICAgIGlmIChvYmplY3QudHlwZSA9PSBcIm9iamVjdFwiIHx8IG9iamVjdC50eXBlID09IFwiaXRlbVwiKSB7XHJcbiAgICAgIGdhbWUub2JqZWN0X25hbWUgPSBvYmplY3QubmFtZTtcclxuICAgIH1cclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICBnYW1lLm9iamVjdF9uYW1lID0gXCJcIjtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgc2VuZEFjdGlvbik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGlja0xpc3RlbmVyKCkge1xyXG4gIGRyYXcuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGdldENsaWNrQ29vcmRzKTtcclxuICBkcmF3LmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgc2V0VG91Y2hDb29yZHMsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgZHJhdy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBnZXRUb3VjaENvb3JkcywgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuICBkcmF3LmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHNldENvbnRleHRNZW51KTtcclxuICBkcmF3LmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVNb3VzZU1vdmVtZW50KTtcclxufSIsIi8vIGRyYXcuanNcclxuXHJcbmltcG9ydCAqIGFzIGdhbWUgZnJvbSAnLi9nYW1lJztcclxuaW1wb3J0ICogYXMgaW5wdXQgZnJvbSAnLi9pbnB1dCc7XHJcbmltcG9ydCAqIGFzIHBsYXllciBmcm9tICcuL3BsYXllcic7XHJcbmltcG9ydCAqIGFzIHNldHRpbmdzIGZyb20gJy4vc2V0dGluZ3MnO1xyXG5pbXBvcnQgKiBhcyBtYXAgZnJvbSAnLi9tYXAnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKTtcclxuXHJcbmNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cclxuLy8gUm93cyBvZiAxMCAzMHgzMCB0aWxlcy5cclxuY29uc3QgdGlsZXNoZWV0ID0gbmV3IEltYWdlKCk7XHJcbnRpbGVzaGVldC5zcmMgPSBcInN0YXRpYy90aWxlc2hlZXQucG5nXCI7XHJcblxyXG5jb25zdCBjaGFyc2hlZXQgPSBuZXcgSW1hZ2UoKTtcclxuY2hhcnNoZWV0LnNyYyA9IFwic3RhdGljL2NoYXJzaGVldC5wbmdcIjtcclxuXHJcbmNvbnN0IG9wdGlvbnNoZWV0ID0gbmV3IEltYWdlKCk7XHJcbm9wdGlvbnNoZWV0LnNyYyA9IFwic3RhdGljL29wdGlvbnNoZWV0LnBuZ1wiO1xyXG5cclxuZXhwb3J0IGxldCBleGFtaW5lX21lbnVfdmVydGljZXMgPSBbXHJcbiAgWzAsIDBdLFxyXG4gIFswLCAwXSxcclxuICBbMCwgMF0sXHJcbiAgWzAsIDBdXHJcbl07XHJcblxyXG5leHBvcnQgY29uc3QgT1ZFUkxBWVMgPSB7XHJcbiAgTm9uZTogMCxcclxuICBTZXR0aW5nczogMSxcclxuICBIZWxwOiAyLFxyXG4gIEludmVudG9yeTogN1xyXG59O1xyXG5leHBvcnQgbGV0IG92ZXJsYXkgPSBPVkVSTEFZUy5Ob25lO1xyXG5cclxuLy8gU21hbGwgd2luZG93cyBtZWFucyBzbWFsbGVyIGNhbnZhcy5cclxuaWYgKHdpbmRvdy5pbm5lcldpZHRoIDwgNjAwIHx8IHdpbmRvdy5pbm5lckhlaWdodCA8IDYwMCkge1xyXG4gIGNhbnZhcy53aWR0aCA9IDMzMDtcclxuICBjYW52YXMuaGVpZ2h0ID0gMjkwO1xyXG59XHJcblxyXG4vKiBEUkFXSU5HICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkcmF3KCkge1xyXG4gIGNvbnN0IGNhbnZhc193aWR0aCA9IGNhbnZhcy53aWR0aCAtIDYwO1xyXG4gIGNvbnN0IGNhbnZhc19oZWlnaHQgPSBjYW52YXMuaGVpZ2h0IC0gMjA7XHJcbiAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG5cclxuICBpZiAob3ZlcmxheSA9PSBPVkVSTEFZUy5TZXR0aW5ncykge1xyXG4gICAgZHJhd1NldHRpbmdzKGNhbnZhc193aWR0aCwgY2FudmFzX2hlaWdodCk7XHJcbiAgfVxyXG4gIGVsc2UgaWYgKG92ZXJsYXkgPT0gT1ZFUkxBWVMuSGVscCkge1xyXG4gICAgZHJhd0hlbHAoY2FudmFzX3dpZHRoLCBjYW52YXNfaGVpZ2h0KTtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICBkcmF3VGlsZXMoY2FudmFzX3dpZHRoLCBjYW52YXNfaGVpZ2h0KTtcclxuICAgIGRyYXdPdGhlcnMoKTtcclxuXHJcbiAgICAvLyBGaWxsIHRoZSBsb2NhbCBjaGFyYWN0ZXIgdGlsZVxyXG4gICAgaWYgKGNoYXJzaGVldC5jb21wbGV0ZSkge1xyXG4gICAgICBkcmF3UGxheWVyKFxyXG4gICAgICAgIG1hcC5ib3JkZXJfc2l6ZSwgbWFwLmJvcmRlcl9zaXplLFxyXG4gICAgICAgIHBsYXllci5kaXIsIHBsYXllci51c2VybmFtZSxcclxuICAgICAgICBwbGF5ZXIuc2hpcnQsIHBsYXllci5oYWlyXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgY2hhcnNoZWV0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBkcmF3UGxheWVyKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZ2FtZS5vYmplY3RfbmFtZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGRyYXdPYmplY3ROYW1lKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGdhbWUuZXhhbWluZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGRyYXdSaWdodENsaWNrRXhhbWluZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKHNldHRpbmdzLnNldHRpbmdzLmNvb3JkaW5hdGVzKSB7XHJcbiAgICBkcmF3Q29vcmRpbmF0ZXMoY2FudmFzX3dpZHRoLCBjYW52YXNfaGVpZ2h0KTtcclxuICB9XHJcbiAgZHJhd01hcE5hbWUoY2FudmFzX2hlaWdodCk7XHJcbiAgZHJhd1NpZGVQYW5lbCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3VGlsZXMoY2FudmFzX3dpZHRoLCBjYW52YXNfaGVpZ2h0KSB7XHJcbiAgZm9yIChsZXQgeCA9IDA7IHggPCBjYW52YXNfd2lkdGg7IHggKz0gbWFwLnRpbGVfYnVmZmVyKSB7XHJcbiAgICBjb25zdCBjdXJyX3ggPSB4L21hcC50aWxlX2J1ZmZlcisocGxheWVyLmN4LW1hcC5ib3JkZXJfc2l6ZSk7XHJcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGNhbnZhc19oZWlnaHQ7IHkgKz0gbWFwLnRpbGVfYnVmZmVyKSB7XHJcbiAgICAgIGNvbnN0IHRpbGUgPSBwbGF5ZXIuY3VycmVudF9tYXBbeS9tYXAudGlsZV9idWZmZXIrKHBsYXllci5jeS1tYXAuYm9yZGVyX3NpemUpXVtjdXJyX3hdO1xyXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aWxlKSkge1xyXG4gICAgICAgIGZvciAoY29uc3QgZGVmIGluIHRpbGUpIHtcclxuICAgICAgICAgIGRyYXdUaWxlKHRpbGVbZGVmXSwgeCwgeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGRyYXdUaWxlKHRpbGUsIHgsIHkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3VGlsZSh0aWxlLCB4LCB5KSB7XHJcbiAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gIGlmICh0aWxlc2hlZXQuY29tcGxldGUpIHtcclxuICAgIGRyYXdJbWFnZSh0aWxlLCB4LCB5KTtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB0aWxlc2hlZXQubG9hZCA9IGRyYXdJbWFnZS5iaW5kKHRpbGUsIHgsIHkpO1xyXG4gIH1cclxuICBjdHgubW92ZVRvKHgsIHkpO1xyXG4gIGN0eC5saW5lVG8oeCArIG1hcC50aWxlX2J1ZmZlciwgeSk7XHJcbiAgY3R4Lm1vdmVUbyh4LCB5KTtcclxuICBjdHgubGluZVRvKHgsIHkgKyBtYXAudGlsZV9idWZmZXIpO1xyXG4gIGN0eC5zdHJva2UoKTtcclxuICBjdHguY2xvc2VQYXRoKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdQbGF5ZXIoeF8sIHlfLCBkaXJlY3Rpb24sIHVzZXJuYW1lLCBzaGlydCwgaGFpcikge1xyXG4gIGN0eC5zdHJva2VTdHlsZSA9IFwidHJhbnNwYXJlbnRcIjtcclxuICBjdHguZHJhd0ltYWdlKGNoYXJzaGVldCxcclxuICAgIChkaXJlY3Rpb24gKyBoYWlyKSAqIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIHNoaXJ0ICogbWFwLnRpbGVfYnVmZmVyLFxyXG4gICAgbWFwLnRpbGVfYnVmZmVyLCBtYXAudGlsZV9idWZmZXIsXHJcbiAgICB4XyAqIG1hcC50aWxlX2J1ZmZlciwgeV8gKiBtYXAudGlsZV9idWZmZXIsXHJcbiAgICBtYXAudGlsZV9idWZmZXIsIG1hcC50aWxlX2J1ZmZlclxyXG4gIClcclxuXHJcbiAgaWYgKHNldHRpbmdzLnNldHRpbmdzLnBsYXllcl9uYW1lcykge1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgIGN0eC5mb250ID0gXCIxMHB0IEFyaWFsXCI7XHJcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIjtcclxuICAgIGN0eC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgY3R4LnNoYWRvd09mZnNldFggPSAxO1xyXG4gICAgY3R4LnNoYWRvd09mZnNldFkgPSAxO1xyXG4gICAgY3R4LnNoYWRvd0NvbG9yID0gXCJyZ2JhKDAsIDAsIDAsIDAuMylcIjtcclxuICAgIGN0eC5maWxsVGV4dCh1c2VybmFtZSxcclxuICAgICAgeF8gKiBtYXAudGlsZV9idWZmZXIgKyAobWFwLnRpbGVfYnVmZmVyIC8gMiksXHJcbiAgICAgIHlfICogbWFwLnRpbGVfYnVmZmVyIC0gNVxyXG4gICAgKTtcclxuICAgIGN0eC5zaGFkb3dPZmZzZXRYID0gMDtcclxuICAgIGN0eC5zaGFkb3dPZmZzZXRZID0gMDtcclxuICAgIGN0eC5zaGFkb3dCbHVyID0gMDtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdJbWFnZSh0aWxlLCB4LCB5KSB7XHJcbiAgY3R4LnN0cm9rZVN0eWxlID0gXCJ0cmFuc3BhcmVudFwiO1xyXG4gIGN0eC5kcmF3SW1hZ2UodGlsZXNoZWV0LFxyXG4gICAgKHRpbGUgJSAxMCkgKiBtYXAudGlsZV9idWZmZXIsXHJcbiAgICBNYXRoLmZsb29yKHRpbGUgLyAxMCkgKiBtYXAudGlsZV9idWZmZXIsXHJcbiAgICBtYXAudGlsZV9idWZmZXIsIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIHgsIHksXHJcbiAgICBtYXAudGlsZV9idWZmZXIsIG1hcC50aWxlX2J1ZmZlclxyXG4gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdPdGhlcnMoKSB7XHJcbiAgZm9yIChjb25zdCB1IGluIGdhbWUuYWxsX3VzZXJzKSB7XHJcbiAgICBpZiAodSAhPSBwbGF5ZXIudXNlcm5hbWUpIHtcclxuICAgICAgY29uc3QgdWN4ID0gZ2FtZS5hbGxfdXNlcnNbdV0uY3g7XHJcbiAgICAgIGNvbnN0IHVjeSA9IGdhbWUuYWxsX3VzZXJzW3VdLmN5O1xyXG4gICAgICBjb25zdCB4ID0gdWN4IC0gcGxheWVyLmN4O1xyXG4gICAgICBjb25zdCB5ID0gdWN5IC0gcGxheWVyLmN5O1xyXG4gICAgICBpZiAoeCA+PSAtbWFwLmJvcmRlcl9zaXplICYmIHggPD0gbWFwLmJvcmRlcl9zaXplXHJcbiAgICAgICAgJiYgeSA+PSAtbWFwLmJvcmRlcl9zaXplICYmIHkgPD0gbWFwLmJvcmRlcl9zaXplKSB7XHJcbiAgICAgICAgLy8gRmlsbCB0aGUgY2hhcmFjdGVyIHRpbGVcclxuICAgICAgICBkcmF3UGxheWVyKHggKyBtYXAuYm9yZGVyX3NpemUsIHkgKyBtYXAuYm9yZGVyX3NpemUsXHJcbiAgICAgICAgICBnYW1lLmFsbF91c2Vyc1t1XS5kaXJlY3Rpb24sXHJcbiAgICAgICAgICBnYW1lLmFsbF91c2Vyc1t1XS51c2VybmFtZSxcclxuICAgICAgICAgIGdhbWUuYWxsX3VzZXJzW3VdLnNoaXJ0LFxyXG4gICAgICAgICAgZ2FtZS5hbGxfdXNlcnNbdV0uaGFpclxyXG4gICAgICAgIClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1NpZGVQYW5lbCgpIHtcclxuICBjdHguc3Ryb2tlU3R5bGUgPSBcInRyYW5zcGFyZW50XCI7XHJcbiAgY3R4LmRyYXdJbWFnZShvcHRpb25zaGVldCxcclxuICAgIDAsIDAsXHJcbiAgICA2MCwgNDUwLFxyXG4gICAgY2FudmFzLndpZHRoIC0gNjAsIDAsXHJcbiAgICA2MCwgNDUwXHJcbiAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1JpZ2h0Q2xpY2tFeGFtaW5lKCkge1xyXG4gIGxldCBib3hfd2lkdGggPSBjdHgubWVhc3VyZVRleHQoZ2FtZS5leGFtaW5lKS53aWR0aCArIDEwO1xyXG4gIGxldCBib3hfaGVpZ2h0ID0gMjI7XHJcblxyXG4gIGN0eC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgY3R4LmZpbGxSZWN0KFxyXG4gICAgaW5wdXQubGFzdF9jbGlja194LFxyXG4gICAgaW5wdXQubGFzdF9jbGlja195LFxyXG4gICAgYm94X3dpZHRoLCBib3hfaGVpZ2h0XHJcbiAgKTtcclxuXHJcbiAgZXhhbWluZV9tZW51X3ZlcnRpY2VzID0gW1xyXG4gICAgW2lucHV0Lmxhc3RfY2xpY2tfeCAtIDUsIGlucHV0Lmxhc3RfY2xpY2tfeSAtIDVdLFxyXG4gICAgW2lucHV0Lmxhc3RfY2xpY2tfeCArIGJveF93aWR0aCArIDUsIGlucHV0Lmxhc3RfY2xpY2tfeSAtIDVdLFxyXG4gICAgW2lucHV0Lmxhc3RfY2xpY2tfeCArIGJveF93aWR0aCArIDUsIGlucHV0Lmxhc3RfY2xpY2tfeSArIGJveF9oZWlnaHQgKyA1XSxcclxuICAgIFtpbnB1dC5sYXN0X2NsaWNrX3ggLSA1LCBpbnB1dC5sYXN0X2NsaWNrX3kgKyBib3hfaGVpZ2h0ICsgNV1cclxuICBdO1xyXG5cclxuICBjdHguZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gIGN0eC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gIGN0eC5maWxsVGV4dChnYW1lLmV4YW1pbmUsXHJcbiAgICBpbnB1dC5sYXN0X2NsaWNrX3ggKyBNYXRoLmZsb29yKGJveF93aWR0aCAvIDIpLFxyXG4gICAgaW5wdXQubGFzdF9jbGlja195ICsgTWF0aC5mbG9vcihib3hfaGVpZ2h0IC8gMilcclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3T2JqZWN0TmFtZSgpIHtcclxuICBjdHguZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gIGN0eC50ZXh0QWxpZ24gPSBcImVuZFwiO1xyXG4gIGN0eC5maWxsVGV4dChnYW1lLm9iamVjdF9uYW1lLFxyXG4gICAgY2FudmFzLndpZHRoIC0gNjUsIDEwKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0Nvb3JkaW5hdGVzKGNhbnZhc193aWR0aCwgY2FudmFzX2hlaWdodCkge1xyXG4gIC8vIEZpbGwgdGhlIHBvc2l0aW9uXHJcbiAgY3R4LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcclxuICBjdHgudGV4dEFsaWduID0gXCJlbmRcIjtcclxuICBjdHguZmlsbFJlY3QoMCwgY2FudmFzX2hlaWdodCwgY2FudmFzX3dpZHRoLCAyMCk7XHJcbiAgY3R4LmZvbnQgPSBcIjEycHQgQXJpYWxcIjtcclxuICBjdHguZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gIGN0eC5maWxsVGV4dChcclxuICAgIFwiKFwiICsgcGxheWVyLmN4ICsgXCIsIFwiICsgcGxheWVyLmN5ICsgXCIpXCIsXHJcbiAgICBjYW52YXNfd2lkdGggLSA1LCBjYW52YXNfaGVpZ2h0ICsgMTBcclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3T3ZlcmxheShjYW52YXNfd2lkdGgsIGNhbnZhc19oZWlnaHQpIHtcclxuICBjdHguZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXNfd2lkdGgsIGNhbnZhc19oZWlnaHQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3U2V0dGluZ3MoY2FudmFzX3dpZHRoLCBjYW52YXNfaGVpZ2h0KSB7XHJcbiAgZHJhd092ZXJsYXkoY2FudmFzX3dpZHRoLCBjYW52YXNfaGVpZ2h0KTtcclxuICBjdHguZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gIGN0eC50ZXh0QWxpZ24gPSBcInN0YXJ0XCI7XHJcblxyXG4gIGN0eC5mb250ID0gXCJib2xkIDI0cHQgQXJpYWxcIjtcclxuICBjdHguZmlsbFRleHQoXCJTZXR0aW5nc1wiLFxyXG4gIGNhbnZhc193aWR0aCAvIDQgLSAyNSwgNDBcclxuICApO1xyXG5cclxuICBjdHguZm9udCA9IFwiMTJwdCBBcmlhbFwiO1xyXG5cclxuICAvLyBTaG93IHBsYXllciBuYW1lc1xyXG4gIGN0eC5maWxsVGV4dChcclxuICAgIFwiU2hvdyBQbGF5ZXIgTmFtZXM6IFwiICsgKHNldHRpbmdzLnNldHRpbmdzLnBsYXllcl9uYW1lcyA/IFwiT25cIiA6IFwiT2ZmXCIpLFxyXG4gICAgY2FudmFzX3dpZHRoIC8gNCAtIDI0LFxyXG4gICAgNzBcclxuICApO1xyXG5cclxuICAvLyBTaG93IGN1cnJlbnQgY29vcmRpbmF0ZXNcclxuICBjdHguZmlsbFRleHQoXHJcbiAgICBcIlNob3cgQ29vcmRpbmF0ZXM6IFwiICsgKHNldHRpbmdzLnNldHRpbmdzLmNvb3JkaW5hdGVzID8gXCJPblwiIDogXCJPZmZcIiksXHJcbiAgICBjYW52YXNfd2lkdGggLyA0IC0gMjQsXHJcbiAgICA5NVxyXG4gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdIZWxwKGNhbnZhc193aWR0aCwgY2FudmFzX2hlaWdodCkge1xyXG4gIGRyYXdPdmVybGF5KGNhbnZhc193aWR0aCwgY2FudmFzX2hlaWdodCk7XHJcblxyXG4gIGN0eC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgY3R4LnRleHRBbGlnbiA9IFwic3RhcnRcIjtcclxuXHJcbiAgY3R4LmZvbnQgPSBcImJvbGQgMjRwdCBBcmlhbFwiO1xyXG4gIGN0eC5maWxsVGV4dChcIkhlbHBmdWwgSGludHNcIixcclxuICBjYW52YXNfd2lkdGggLyA0IC0gMjUsIDQwXHJcbiAgKTtcclxuXHJcbiAgY3R4LmZvbnQgPSBcIjEycHQgQXJpYWxcIjtcclxuICBjdHguZmlsbFRleHQoXCJNb3ZlbWVudDogV0FTRCwgQXJyb3dzLCBvciBjbGlja1wiLFxyXG4gICAgY2FudmFzX3dpZHRoIC8gNCAtIDI0LCA3MFxyXG4gICk7XHJcbiAgY3R4LmZpbGxUZXh0KFwiRXhhbWluZTogUSBvciBSaWdodC1jbGlja1wiLFxyXG4gICAgY2FudmFzX3dpZHRoIC8gNCAtIDI0LCA5NVxyXG4gICk7XHJcbiAgY3R4LmZpbGxUZXh0KFwiVXNlIE9iamVjdDogRSBvciBMZWZ0LWNsaWNrXCIsXHJcbiAgICBjYW52YXNfd2lkdGggLyA0IC0gMjQsIDEyMFxyXG4gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdNYXBOYW1lKGNhbnZhc19oZWlnaHQpIHtcclxuICBjdHguZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gIGN0eC50ZXh0QWxpZ24gPSBcInN0YXJ0XCI7XHJcbiAgY3R4LmZvbnQgPSBcImJvbGQgMTJwdCBBcmlhbFwiO1xyXG4gIGN0eC5maWxsVGV4dChwbGF5ZXIuY3VycmVudF9tYXBfbmFtZSxcclxuICAgIDUsIGNhbnZhc19oZWlnaHQgKyAxMVxyXG4gICk7XHJcbn1cclxuIiwiLy8gZ2FtZS5qc1xyXG5cclxuLy8gaW1wb3J0ICdAYmFiZWwvcG9seWZpbGwnO1xyXG5pbXBvcnQgKiBhcyBkcmF3IGZyb20gJy4vZHJhdyc7XHJcbmltcG9ydCAqIGFzIHNldHRpbmdzIGZyb20gJy4vc2V0dGluZ3MnO1xyXG5pbXBvcnQgKiBhcyBwbGF5ZXIgZnJvbSAnLi9wbGF5ZXInO1xyXG5pbXBvcnQgKiBhcyBpbnB1dCBmcm9tICcuL2lucHV0JztcclxuaW1wb3J0ICogYXMgbWFwIGZyb20gJy4vbWFwJztcclxuXHJcbi8qIEluaXRpYWxpemluZyAqL1xyXG5leHBvcnQgY29uc3Qgc29ja2V0ID0gaW8uY29ubmVjdCgnLy8nICsgZG9jdW1lbnQuZG9tYWluICsgJzonICsgbG9jYXRpb24ucG9ydCk7XHJcblxyXG5leHBvcnQgbGV0IGFsbF91c2VycyA9IHt9O1xyXG5cclxuZXhwb3J0IGxldCBlbnRpdGllcyA9IFtdO1xyXG5leHBvcnQgbGV0IGFjdGlvbl9kYXRhID0ge307XHJcblxyXG5leHBvcnQgbGV0IGV4YW1pbmUgPSBcIlwiO1xyXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRFeGFtaW5lKCkge1xyXG4gIGV4YW1pbmUgPSBcIlwiO1xyXG4gIGRyYXcuZXhhbWluZV9tZW51X3ZlcnRpY2VzID0gW1xyXG4gICAgWzAsIDBdLFxyXG4gICAgWzAsIDBdLFxyXG4gICAgWzAsIDBdLFxyXG4gICAgWzAsIDBdXHJcbiAgXTtcclxufVxyXG5cclxuZXhwb3J0IGxldCBvYmplY3RfbmFtZSA9IFwiXCI7XHJcblxyXG4vKiBNb3ZlbWVudCAqL1xyXG5mdW5jdGlvbiBkb01vdmUobW92ZW1lbnQpIHtcclxuICBwbGF5ZXIuY3ggPSBtb3ZlbWVudC5jeDtcclxuICBwbGF5ZXIuY3kgPSBtb3ZlbWVudC5jeTtcclxuICBwbGF5ZXIuZGlyID0gbW92ZW1lbnQuZGlyZWN0aW9uO1xyXG59XHJcblxyXG4vKiBNYWluIGdhbWUgbG9vcCBhbmQgc29ja2V0IGxpc3RlbmVycyAqL1xyXG5sZXQgbGFzdDtcclxuKGZ1bmN0aW9uICgpIHtcclxuICBmdW5jdGlvbiBtYWluKCB0aW1lc3RhbXAgKSB7XHJcbiAgICBpZiAoIWxhc3QpIHtcclxuICAgICAgbGFzdCA9IHRpbWVzdGFtcFxyXG4gICAgICBkcmF3LmRyYXcoKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBpZiAodGltZXN0YW1wIC0gbGFzdCA+IDEwMCkge1xyXG4gICAgICAgIGRyYXcuZHJhdygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIG1haW4gKTtcclxuICB9XHJcblxyXG4gIHNvY2tldC5vbignY29ubmVjdCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXV0aGVudGljYXRpb25cIik7XHJcbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBzb2NrZXQuZW1pdCgnYXV0aGVudGljYXRpb24nLCBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgJ3VzZXJuYW1lJzogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZXJuYW1lJykudmFsdWVcclxuICAgICAgfSkpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIHNvY2tldC5vbignYXV0aGVudGljYXRlZCcsIGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgY29uc3QgbXNnID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtZXNzYWdlXCIpO1xyXG4gICAgaWYgKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICBtc2cuaW5uZXJIVE1MID0gXCJBdXRoZW50aWNhdGVkIHN1Y2Nlc3NmdWxseSFcIjtcclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICBtc2cuaW5uZXJIVE1MID0gXCJMb2FkaW5nIGRhdGEuLi5cIjtcclxuICAgICAgICBzb2NrZXQuZW1pdCgncmV0cmlldmVfaW5pdF9kYXRhJywgSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgJ3VzZXJuYW1lJzogZGF0YS51c2VybmFtZVxyXG4gICAgICAgIH0pKTtcclxuICAgICAgfSwgNjAwKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBtc2cuaW5uZXJIVE1MID0gXCJBdXRoZW50aWNhdGlvbiBmYWlsZWQuIFBsZWFzZSB0cnkgYWdhaW4uXCI7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIGxvYWRNYXAoYXR0ZW1wdHMpIHtcclxuICAgIGNvbnN0IGxvYWRlZCA9IGNoZWNrRGF0YUFjcXVpcmVkKCk7XHJcbiAgICBpZiAobG9hZGVkKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lc3NhZ2UnKS5jbGFzc05hbWUgPSBcImhpZGVcIjtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXV0aCcpLmNsYXNzTmFtZSA9IFwiaGlkZVwiO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKS5jbGFzc05hbWUgPSBcInNob3cgY2VudGVyZWRcIjtcclxuICAgICAgICBtYWluKCk7IC8vIFN0YXJ0IHRoZSBjeWNsZVxyXG4gICAgICAgIGlucHV0Lmxpc3RlbmVyKCk7IC8vIEJlZ2luIG1vdmVtZW50IGxpc3RlbmVyc1xyXG4gICAgICAgIGlucHV0LmNsaWNrTGlzdGVuZXIoKTtcclxuICAgICAgfSwgMTAwMCk7XHJcbiAgICAgIHJldHVybjsgLy8gRG8gbm90IGV4ZWN1dGUgdGhlIHJlc3Qgb2YgdGhlIGZ1bmN0aW9uLlxyXG4gICAgfVxyXG4gICAgYXR0ZW1wdHMrKztcclxuICAgIGlmIChhdHRlbXB0cyA8IDEwKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICBsb2FkTWFwKGF0dGVtcHRzKTtcclxuICAgICAgfSwgMTAwKTtcclxuICAgICAgcmV0dXJuOyAvLyBEbyBub3QgZXhlY3V0ZSB0aGUgcmVzdCBvZiB0aGUgZnVuY3Rpb24uXHJcbiAgICB9XHJcblxyXG4gICAgbXNnLmlubmVySFRNTCA9IFwiRmFpbGVkIHRvIGdldCBkYXRhIGZyb20gdGhlIHNlcnZlci5cIjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNoZWNrRGF0YUFjcXVpcmVkKCkge1xyXG4gICAgY29uc3QgZ290X3VzZXIgPSBwbGF5ZXIudXNlcm5hbWUgIT09IFwiXCI7XHJcbiAgICBjb25zdCBnb3RfbWFwID0gcGxheWVyLmN1cnJlbnRfbWFwICE9PSB1bmRlZmluZWQgfHwgcGxheWVyLmN1cnJlbnRfbWFwLmxlbmd0aCA+IDA7XHJcbiAgICByZXR1cm4gZ290X3VzZXIgJiYgZ290X21hcDtcclxuICB9XHJcblxyXG4gIC8vIFJlY2lldmVzIGFuZCBwb3B1bGF0ZXMgaW5pdGlhbCBkYXRhLlxyXG4gIHNvY2tldC5vbignaW5pdF9kYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgW3BsYXllci51c2VybmFtZSwgW3BsYXllci5jeCwgcGxheWVyLmN5LCBwbGF5ZXIuZGlyXSxcclxuICAgICAgW3BsYXllci5jdXJyZW50X21hcCwgcGxheWVyLmN1cnJlbnRfbWFwX25hbWVdLFxyXG4gICAgICBwbGF5ZXIuc2hpcnQsIHBsYXllci5oYWlyLCBlbnRpdGllcywgc2V0dGluZ3Muc2V0dGluZ3MsXHJcbiAgICAgIFttYXAudGlsZV9idWZmZXIsIG1hcC5ib3JkZXJfc2l6ZV0sXHJcbiAgICAgIGFsbF91c2Vyc1xyXG4gICAgXSA9IGRhdGE7XHJcbiAgICBpZiAoZHJhdy5jYW52YXMud2lkdGggPCA0NTApIHtcclxuICAgICAgbWFwLmJvcmRlcl9zaXplID0gNDtcclxuICAgIH1cclxuICAgIGxvYWRNYXAoMCk7XHJcbiAgfSk7XHJcblxyXG4gIHNvY2tldC5vbignb2JqZWN0X2FjdGlvbicsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICBhY3Rpb25fZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIFJlY2lldmVzIGFuZCBwb3B1bGF0ZXMgbWFwIGRhdGEuXHJcbiAgc29ja2V0Lm9uKCdtYXBfZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICBbcGxheWVyLmN1cnJlbnRfbWFwLCBwbGF5ZXIuY3VycmVudF9tYXBfbmFtZV0gPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gIH0pO1xyXG5cclxuICBzb2NrZXQub24oJ2VudGl0eV9kYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIGVudGl0aWVzID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICB9KTtcclxuXHJcbiAgLy8gTW92ZXMgdGhlIGxvY2FsIHBsYXllclxyXG4gIHNvY2tldC5vbignbW92ZW1lbnRfc2VsZicsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgIGlmIChwbGF5ZXIudXNlcm5hbWUgPT0gZGF0YS51c2VybmFtZSlcclxuICAgICAgZG9Nb3ZlKGRhdGEpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBVcGRhdGVzIHNwZWNpZmljIHBsYXllcidzIGRhdGFcclxuICBzb2NrZXQub24oJ3VwZGF0ZV9wbGF5ZXInLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICBpZiAoZGF0YS51c2VybmFtZSA9PSBwbGF5ZXIudXNlcm5hbWUpIHtcclxuICAgICAgcGxheWVyLnNoaXJ0ID0gZGF0YS5zaGlydDtcclxuICAgICAgcGxheWVyLmhhaXIgPSBkYXRhLmhhaXI7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgYWxsX3VzZXJzW2RhdGEudXNlcm5hbWVdID0gZGF0YTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgLy8gUmVtb3ZlIHBsYXllciBmcm9tIHVzZXJzIGRhdGFcclxuICBzb2NrZXQub24oJ3JlbW92ZV91c2VyJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgaWYgKGRhdGEudXNlcm5hbWUpIHtcclxuICAgICAgZGVsZXRlIGFsbF91c2Vyc1tkYXRhLnVzZXJuYW1lXTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgc29ja2V0Lm9uKCdmYWlsdXJlJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIGNvbnNvbGUubG9nKCdVbnN5bmNocm9uaXplZC4nKTtcclxuICB9KTtcclxufSkoKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n')}]);