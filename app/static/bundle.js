!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var c=F[U]={i:U,l:!1,exports:{}};return Q[U].call(c.exports,c,c.exports,B),c.l=!0,c.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var c in Q)B.d(U,c,function(F){return Q[F]}.bind(null,c));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./js/player.js\n// player.js\n// Contains details and some logic\n// surrounding the local player.\nlet player_username = ""; // character start (0,0)\n\nlet cx = 0;\nlet cy = 0;\nlet dir = 0;\nlet current_map = [];\nlet current_map_name = "";\nlet player_shirt = 0;\n// CONCATENATED MODULE: ./js/map.js\n// map.js\n// Handles map manipulation logic.\n\n\nlet border_size = 0; // How many tiles from edge to player\n\nlet tile_buffer = 0; // Tile Buffer: How large tiles are\n\nfunction getTile(x_, y_) {\n  let click_x = Math.floor(x_ / 30);\n  let click_y = Math.floor(y_ / 30);\n  let tile_x = -1;\n  let tile_y = -1;\n\n  if (border_size > click_y) {\n    tile_y = cy - (border_size - click_y);\n  } else {\n    tile_y = cy + (click_y - border_size);\n  }\n\n  if (border_size > click_x) {\n    tile_x = cx - (border_size - click_x);\n  } else {\n    tile_x = cx + (click_x - border_size);\n  }\n\n  return current_map[tile_y][tile_x];\n} // Check if the tile at (x_, y_) has an object.\n\nfunction containsObject(x_, y_) {\n  if (Array.isArray(current_map[y_][x_])) {\n    if (entities[current_map[y_][x_][1]].type == "object") {\n      return true;\n    }\n  }\n\n  return false;\n}\n// CONCATENATED MODULE: ./js/settings.js\n// settings.js\n\n\n\nlet settings = {\n  player_names: true,\n  coordinates: false\n};\nfunction handleClick(click_x, click_y, canvas_width, canvas_height) {\n  const quarter_width = canvas_width / 4 - 20; // Show player names\n\n  if (polygon_click_test(4, [quarter_width, quarter_width * 3, quarter_width * 3, quarter_width], // x values\n  [50, 50, 72, 72],\n  /* y values */\n  click_x, click_y)) {\n    settings.player_names = !settings.player_names;\n    sendSettings();\n    return true;\n  } // Show current coordinates\n  else if (polygon_click_test(4, [quarter_width, quarter_width * 3, quarter_width * 3, quarter_width], // x values\n    [73, 73, 95, 95],\n    /* y values */\n    click_x, click_y)) {\n      settings.coordinates = !settings.coordinates;\n      sendSettings();\n      return true;\n    }\n\n  return false;\n}\n\nfunction sendSettings() {\n  socket.emit(\'settings\', JSON.stringify({\n    \'username\': player_username,\n    \'settings\': settings\n  }));\n}\n// CONCATENATED MODULE: ./js/input.js\n// input.js\n// Handles user input.\n\n\n\n\n\nlet last_click_x = -1;\nlet last_click_y = -1;\n\nfunction sendAction(e) {\n  if (![32, 37, 38, 39, 40, 65, 68, 69, 83, 87].includes(e.keyCode)) return;\n  e.preventDefault();\n\n  if (e.keyCode == 32) {\n    // Spacebar\n    console.log("Eventually we will implement the spacebar for interacting" + " with items below your character.");\n  }\n\n  socket.emit(\'json\', JSON.stringify({\n    \'username\': player_username,\n    \'action\': e.keyCode\n  }));\n}\n\nfunction determineLeftClick(click_x, click_y) {\n  let canvas_width = draw_canvas.width - 60;\n  let canvas_height = draw_canvas.height - 20;\n  const mid_width = Math.floor(canvas_width / 2);\n  const mid_height = Math.floor(canvas_height / 2);\n  const mid_offset = Math.floor(tile_buffer / 2);\n  const mid_low = mid_width - mid_offset;\n  const mid_high = mid_width + mid_offset;\n  resetExamine(); // We divide this into "paged" checking\n  // Return if we find a matching click, to avoid multiple\n  // executions.\n  // Settings scope\n\n  if (overlay == OVERLAYS.Settings) {\n    // Check if a setting is clicked. If so, send data to server.\n    if (handleClick(click_x, click_y, canvas_width, canvas_height)) {\n      return;\n    }\n  } // Inventory scope\n  else if (overlay == OVERLAYS.Inventory) {} // Check for inventory interaction here.\n    // Map scope\n    else if (overlay == OVERLAYS.None) {\n        if (clickUnderTile(click_x, click_y, mid_low, mid_high)) {\n          return;\n        }\n\n        if (clickAdjacentTile(click_x, click_y, mid_low, mid_high)) {\n          return;\n        }\n\n        if (clickFarTile(click_x, click_y, canvas_width, canvas_height, mid_width, mid_height)) {\n          return;\n        }\n      } // General scope\n\n\n  if (checkMenuIconClicked(click_x, click_y, canvas_width)) {\n    return;\n  }\n}\n\nfunction checkMenuIconClicked(click_x, click_y, canvas_width) {\n  // Click on settings menu icon\n  if (polygon_click_test(4, [canvas_width, canvas.width, canvas.width, canvas_width], // x values\n  [0, 0, 60, 60],\n  /* y values */\n  click_x, click_y)) {\n    overlay = overlay != OVERLAYS.Settings ? OVERLAYS.Settings : OVERLAYS.None;\n  } // Click help icon\n  else if (polygon_click_test(4, [canvas_width, canvas.width, canvas.width, canvas_width], // x values\n    [60, 60, 120, 120],\n    /* y values */\n    click_x, click_y)) {\n      overlay = overlay != OVERLAYS.Help ? OVERLAYS.Help : OVERLAYS.None;\n    } // Click inventory icon\n    else if (polygon_click_test(4, [canvas_width, canvas.width, canvas.width, canvas_width], // x values\n      [60, 60, 120, 120],\n      /* y values */\n      click_x, click_y)) {\n        overlay = overlay != OVERLAYS.Inventory ? OVERLAYS.Inventory : OVERLAYS.None;\n      }\n}\n\nfunction clickUnderTile(click_x, click_y, mid_low, mid_high) {\n  // Click on middle square (where player is standing)\n  if (polygon_click_test(4, [mid_low, mid_high, mid_high, mid_low], // x values\n  [mid_low, mid_low, mid_high, mid_high], // y values\n  click_x, click_y)) {\n    sendAction({\n      \'keyCode\': 32,\n      \'preventDefault\': function preventDefault() {}\n    }); // Spacebar\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction clickAdjacentTile(click_x, click_y, mid_low, mid_high) {\n  // Click on square directly above player location.\n  if (polygon_click_test(4, [mid_low, mid_high, mid_high, mid_low], // x values\n  [mid_low - tile_buffer, mid_low - tile_buffer, mid_low, mid_low], // y values\n  click_x, click_y)) {\n    if (dir == 1 && containsObject(cx, cy - 1)) {\n      sendAction({\n        \'keyCode\': 69,\n        \'preventDefault\': function preventDefault() {}\n      }); // E\n    } else {\n      sendAction({\n        \'keyCode\': 38,\n        \'preventDefault\': function preventDefault() {}\n      }); // Up\n    }\n\n    return true;\n  } // Click on square one below player location.\n  else if (polygon_click_test(4, [mid_low, mid_low, mid_high, mid_high], // x values\n    [mid_high, mid_high + tile_buffer, mid_high + tile_buffer, mid_high], // y values\n    click_x, click_y)) {\n      if (dir == 0 && containsObject(cx, cy + 1)) {\n        sendAction({\n          \'keyCode\': 69,\n          \'preventDefault\': function preventDefault() {}\n        }); // E\n      } else {\n        sendAction({\n          \'keyCode\': 40,\n          \'preventDefault\': function preventDefault() {}\n        }); // Up\n      }\n\n      return true;\n    } // Click on square directly left player location.\n    else if (polygon_click_test(4, [mid_low - tile_buffer, mid_low, mid_low, mid_low - tile_buffer], // x values\n      [mid_low, mid_low, mid_high, mid_high], // y values\n      click_x, click_y)) {\n        if (dir == 3 && containsObject(cx - 1, cy)) {\n          sendAction({\n            \'keyCode\': 69,\n            \'preventDefault\': function preventDefault() {}\n          }); // E\n        } else {\n          sendAction({\n            \'keyCode\': 37,\n            \'preventDefault\': function preventDefault() {}\n          }); // Up\n        }\n\n        return true;\n      } // Click on square directly right player location.\n      else if (polygon_click_test(4, [mid_high, mid_high + tile_buffer, mid_high + tile_buffer, mid_high], // x values\n        [mid_low, mid_low, mid_high, mid_high], // y values\n        click_x, click_y)) {\n          if (dir == 2 && containsObject(cx + 1, cy)) {\n            sendAction({\n              \'keyCode\': 69,\n              \'preventDefault\': function preventDefault() {}\n            }); // E\n          } else {\n            sendAction({\n              \'keyCode\': 39,\n              \'preventDefault\': function preventDefault() {}\n            }); // Up\n          }\n\n          return true;\n        }\n\n  return false;\n}\n\nfunction clickFarTile(click_x, click_y, canvas_width, canvas_height, mid_width, mid_height) {\n  /* Movement */\n  if (polygon_click_test(3, [0, mid_width, canvas_width], [0, mid_height, 0], click_x, click_y)) {\n    // Up\n    sendAction({\n      \'keyCode\': 38,\n      \'preventDefault\': function preventDefault() {}\n    });\n    return true;\n  } else if (polygon_click_test(3, [0, mid_width, canvas_width], [canvas_height, mid_height, canvas_height], click_x, click_y)) {\n    // Down\n    sendAction({\n      \'keyCode\': 40,\n      \'preventDefault\': function preventDefault() {}\n    });\n    return true;\n  } else if (polygon_click_test(3, [0, mid_width, 0], [0, mid_height, canvas_height], click_x, click_y)) {\n    // Left\n    sendAction({\n      \'keyCode\': 37,\n      \'preventDefault\': function preventDefault() {}\n    });\n    return true;\n  } else if (polygon_click_test(3, [canvas_width, mid_width, canvas_width], [0, mid_height, canvas_height], click_x, click_y)) {\n    // Right\n    sendAction({\n      \'keyCode\': 39,\n      \'preventDefault\': function preventDefault() {}\n    });\n    return true;\n  }\n\n  return false;\n} // polygon_click_test by Wm. Randolph Franklin\n// int list(int) list(int) int int -> bool\n// Consumes the number of vertices, along with each vertex coordinate,\n// as a list of x coordinates and a second list of y coordinates.\n// Tests against clicked coordinates to determine whether the\n// click was within the polygon formed by said vertices.\n\n\nfunction polygon_click_test(nvert, vertx, verty, testx, testy) {\n  let i,\n      j,\n      c = false;\n\n  for (i = 0, j = nvert - 1; i < nvert; j = i++) {\n    if (verty[i] > testy != verty[j] > testy && testx < (vertx[j] - vertx[i]) * (testy - verty[i]) / (verty[j] - verty[i]) + vertx[i]) {\n      c = !c;\n    }\n  }\n\n  return c;\n}\n\nfunction setTouchCoords(e) {\n  e.preventDefault();\n  last_click_x = e.touches[0].clientX - draw_canvas.getBoundingClientRect().left;\n  last_click_y = e.touches[0].clientY - draw_canvas.getBoundingClientRect().top;\n}\n\nfunction getClickCoords(e) {\n  e.preventDefault();\n  const click_x = e.offsetX;\n  const click_y = e.offsetY;\n\n  if (e.button == 2) {\n    last_click_x = click_x;\n    last_click_y = click_y;\n    return;\n  }\n\n  determineLeftClick(click_x, click_y);\n}\n\nfunction getTouchCoords(e) {\n  e.preventDefault();\n\n  if (last_click_x > -1 || last_click_y > -1) {\n    return;\n  }\n\n  const click_x = e.touches[0].clientX - draw_canvas.getBoundingClientRect().left;\n  const click_y = e.touches[0].clientY - draw_canvas.getBoundingClientRect().top;\n  determineLeftClick(click_x, click_y);\n}\n\nfunction setContextMenu(e) {\n  e.preventDefault();\n  let tile = getTile(last_click_x, last_click_y);\n\n  if (Array.isArray(tile)) {\n    let object = entities[tile[1]];\n\n    if (object.type == "object") {\n      examine = object.examine;\n    }\n  }\n}\n\nfunction handleMouseMovement(e) {\n  e.preventDefault();\n  let mouse_x = e.offsetX;\n  let mouse_y = e.offsetY; // Mouse off right-click menu closes it (+- 5px)\n\n  if (!polygon_click_test(4, [examine_menu_vertices[0][0], examine_menu_vertices[1][0], examine_menu_vertices[2][0], examine_menu_vertices[3][0]], [examine_menu_vertices[0][1], examine_menu_vertices[1][1], examine_menu_vertices[2][1], examine_menu_vertices[3][1]], mouse_x, mouse_y)) {\n    resetExamine();\n  } // Mouse over object shows text in corner\n\n\n  let tile = getTile(mouse_x, mouse_y);\n\n  if (Array.isArray(tile)) {\n    let object = entities[tile[1]];\n\n    if (object.type == "object" || object.type == "item") {\n      object_name = object.name;\n    }\n  } else {\n    object_name = "";\n  }\n}\n\nfunction listener() {\n  document.addEventListener(\'keydown\', sendAction);\n}\nfunction clickListener() {\n  draw_canvas.addEventListener(\'mousedown\', getClickCoords);\n  draw_canvas.addEventListener(\'touchstart\', setTouchCoords, {\n    passive: false\n  });\n  draw_canvas.addEventListener(\'touchend\', getTouchCoords, {\n    passive: false\n  });\n  draw_canvas.addEventListener(\'contextmenu\', setContextMenu);\n  draw_canvas.addEventListener(\'mousemove\', handleMouseMovement);\n}\n// CONCATENATED MODULE: ./js/draw.js\n// draw.js\n\n\n\n\n\nconst draw_canvas = document.getElementById(\'canvas\');\nconst ctx = draw_canvas.getContext(\'2d\'); // Rows of 10 30x30 tiles.\n\nconst tilesheet = new Image();\ntilesheet.src = "static/tilesheet.png";\nconst charsheet = new Image();\ncharsheet.src = "static/charsheet.png";\nconst optionsheet = new Image();\noptionsheet.src = "static/optionsheet.png";\nlet examine_menu_vertices = [[0, 0], [0, 0], [0, 0], [0, 0]];\nconst OVERLAYS = {\n  None: 0,\n  Settings: 1,\n  Help: 2,\n  Inventory: 7\n};\nlet overlay = OVERLAYS.None; // Small windows means smaller canvas.\n\nif (window.innerWidth < 600 || window.innerHeight < 600) {\n  draw_canvas.width = 330;\n  draw_canvas.height = 290;\n}\n/* DRAWING */\n\n\nfunction draw() {\n  const canvas_width = draw_canvas.width - 60;\n  const canvas_height = draw_canvas.height - 20;\n  ctx.clearRect(0, 0, draw_canvas.width, draw_canvas.height);\n\n  if (overlay == OVERLAYS.Settings) {\n    drawSettings(canvas_width, canvas_height);\n  } else if (overlay == OVERLAYS.Help) {\n    drawHelp(canvas_width, canvas_height);\n  } else {\n    drawTiles(canvas_width, canvas_height);\n    drawOthers(); // Fill the local character tile\n\n    if (charsheet.complete) {\n      drawPlayer(border_size, border_size, dir, player_username, player_shirt);\n    } else {\n      charsheet.addEventListener(\'load\', drawPlayer);\n    }\n\n    if (object_name.length > 0) {\n      drawObjectName();\n    }\n\n    if (examine.length > 0) {\n      drawRightClickExamine();\n    }\n  }\n\n  if (settings.coordinates) {\n    drawCoordinates(canvas_width, canvas_height);\n  }\n\n  drawMapName(canvas_height);\n  drawSidePanel();\n}\n\nfunction drawTiles(canvas_width, canvas_height) {\n  for (let x = 0; x < canvas_width; x += tile_buffer) {\n    const curr_x = x / tile_buffer + (cx - border_size);\n\n    for (let y = 0; y < canvas_height; y += tile_buffer) {\n      const tile = current_map[y / tile_buffer + (cy - border_size)][curr_x];\n\n      if (Array.isArray(tile)) {\n        for (const def in tile) {\n          drawTile(tile[def], x, y);\n        }\n      } else {\n        drawTile(tile, x, y);\n      }\n    }\n  }\n}\n\nfunction drawTile(tile, x, y) {\n  ctx.beginPath();\n\n  if (tilesheet.complete) {\n    drawImage(tile, x, y);\n  } else {\n    tilesheet.load = drawImage.bind(tile, x, y);\n  }\n\n  ctx.moveTo(x, y);\n  ctx.lineTo(x + tile_buffer, y);\n  ctx.moveTo(x, y);\n  ctx.lineTo(x, y + tile_buffer);\n  ctx.stroke();\n  ctx.closePath();\n}\n\nfunction drawPlayer(x_, y_, direction, username, shirt) {\n  ctx.strokeStyle = "transparent";\n  ctx.drawImage(charsheet, direction * tile_buffer, shirt * tile_buffer, tile_buffer, tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n\n  if (settings.player_names) {\n    ctx.fillStyle = "black";\n    ctx.font = "10pt Arial";\n    ctx.textBaseline = "middle";\n    ctx.textAlign = "center";\n    ctx.fillText(username, x_ * tile_buffer + tile_buffer / 2, y_ * tile_buffer - 2);\n  }\n}\n\nfunction drawImage(tile, x, y) {\n  ctx.strokeStyle = "transparent";\n  ctx.drawImage(tilesheet, tile % 10 * tile_buffer, Math.floor(tile / 10) * tile_buffer, tile_buffer, tile_buffer, x, y, tile_buffer, tile_buffer);\n}\n\nfunction drawOthers() {\n  for (const u in all_users) {\n    if (u != player_username) {\n      const ucx = all_users[u].cx;\n      const ucy = all_users[u].cy;\n      const x = ucx - cx;\n      const y = ucy - cy;\n\n      if (x >= -border_size && x <= border_size && y >= -border_size && y <= border_size) {\n        // Fill the character tile\n        drawPlayer(x + border_size, y + border_size, all_users[u].direction, all_users[u].username, all_users[u].shirt);\n      }\n    }\n  }\n}\n\nfunction drawSidePanel() {\n  ctx.strokeStyle = "transparent";\n  ctx.drawImage(optionsheet, 0, 0, 60, 450, draw_canvas.width - 60, 0, 60, 450);\n}\n\nfunction drawRightClickExamine() {\n  let box_width = ctx.measureText(examine).width + 10;\n  let box_height = 22;\n  ctx.fillStyle = "black";\n  ctx.fillRect(last_click_x, last_click_y, box_width, box_height);\n  examine_menu_vertices = [[last_click_x - 5, last_click_y - 5], [last_click_x + box_width + 5, last_click_y - 5], [last_click_x + box_width + 5, last_click_y + box_height + 5], [last_click_x - 5, last_click_y + box_height + 5]];\n  ctx.fillStyle = "white";\n  ctx.textAlign = "center";\n  ctx.fillText(examine, last_click_x + Math.floor(box_width / 2), last_click_y + Math.floor(box_height / 2));\n}\n\nfunction drawObjectName() {\n  ctx.fillStyle = "white";\n  ctx.textAlign = "end";\n  ctx.fillText(object_name, draw_canvas.width - 65, 10);\n}\n\nfunction drawCoordinates(canvas_width, canvas_height) {\n  // Fill the position\n  ctx.fillStyle = "white";\n  ctx.textAlign = "end";\n  ctx.fillRect(0, canvas_height, canvas_width, 20);\n  ctx.font = "12pt Arial";\n  ctx.fillStyle = "black";\n  ctx.fillText("(" + cx + ", " + cy + ")", canvas_width - 5, canvas_height + 10);\n}\n\nfunction drawOverlay(canvas_width, canvas_height) {\n  ctx.fillStyle = "white";\n  ctx.fillRect(0, 0, canvas_width, canvas_height);\n}\n\nfunction drawSettings(canvas_width, canvas_height) {\n  drawOverlay(canvas_width, canvas_height);\n  ctx.fillStyle = "black";\n  ctx.textAlign = "start";\n  ctx.font = "bold 24pt Arial";\n  ctx.fillText("Settings", canvas_width / 4 - 25, 40);\n  ctx.font = "12pt Arial"; // Show player names\n\n  ctx.fillText("Show Player Names: " + (settings.player_names ? "On" : "Off"), canvas_width / 4 - 24, 70); // Show current coordinates\n\n  ctx.fillText("Show Coordinates: " + (settings.coordinates ? "On" : "Off"), canvas_width / 4 - 24, 95);\n}\n\nfunction drawHelp(canvas_width, canvas_height) {\n  drawOverlay(canvas_width, canvas_height);\n  ctx.fillStyle = "black";\n  ctx.textAlign = "start";\n  ctx.font = "bold 24pt Arial";\n  ctx.fillText("Helpful Hints", canvas_width / 4 - 25, 40);\n  ctx.font = "12pt Arial";\n  ctx.fillText("Movement: WASD, Arrows, or click", canvas_width / 4 - 24, 70);\n  ctx.fillText("Examine: Q or Right-click", canvas_width / 4 - 24, 95);\n  ctx.fillText("Use Object: E or Left-click", canvas_width / 4 - 24, 120);\n}\n\nfunction drawMapName(canvas_height) {\n  ctx.fillStyle = "black";\n  ctx.textAlign = "start";\n  ctx.font = "bold 12pt Arial";\n  ctx.fillText(current_map_name, 5, canvas_height + 11);\n}\n// CONCATENATED MODULE: ./js/game.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "socket", function() { return socket; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "all_users", function() { return all_users; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "entities", function() { return entities; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "action_data", function() { return action_data; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "examine", function() { return examine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resetExamine", function() { return resetExamine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "object_name", function() { return object_name; });\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n// game.js\n// import \'@babel/polyfill\';\n\n\n\n\n\n/* Initializing */\n\nconst socket = io.connect(\'//\' + document.domain + \':\' + location.port);\nlet all_users = {};\nlet entities = [];\nlet action_data = {};\nlet examine = "";\nfunction resetExamine() {\n  examine = "";\n  examine_menu_vertices = [[0, 0], [0, 0], [0, 0], [0, 0]];\n}\nlet object_name = "";\n/* Movement */\n\nfunction doMove(movement) {\n  cx = movement.cx;\n  cy = movement.cy;\n  dir = movement.direction;\n}\n/* Main game loop and socket listeners */\n\n\nlet last;\n\n(function () {\n  function main(timestamp) {\n    if (!last) {\n      last = timestamp;\n      draw();\n    } else {\n      if (timestamp - last > 100) {\n        draw();\n      }\n    }\n\n    requestAnimationFrame(main);\n  }\n\n  socket.on(\'connect\', function () {\n    const form = document.getElementById("authentication");\n    form.addEventListener(\'submit\', function (e) {\n      e.preventDefault();\n      socket.emit(\'authentication\', JSON.stringify({\n        \'username\': document.getElementById(\'username\').value\n      }));\n    });\n  });\n  socket.on(\'authenticated\', function (data) {\n    data = JSON.parse(data);\n    const msg = document.getElementById("message");\n\n    if (data.success) {\n      msg.innerHTML = "Authenticated successfully!";\n      setTimeout(function () {\n        msg.innerHTML = "Loading data...";\n        socket.emit(\'retrieve_init_data\', JSON.stringify({\n          \'username\': data.username\n        }));\n      }, 600);\n    } else {\n      msg.innerHTML = "Authentication failed. Please try again.";\n    }\n  });\n\n  function loadMap(attempts) {\n    const loaded = checkDataAcquired();\n\n    if (loaded) {\n      setTimeout(function () {\n        document.getElementById(\'message\').className = "hide";\n        document.getElementById(\'auth\').className = "hide";\n        document.getElementById(\'canvas\').className = "show centered";\n        main(); // Start the cycle\n\n        listener(); // Begin movement listeners\n\n        clickListener();\n      }, 1000);\n      return; // Do not execute the rest of the function.\n    }\n\n    attempts++;\n\n    if (attempts < 10) {\n      setTimeout(function () {\n        loadMap(attempts);\n      }, 100);\n      return; // Do not execute the rest of the function.\n    }\n\n    msg.innerHTML = "Failed to get data from the server.";\n  }\n\n  function checkDataAcquired() {\n    const got_user = player_username !== "";\n    const got_map = current_map !== undefined || current_map.length > 0;\n    return got_user && got_map;\n  } // Recieves and populates initial data.\n\n\n  socket.on(\'init_data\', function (data) {\n    data = JSON.parse(data);\n    var _data = data;\n\n    var _data2 = _slicedToArray(_data, 7);\n\n    player_username = _data2[0];\n\n    var _data2$ = _slicedToArray(_data2[1], 3);\n\n    cx = _data2$[0];\n    cy = _data2$[1];\n    dir = _data2$[2];\n\n    var _data2$2 = _slicedToArray(_data2[2], 2);\n\n    current_map = _data2$2[0];\n    current_map_name = _data2$2[1];\n    player_shirt = _data2[3];\n    entities = _data2[4];\n    settings = _data2[5];\n\n    var _data2$3 = _slicedToArray(_data2[6], 2);\n\n    tile_buffer = _data2$3[0];\n    border_size = _data2$3[1];\n\n    if (draw_canvas.width < 450) {\n      border_size = 4;\n    }\n\n    loadMap(0);\n  });\n  socket.on(\'object_action\', function (data) {\n    action_data = JSON.parse(data);\n  }); // Recieves and populates map data.\n\n  socket.on(\'map_data\', function (data) {\n    var _JSON$parse = JSON.parse(data);\n\n    var _JSON$parse2 = _slicedToArray(_JSON$parse, 2);\n\n    current_map = _JSON$parse2[0];\n    current_map_name = _JSON$parse2[1];\n  });\n  socket.on(\'entity_data\', function (data) {\n    entities = JSON.parse(data);\n  }); // Moves the local player\n\n  socket.on(\'movement_self\', function (data) {\n    data = JSON.parse(data);\n    if (player_username == data.username) doMove(data);\n  }); // Updates all players\n\n  socket.on(\'update_all\', function (data) {\n    all_users = JSON.parse(data);\n    player_shirt = player_username ? all_users[player_username].shirt : 0;\n  });\n  socket.on(\'failure\', function (data) {\n    console.log(\'Unsynchronized.\');\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);