!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var s=F[U]={i:U,l:!1,exports:{}};return Q[U].call(s.exports,s,s.exports,B),s.l=!0,s.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var s in Q)B.d(U,s,function(F){return Q[F]}.bind(null,s));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./js/draw.js\n// draw.js\n\nconst canvas = document.getElementById(\'canvas\');\ncanvas.addEventListener("contextmenu", function (e) {\n  e.preventDefault();\n}, false);\nconst ctx = canvas.getContext(\'2d\'); // Rows of 10 30x30 tiles.\n\nconst tilesheet = new Image();\ntilesheet.src = "static/tilesheet.png";\nconst charsheet = new Image();\ncharsheet.src = "static/charsheet.png";\nconst optionsheet = new Image();\noptionsheet.src = "static/optionsheet.png"; // Small windows means smaller canvas.\n\nif (window.innerWidth < 500) {\n  canvas.width = 330;\n  canvas.height = 290;\n}\n/* DRAWING */\n\n\nfunction draw() {\n  const canvas_width = canvas.width - 60;\n  const canvas_height = canvas.height - 20;\n  ctx.clearRect(0, 0, canvas_width, canvas_height);\n\n  for (let x = 0; x < canvas_width; x += tile_buffer) {\n    const curr_x = x / tile_buffer + (cx - sx);\n\n    for (let y = 0; y < canvas_height; y += tile_buffer) {\n      const tile = map[y / tile_buffer + (cy - sy)][curr_x];\n\n      if (Array.isArray(tile)) {\n        for (const def in tile) {\n          drawTile(tile[def], x, y);\n        }\n      } else {\n        drawTile(tile, x, y);\n      }\n    }\n  }\n\n  drawSidePanel();\n  drawOthers(); // Fill the local character tile\n\n  if (charsheet.complete) {\n    drawPlayer(sx, sy, dir, user);\n  } else {\n    charsheet.addEventListener(\'load\', drawPlayer);\n  } // Fill the position\n\n\n  ctx.fillStyle = "white";\n  ctx.strokeStyle = "black";\n  ctx.fillRect(0, canvas_height, canvas_width, 20);\n  ctx.strokeText("(" + cx + ", " + cy + ")", canvas_width - 40, canvas_height + 10);\n}\n\nfunction drawTile(tile, x, y) {\n  ctx.beginPath();\n\n  if (tilesheet.complete) {\n    drawImage(tile, x, y);\n  } else {\n    tilesheet.load = drawImage.bind(tile, x, y);\n  }\n\n  ctx.moveTo(x, y);\n  ctx.lineTo(x + tile_buffer, y);\n  ctx.moveTo(x, y);\n  ctx.lineTo(x, y + tile_buffer);\n  ctx.stroke();\n  ctx.closePath();\n}\n\nfunction drawPlayer(x_, y_, direction, username) {\n  ctx.strokeStyle = "transparent";\n  ctx.drawImage(charsheet, direction * tile_buffer, 0, tile_buffer, tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n  ctx.fillStyle = "black";\n  ctx.font = "10pt Arial";\n  ctx.textBaseline = "middle";\n  ctx.textAlign = "center";\n  ctx.fillText(username, x_ * tile_buffer + tile_buffer / 2, y_ * tile_buffer - 2);\n}\n\nfunction drawImage(tile, x, y) {\n  ctx.strokeStyle = "transparent";\n  ctx.drawImage(tilesheet, tile % 10 * tile_buffer, Math.floor(tile / 10) * tile_buffer, tile_buffer, tile_buffer, x, y, tile_buffer, tile_buffer);\n}\n\nfunction drawOthers() {\n  for (const u in all_users) {\n    if (u != user) {\n      const ucx = all_users[u].cx;\n      const ucy = all_users[u].cy;\n      const x = ucx - cx;\n      const y = ucy - cy;\n\n      if (x >= -sx && x <= sx && y >= -sy && y <= sy) {\n        // Fill the character tile\n        drawPlayer(x + sx, y + sy, all_users[u].direction, all_users[u].username);\n      }\n    }\n  }\n}\n\nfunction drawSidePanel() {\n  ctx.strokeStyle = "transparent";\n  ctx.drawImage(optionsheet, 0, 0, 60, 450, canvas.width - 60, 0, 60, 450);\n}\n// CONCATENATED MODULE: ./js/game.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "user", function() { return user; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "all_users", function() { return all_users; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cx", function() { return cx; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cy", function() { return cy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dir", function() { return dir; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sx", function() { return sx; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sy", function() { return sy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function() { return map; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "action_data", function() { return action_data; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tile_buffer", function() { return tile_buffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "listener", function() { return listener; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clickListener", function() { return clickListener; });\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n// game.js\n// import \'@babel/polyfill\';\n\n/* Initializing */\n\nconst socket = io.connect(\'//\' + document.domain + \':\' + location.port);\nlet user = "";\nlet all_users = {}; // character start (0,0)\n\nlet cx = 0;\nlet cy = 0;\nlet dir = 0;\nlet sx = 0;\nlet sy = 0;\n/* MAP OPTIONS */\n\nlet map = [];\nlet action_data = {};\nlet tile_buffer = 0; // Tile Buffer: How large tiles are\n\nfunction determineClick(click_x, click_y) {\n  const mid_offset = 15;\n  const mid_width = canvas.width / 2;\n  const mid_height = canvas.height / 2;\n  const mid_low = mid_width - mid_offset;\n  const mid_high = mid_width - mid_offset;\n\n  if (polygon_click_test(4, [mid_low, mid_high, mid_high, mid_low], // x values\n  [mid_low, mid_low, mid_high, mid_high], // y values\n  click_x, click_y)) {\n    sendAction({\n      \'keyCode\': 32,\n      \'preventDefault\': function preventDefault() {}\n    }); // Spacebar\n  } else if (polygon_click_test(3, [0, mid_width, canvas.width], [0, mid_height, 0], click_x, click_y)) {\n    sendAction({\n      \'keyCode\': 38,\n      \'preventDefault\': function preventDefault() {}\n    }); // Up\n  } else if (polygon_click_test(3, [0, mid_width, canvas.width], [canvas.height, mid_height, canvas.height], click_x, click_y)) {\n    sendAction({\n      \'keyCode\': 40,\n      \'preventDefault\': function preventDefault() {}\n    }); // Down\n  } else if (polygon_click_test(3, [0, mid_width, 0], [0, mid_height, canvas.height], click_x, click_y)) {\n    sendAction({\n      \'keyCode\': 37,\n      \'preventDefault\': function preventDefault() {}\n    }); // Left\n  } else if (polygon_click_test(3, [canvas.width, mid_width, canvas.width], [0, mid_height, canvas.height], click_x, click_y)) {\n    sendAction({\n      \'keyCode\': 39,\n      \'preventDefault\': function preventDefault() {}\n    }); // Right\n  }\n} // polygon_click_test by Wm. Randolph Franklin\n// int list(int) list(int) int int -> bool\n// Consumes the number of vertices, along with each vertex coordinate,\n// as a list of x coordinates and a second list of y coordinates.\n// Tests against clicked coordinates to determine whether the\n// click was within the polygon formed by said vertices.\n\n\nfunction polygon_click_test(nvert, vertx, verty, testx, testy) {\n  let i,\n      j,\n      c = false;\n\n  for (i = 0, j = nvert - 1; i < nvert; j = i++) {\n    if (verty[i] > testy != verty[j] > testy && testx < (vertx[j] - vertx[i]) * (testy - verty[i]) / (verty[j] - verty[i]) + vertx[i]) {\n      c = !c;\n    }\n  }\n\n  return c;\n}\n\nfunction getClickCoords(e) {\n  e.preventDefault();\n  const click_x = e.offsetX;\n  const click_y = e.offsetY;\n  determineClick(click_x, click_y);\n}\n\nfunction getTouchCoords(e) {\n  e.preventDefault();\n  const click_x = e.touches[0].clientX - canvas.getBoundingClientRect().left;\n  const click_y = e.touches[0].clientY - canvas.getBoundingClientRect().top;\n  determineClick(click_x, click_y);\n}\n\nfunction listener() {\n  document.addEventListener(\'keydown\', sendAction);\n}\nfunction clickListener() {\n  canvas.addEventListener(\'mousedown\', getClickCoords);\n  canvas.addEventListener(\'touchstart\', getTouchCoords);\n  canvas.addEventListener(\'touchend\', function (e) {\n    e.preventDefault();\n  });\n}\n/* MOVEMENT */\n\nfunction sendAction(e) {\n  if (![32, 37, 38, 39, 40, 65, 68, 69, 83, 87].includes(e.keyCode)) return;\n  e.preventDefault();\n\n  if (e.keyCode == 32) {\n    // Spacebar\n    console.log("Eventually we will implement the spacebar for interacting" + " with items below your character.");\n  }\n\n  socket.emit(\'json\', JSON.stringify({\n    \'username\': user,\n    \'action\': e.keyCode\n  }));\n}\n\nfunction doMove(movement) {\n  cx = movement.cx;\n  cy = movement.cy;\n  dir = movement.direction;\n}\n\nlet last;\n\n(function () {\n  function main(timestamp) {\n    if (!last) {\n      last = timestamp;\n      draw();\n    } else {\n      if (timestamp - last > 100) {\n        draw();\n      }\n    }\n\n    requestAnimationFrame(main);\n  }\n\n  socket.on(\'connect\', function () {\n    const form = document.getElementById("authentication");\n    form.addEventListener(\'submit\', function (e) {\n      e.preventDefault();\n      socket.emit(\'authentication\', JSON.stringify({\n        \'username\': document.getElementById(\'username\').value\n      }));\n    });\n  });\n  socket.on(\'authenticated\', function (data) {\n    data = JSON.parse(data);\n    const msg = document.getElementById("message");\n\n    if (data.success) {\n      msg.innerHTML = "Authenticated successfully!";\n      setTimeout(function () {\n        msg.innerHTML = "Loading data...";\n        socket.emit(\'retrieve_init_data\', JSON.stringify({\n          \'username\': data.username\n        }));\n      }, 600);\n    } else {\n      msg.innerHTML = "Authentication failed. Please try again.";\n    }\n  });\n\n  function loadMap(attempts) {\n    const loaded = checkDataAcquired();\n    const msg = document.getElementById("message");\n\n    if (loaded) {\n      setTimeout(function () {\n        document.getElementById(\'auth\').className = "hide";\n        document.querySelector(\'main\').className = "show";\n        msg.innerHTML = "Welcome to the world.";\n        main(); // Start the cycle\n\n        listener(); // Begin movement listeners\n\n        clickListener();\n      }, 1000);\n      return; // Do not execute the rest of the function.\n    }\n\n    attempts++;\n\n    if (attempts < 10) {\n      setTimeout(function () {\n        loadMap(attempts);\n      }, 100);\n      return; // Do not execute the rest of the function.\n    }\n\n    msg.innerHTML = "Failed to get data from the server.";\n  }\n\n  function checkDataAcquired() {\n    const got_user = user !== "";\n    const got_map = map !== undefined || map.length > 0;\n    return got_user && got_map;\n  } // Recieves and populates initial data.\n\n\n  socket.on(\'init_data\', function (data) {\n    data = JSON.parse(data);\n    var _data = data;\n\n    var _data2 = _slicedToArray(_data, 4);\n\n    user = _data2[0];\n\n    var _data2$ = _slicedToArray(_data2[1], 3);\n\n    cx = _data2$[0];\n    cy = _data2$[1];\n    dir = _data2$[2];\n    map = _data2[2];\n\n    var _data2$2 = _slicedToArray(_data2[3], 3);\n\n    tile_buffer = _data2$2[0];\n    sx = _data2$2[1];\n    sy = _data2$2[2];\n\n    if (canvas.width < 450) {\n      sx = 4;\n      sy = 4;\n    }\n\n    loadMap(0);\n  });\n  socket.on(\'object_action\', function (data) {\n    action_data = JSON.parse(data);\n  }); // Recieves and populates map data.\n\n  socket.on(\'map_data\', function (data) {\n    data = JSON.parse(data);\n    map = data;\n  }); // Moves the local player\n\n  socket.on(\'movement_self\', function (data) {\n    data = JSON.parse(data);\n    if (user == data.username) doMove(data);\n  }); // Updates all players\n\n  socket.on(\'update_all\', function (data) {\n    all_users = JSON.parse(data);\n  });\n  socket.on(\'failure\', function (data) {\n    console.log(\'Unsynchronized.\');\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);