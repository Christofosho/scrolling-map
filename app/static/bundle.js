!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var c=F[U]={i:U,l:!1,exports:{}};return Q[U].call(c.exports,c,c.exports,B),c.l=!0,c.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var c in Q)B.d(U,c,function(F){return Q[F]}.bind(null,c));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\nvar player_namespaceObject = {};\n__webpack_require__.r(player_namespaceObject);\n__webpack_require__.d(player_namespaceObject, "username", function() { return username; });\n__webpack_require__.d(player_namespaceObject, "cx", function() { return cx; });\n__webpack_require__.d(player_namespaceObject, "cy", function() { return cy; });\n__webpack_require__.d(player_namespaceObject, "direction", function() { return direction; });\n__webpack_require__.d(player_namespaceObject, "current_map", function() { return current_map; });\n__webpack_require__.d(player_namespaceObject, "current_map_name", function() { return current_map_name; });\n__webpack_require__.d(player_namespaceObject, "shirt", function() { return shirt; });\n__webpack_require__.d(player_namespaceObject, "hair", function() { return hair; });\n__webpack_require__.d(player_namespaceObject, "skin", function() { return skin; });\n__webpack_require__.d(player_namespaceObject, "eyes", function() { return eyes; });\n__webpack_require__.d(player_namespaceObject, "pants", function() { return pants; });\n__webpack_require__.d(player_namespaceObject, "shoes", function() { return shoes; });\n__webpack_require__.d(player_namespaceObject, "hair_accessory", function() { return hair_accessory; });\n\n// CONCATENATED MODULE: ./js/player.js\n// player.js\n// Contains details and some logic\n// surrounding the local player.\nlet username = ""; // character start (0,0)\n\nlet cx = 0;\nlet cy = 0;\nlet direction = 0;\nlet current_map = [];\nlet current_map_name = "";\nlet shirt = 0;\nlet hair = 0;\nlet skin = 0;\nlet eyes = 0;\nlet pants = 0;\nlet shoes = 0;\nlet hair_accessory = 0;\n// CONCATENATED MODULE: ./js/map.js\n// map.js\n// Handles map manipulation logic.\n\n\nlet border_size = 0; // How many tiles from edge to player\n\nlet tile_buffer = 0; // Tile Buffer: How large tiles are\n\nfunction getTile(x_, y_) {\n  let click_x = Math.floor(x_ / 30);\n  let click_y = Math.floor(y_ / 30);\n  let tile_x = -1;\n  let tile_y = -1;\n\n  if (border_size > click_y) {\n    tile_y = cy - (border_size - click_y);\n  } else {\n    tile_y = cy + (click_y - border_size);\n  }\n\n  if (border_size > click_x) {\n    tile_x = cx - (border_size - click_x);\n  } else {\n    tile_x = cx + (click_x - border_size);\n  }\n\n  return current_map[tile_y][tile_x];\n} // Check if the tile at (x_, y_) has an object.\n\nfunction containsObject(x_, y_) {\n  if (Array.isArray(current_map[y_][x_])) {\n    if (entities[current_map[y_][x_][1]].type == "object") {\n      return true;\n    }\n  }\n\n  return false;\n}\n// CONCATENATED MODULE: ./js/settings.js\n// settings.js\n\n\n\nlet settings = {\n  player_names: true,\n  coordinates: false\n};\nfunction handleClick(click_x, click_y, canvas_width, canvas_height) {\n  const quarter_width = canvas_width / 4 - 20; // Show player names\n\n  if (polygon_click_test(4, [quarter_width, quarter_width * 3, quarter_width * 3, quarter_width], // x values\n  [50, 50, 72, 72],\n  /* y values */\n  click_x, click_y)) {\n    settings.player_names = !settings.player_names;\n    sendSettings();\n    return true;\n  } // Show current coordinates\n  else if (polygon_click_test(4, [quarter_width, quarter_width * 3, quarter_width * 3, quarter_width], // x values\n    [73, 73, 95, 95],\n    /* y values */\n    click_x, click_y)) {\n      settings.coordinates = !settings.coordinates;\n      sendSettings();\n      return true;\n    }\n\n  return false;\n}\n\nfunction sendSettings() {\n  socket.emit(\'settings\', JSON.stringify({\n    \'username\': username,\n    \'settings\': settings\n  }));\n}\n// CONCATENATED MODULE: ./js/input.js\n// input.js\n// Handles user input.\n\n\n\n\n\nlet last_click_x = -1;\nlet last_click_y = -1;\n\nfunction sendAction(e) {\n  if (![32, 37, 38, 39, 40, 65, 68, 69, 83, 87].includes(e.keyCode)) return;\n  e.preventDefault();\n\n  if (e.keyCode == 32) {\n    // Spacebar\n    console.log("Eventually we will implement the spacebar for interacting" + " with items below your character.");\n  }\n\n  socket.emit(\'json\', JSON.stringify({\n    \'username\': username,\n    \'action\': e.keyCode\n  }));\n}\n\nfunction determineLeftClick(click_x, click_y) {\n  let canvas_width = draw_canvas.width - 60;\n  let canvas_height = draw_canvas.height - 20;\n  const mid_width = Math.floor(canvas_width / 2);\n  const mid_height = Math.floor(canvas_height / 2);\n  const mid_offset = Math.floor(tile_buffer / 2);\n  const mid_low = mid_width - mid_offset;\n  const mid_high = mid_width + mid_offset;\n  resetExamine(); // We divide this into "paged" checking\n  // Return if we find a matching click, to avoid multiple\n  // executions.\n  // Settings scope\n\n  if (overlay == OVERLAYS.Settings) {\n    // Check if a setting is clicked. If so, send data to server.\n    if (handleClick(click_x, click_y, canvas_width, canvas_height)) {\n      return;\n    }\n  } // Message History Scope\n  else if (overlay == OVERLAYS.History) {} // Check for message history interaction.\n    // Inventory scope\n    else if (overlay == OVERLAYS.Inventory) {} // Check for inventory interaction.\n      // Map scope\n      else if (overlay == OVERLAYS.None) {\n          if (clickUnderTile(click_x, click_y, mid_low, mid_high)) {\n            return;\n          }\n\n          if (clickAdjacentTile(click_x, click_y, mid_low, mid_high)) {\n            return;\n          }\n\n          if (clickFarTile(click_x, click_y, canvas_width, canvas_height, mid_width, mid_height)) {\n            return;\n          }\n        } // General scope\n\n\n  if (checkMenuIconClicked(click_x, click_y, canvas_width)) {\n    return;\n  }\n}\n\nfunction checkMenuIconClicked(click_x, click_y, canvas_width) {\n  // Click on settings menu icon\n  if (polygon_click_test(4, [canvas_width, canvas.width, canvas.width, canvas_width], // x values\n  [0, 0, 59, 59],\n  /* y values */\n  click_x, click_y)) {\n    overlay = overlay != OVERLAYS.Settings ? OVERLAYS.Settings : OVERLAYS.None;\n  } // Click message history icon\n  else if (polygon_click_test(4, [canvas_width, canvas.width, canvas.width, canvas_width], // x values\n    [60, 60, 119, 119],\n    /* y values */\n    click_x, click_y)) {\n      overlay = overlay != OVERLAYS.Inventory ? OVERLAYS.Inventory : OVERLAYS.None;\n    } // Click inventory icon\n    else if (polygon_click_test(4, [canvas_width, canvas.width, canvas.width, canvas_width], // x values\n      [120, 120, 179, 179],\n      /* y values */\n      click_x, click_y)) {\n        overlay = overlay != OVERLAYS.History ? OVERLAYS.History : OVERLAYS.None;\n      } // Click logout icon\n      else if (polygon_click_test(4, [canvas_width, canvas.width, canvas.width, canvas_width], // x values\n        [canvas.height - 30, canvas.height - 30, canvas.height, canvas.height],\n        /* y values */\n        click_x, click_y)) {\n          socket.emit(\'logout\');\n        }\n}\n\nfunction clickUnderTile(click_x, click_y, mid_low, mid_high) {\n  // Click on middle square (where player is standing)\n  if (polygon_click_test(4, [mid_low, mid_high, mid_high, mid_low], // x values\n  [mid_low, mid_low, mid_high, mid_high], // y values\n  click_x, click_y)) {\n    sendAction({\n      \'keyCode\': 32,\n      \'preventDefault\': function preventDefault() {}\n    }); // Spacebar\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction clickAdjacentTile(click_x, click_y, mid_low, mid_high) {\n  // Click on square directly above player location.\n  if (polygon_click_test(4, [mid_low, mid_high, mid_high, mid_low], // x values\n  [mid_low - tile_buffer, mid_low - tile_buffer, mid_low, mid_low], // y values\n  click_x, click_y)) {\n    if (direction == 1 && containsObject(cx, cy - 1)) {\n      sendAction({\n        \'keyCode\': 69,\n        \'preventDefault\': function preventDefault() {}\n      }); // E\n    } else {\n      sendAction({\n        \'keyCode\': 38,\n        \'preventDefault\': function preventDefault() {}\n      }); // Up\n    }\n\n    return true;\n  } // Click on square one below player location.\n  else if (polygon_click_test(4, [mid_low, mid_low, mid_high, mid_high], // x values\n    [mid_high, mid_high + tile_buffer, mid_high + tile_buffer, mid_high], // y values\n    click_x, click_y)) {\n      if (direction == 0 && containsObject(cx, cy + 1)) {\n        sendAction({\n          \'keyCode\': 69,\n          \'preventDefault\': function preventDefault() {}\n        }); // E\n      } else {\n        sendAction({\n          \'keyCode\': 40,\n          \'preventDefault\': function preventDefault() {}\n        }); // Up\n      }\n\n      return true;\n    } // Click on square directly left player location.\n    else if (polygon_click_test(4, [mid_low - tile_buffer, mid_low, mid_low, mid_low - tile_buffer], // x values\n      [mid_low, mid_low, mid_high, mid_high], // y values\n      click_x, click_y)) {\n        if (direction == 3 && containsObject(cx - 1, cy)) {\n          sendAction({\n            \'keyCode\': 69,\n            \'preventDefault\': function preventDefault() {}\n          }); // E\n        } else {\n          sendAction({\n            \'keyCode\': 37,\n            \'preventDefault\': function preventDefault() {}\n          }); // Up\n        }\n\n        return true;\n      } // Click on square directly right player location.\n      else if (polygon_click_test(4, [mid_high, mid_high + tile_buffer, mid_high + tile_buffer, mid_high], // x values\n        [mid_low, mid_low, mid_high, mid_high], // y values\n        click_x, click_y)) {\n          if (direction == 2 && containsObject(cx + 1, cy)) {\n            sendAction({\n              \'keyCode\': 69,\n              \'preventDefault\': function preventDefault() {}\n            }); // E\n          } else {\n            sendAction({\n              \'keyCode\': 39,\n              \'preventDefault\': function preventDefault() {}\n            }); // Up\n          }\n\n          return true;\n        }\n\n  return false;\n}\n\nfunction clickFarTile(click_x, click_y, canvas_width, canvas_height, mid_width, mid_height) {\n  /* Movement */\n  if (polygon_click_test(3, [0, mid_width, canvas_width], [0, mid_height, 0], click_x, click_y)) {\n    // Up\n    sendAction({\n      \'keyCode\': 38,\n      \'preventDefault\': function preventDefault() {}\n    });\n    return true;\n  } else if (polygon_click_test(3, [0, mid_width, canvas_width], [canvas_height, mid_height, canvas_height], click_x, click_y)) {\n    // Down\n    sendAction({\n      \'keyCode\': 40,\n      \'preventDefault\': function preventDefault() {}\n    });\n    return true;\n  } else if (polygon_click_test(3, [0, mid_width, 0], [0, mid_height, canvas_height], click_x, click_y)) {\n    // Left\n    sendAction({\n      \'keyCode\': 37,\n      \'preventDefault\': function preventDefault() {}\n    });\n    return true;\n  } else if (polygon_click_test(3, [canvas_width, mid_width, canvas_width], [0, mid_height, canvas_height], click_x, click_y)) {\n    // Right\n    sendAction({\n      \'keyCode\': 39,\n      \'preventDefault\': function preventDefault() {}\n    });\n    return true;\n  }\n\n  return false;\n} // polygon_click_test by Wm. Randolph Franklin\n// int list(int) list(int) int int -> bool\n// Consumes the number of vertices, along with each vertex coordinate,\n// as a list of x coordinates and a second list of y coordinates.\n// Tests against clicked coordinates to determine whether the\n// click was within the polygon formed by said vertices.\n\n\nfunction polygon_click_test(nvert, vertx, verty, testx, testy) {\n  let i,\n      j,\n      c = false;\n\n  for (i = 0, j = nvert - 1; i < nvert; j = i++) {\n    if (verty[i] > testy != verty[j] > testy && testx < (vertx[j] - vertx[i]) * (testy - verty[i]) / (verty[j] - verty[i]) + vertx[i]) {\n      c = !c;\n    }\n  }\n\n  return c;\n}\n\nfunction setTouchCoords(e) {\n  e.preventDefault();\n  e.stopPropagation();\n  last_click_x = e.touches[0].clientX - draw_canvas.getBoundingClientRect().left;\n  last_click_y = e.touches[0].clientY - draw_canvas.getBoundingClientRect().top;\n}\n\nfunction getClickCoords(e) {\n  e.preventDefault();\n\n  if (last_click_x > -1 || last_click_y > -1) {\n    last_click_x = 0;\n    last_click_y = 0;\n    return;\n  }\n\n  const click_x = e.offsetX;\n  const click_y = e.offsetY;\n\n  if (e.button == 2) {\n    last_click_x = click_x;\n    last_click_y = click_y;\n    return;\n  }\n\n  determineLeftClick(click_x, click_y);\n}\n\nfunction getTouchCoords(e) {\n  e.preventDefault();\n  determineLeftClick(last_click_x, last_click_y);\n}\n\nfunction setContextMenu(e) {\n  e.preventDefault();\n  let tile = getTile(last_click_x, last_click_y);\n\n  if (Array.isArray(tile)) {\n    let object = entities[tile[1]];\n\n    if (object.type == "object") {\n      examine = object.examine;\n    }\n  }\n}\n\nfunction handleMouseMovement(e) {\n  e.preventDefault();\n  let mouse_x = e.offsetX;\n  let mouse_y = e.offsetY; // Mouse off right-click menu closes it (+- 5px)\n\n  if (!polygon_click_test(4, [examine_menu_vertices[0][0], examine_menu_vertices[1][0], examine_menu_vertices[2][0], examine_menu_vertices[3][0]], [examine_menu_vertices[0][1], examine_menu_vertices[1][1], examine_menu_vertices[2][1], examine_menu_vertices[3][1]], mouse_x, mouse_y)) {\n    resetExamine();\n  } // Mouse over object shows text in corner\n\n\n  let tile = getTile(mouse_x, mouse_y);\n\n  if (Array.isArray(tile)) {\n    let object = entities[tile[1]];\n\n    if (object.type == "object" || object.type == "item") {\n      object_name = object.name;\n    }\n  } else {\n    object_name = "";\n  }\n}\n\nfunction listener() {\n  document.addEventListener(\'keydown\', sendAction);\n}\nfunction clickListener() {\n  draw_canvas.addEventListener(\'mousedown\', getClickCoords);\n  draw_canvas.addEventListener(\'touchstart\', setTouchCoords, {\n    passive: false\n  });\n  draw_canvas.addEventListener(\'touchend\', getTouchCoords, {\n    passive: false\n  });\n  draw_canvas.addEventListener(\'contextmenu\', setContextMenu);\n  draw_canvas.addEventListener(\'mousemove\', handleMouseMovement);\n}\nfunction removeListeners() {\n  document.removeEventListener(\'keydown\', sendAction);\n  draw_canvas.removeEventListener(\'mousedown\', getClickCoords);\n  draw_canvas.removeEventListener(\'touchstart\', setTouchCoords, {\n    passive: false\n  });\n  draw_canvas.removeEventListener(\'touchend\', getTouchCoords, {\n    passive: false\n  });\n  draw_canvas.removeEventListener(\'contextmenu\', setContextMenu);\n  draw_canvas.removeEventListener(\'mousemove\', handleMouseMovement);\n}\n// CONCATENATED MODULE: ./js/draw.js\n// draw.js\n\n\n\n\n\nconst draw_canvas = document.getElementById(\'canvas\');\nconst ctx = draw_canvas.getContext(\'2d\'); // Rows of 10 30x30 tiles.\n\nconst tilesheet = new Image();\ntilesheet.src = "static/tilesheet.png";\nconst charsheet = new Image();\ncharsheet.src = "static/spritesheet.png";\nconst optionsheet = new Image();\noptionsheet.src = "static/optionsheet.png";\nlet examine_menu_vertices = [[0, 0], [0, 0], [0, 0], [0, 0]];\nconst OVERLAYS = {\n  None: 0,\n  Settings: 1,\n  History: 2,\n  Inventory: 3\n};\nlet overlay = OVERLAYS.None; // Small windows means smaller canvas.\n\nif (window.innerWidth < 600 || window.innerHeight < 600) {\n  draw_canvas.width = 330;\n  draw_canvas.height = 300;\n}\n/* DRAWING */\n\n\nfunction draw() {\n  const canvas_width = draw_canvas.width - 60;\n  const canvas_height = draw_canvas.height - 30;\n  ctx.clearRect(0, 0, draw_canvas.width, draw_canvas.height);\n\n  if (overlay == OVERLAYS.Settings) {\n    drawSettings(canvas_width, canvas_height);\n  } else if (overlay == OVERLAYS.History) {\n    drawHistory(canvas_width, canvas_height);\n  } else if (overlay == OVERLAYS.Inventory) {\n    drawInventory(canvas_width, canvas_height);\n  } else {\n    drawTiles(canvas_width, canvas_height);\n    drawOthers(); // Fill the local character tile\n\n    if (charsheet.complete) {\n      drawPlayer(border_size, border_size, player_namespaceObject);\n    } else {\n      charsheet.addEventListener(\'load\', drawPlayer.bind(border_size, border_size, player_namespaceObject));\n    }\n\n    if (object_name.length > 0) {\n      drawObjectName();\n    }\n\n    if (examine.length > 0) {\n      drawRightClickExamine();\n    }\n  }\n\n  if (settings.coordinates) {\n    drawCoordinates(canvas_width, canvas_height);\n  }\n\n  drawMapName();\n  drawSidePanel();\n}\n\nfunction drawTiles(canvas_width, canvas_height) {\n  for (let x = 0; x < canvas_width; x += tile_buffer) {\n    const curr_x = x / tile_buffer + (cx - border_size);\n\n    for (let y = 0; y < canvas_height; y += tile_buffer) {\n      const tile = current_map[y / tile_buffer + (cy - border_size)][curr_x];\n\n      if (Array.isArray(tile)) {\n        for (const def in tile) {\n          drawTile(tile[def], x, y);\n        }\n      } else {\n        drawTile(tile, x, y);\n      }\n    }\n  }\n}\n\nfunction drawTile(tile, x, y) {\n  if (tilesheet.complete) {\n    drawImage(tile, x, y);\n  } else {\n    tilesheet.load = drawImage.bind(tile, x, y);\n  }\n  /*\r\n  ctx.beginPath();\r\n  ctx.moveTo(x, y);\r\n  ctx.lineTo(x + map.tile_buffer, y);\r\n  ctx.moveTo(x, y);\r\n  ctx.lineTo(x, y + map.tile_buffer);\r\n  ctx.stroke();\r\n  ctx.closePath();\r\n  */\n\n}\n\nfunction drawImage(tile, x, y) {\n  ctx.strokeStyle = "transparent";\n  ctx.drawImage(tilesheet, tile % 10 * tile_buffer, Math.floor(tile / 10) * tile_buffer, tile_buffer, tile_buffer, x, y, tile_buffer, tile_buffer);\n}\n\nfunction drawPlayer(x_, y_, p) {\n  ctx.strokeStyle = "transparent"; // Used to go horizontally to the next\n  // player portion on the spritesheet.\n\n  let y_offset = 4; // Shirt\n\n  ctx.drawImage(charsheet, p.direction * tile_buffer, p.shirt * tile_buffer, tile_buffer, tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer); // Hair\n\n  ctx.drawImage(charsheet, (p.direction + y_offset) * tile_buffer, p.hair * tile_buffer, tile_buffer, tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n  y_offset += 4; // Skin\n\n  ctx.drawImage(charsheet, (p.direction + y_offset) * tile_buffer, p.skin * tile_buffer, tile_buffer, tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n  y_offset += 4; // Eyes\n\n  ctx.drawImage(charsheet, (p.direction + y_offset) * tile_buffer, p.eyes * tile_buffer, tile_buffer, tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n  y_offset += 4; // Pants\n\n  ctx.drawImage(charsheet, (p.direction + y_offset) * tile_buffer, p.pants * tile_buffer, tile_buffer, tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n  y_offset += 4; // Shoes\n\n  ctx.drawImage(charsheet, (p.direction + y_offset) * tile_buffer, p.shoes * tile_buffer, tile_buffer, tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n  y_offset += 4; // Hair Accessory\n\n  ctx.drawImage(charsheet, (p.direction + y_offset) * tile_buffer, p.hair_accessory * tile_buffer, tile_buffer, tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n\n  if (settings.player_names) {\n    ctx.fillStyle = "black";\n    ctx.font = "10pt Merriweather Sans";\n    ctx.textBaseline = "middle";\n    ctx.textAlign = "center";\n    ctx.fillText(p.username, x_ * tile_buffer + tile_buffer / 2, y_ * tile_buffer - 5);\n  }\n}\n\nfunction drawOthers() {\n  for (const u in all_users) {\n    if (u != username) {\n      const ucx = all_users[u].cx;\n      const ucy = all_users[u].cy;\n      const x = ucx - cx;\n      const y = ucy - cy;\n\n      if (x >= -border_size && x <= border_size && y >= -border_size && y <= border_size) {\n        // Fill the character tile\n        drawPlayer(x + border_size, y + border_size, all_users[u]);\n      }\n    }\n  }\n}\n\nfunction drawSidePanel() {\n  ctx.strokeStyle = "transparent"; // Settings\n\n  ctx.drawImage(optionsheet, 0, 0, 60, 60, draw_canvas.width - 60, 0, 60, 60); // Message History\n\n  ctx.drawImage(optionsheet, 0, 60, 60, 60, draw_canvas.width - 60, 60, 60, 60); // Inventory\n\n  ctx.drawImage(optionsheet, 0, 120, 60, 60, draw_canvas.width - 60, 120, 60, 60); // Logout\n\n  ctx.drawImage(optionsheet, 0, 420, 60, 30, draw_canvas.width - 60, draw_canvas.height - 30, 60, 30);\n}\n\nfunction drawRightClickExamine() {\n  let box_width = ctx.measureText(examine).width + 10;\n  let box_height = 22;\n  ctx.fillStyle = "black";\n  ctx.fillRect(last_click_x, last_click_y, box_width, box_height);\n  examine_menu_vertices = [[last_click_x - 5, last_click_y - 5], [last_click_x + box_width + 5, last_click_y - 5], [last_click_x + box_width + 5, last_click_y + box_height + 5], [last_click_x - 5, last_click_y + box_height + 5]];\n  ctx.fillStyle = "white";\n  ctx.textAlign = "center";\n  ctx.fillText(examine, last_click_x + Math.floor(box_width / 2), last_click_y + Math.floor(box_height / 2));\n}\n\nfunction drawObjectName() {\n  ctx.fillStyle = "white";\n  ctx.textAlign = "end";\n  ctx.fillText(object_name, draw_canvas.width - 65, 10);\n}\n\nfunction drawCoordinates(canvas_width, canvas_height) {\n  // Fill the position\n  ctx.fillStyle = "white";\n  ctx.textAlign = "end";\n  ctx.fillRect(0, canvas_height, canvas_width, 20);\n  ctx.font = "12pt Merriweather Sans";\n  ctx.fillStyle = "black";\n  ctx.fillText("(" + cx + ", " + cy + ")", canvas_width - 5, canvas_height + 10);\n}\n\nfunction drawOverlay(canvas_width, canvas_height) {\n  ctx.fillStyle = "white";\n  ctx.fillRect(0, 0, canvas_width, canvas_height);\n}\n\nfunction drawSettings(canvas_width, canvas_height) {\n  drawOverlay(canvas_width, canvas_height);\n  ctx.fillStyle = "black";\n  ctx.textAlign = "start";\n  ctx.font = "bold 24pt Merriweather Sans";\n  ctx.fillText("Settings", canvas_width / 4 - 25, 40);\n  ctx.font = "12pt Merriweather Sans"; // Show player names\n\n  ctx.fillText("Show Player Names: " + (settings.player_names ? "On" : "Off"), canvas_width / 4 - 24, 70); // Show current coordinates\n\n  ctx.fillText("Show Coordinates: " + (settings.coordinates ? "On" : "Off"), canvas_width / 4 - 24, 95);\n}\n\nfunction drawHistory(canvas_width, canvas_height) {\n  drawOverlay(canvas_width, canvas_height);\n}\n\nfunction drawInventory(canvas_width, canvas_height) {\n  drawOverlay(canvas_width, canvas_height);\n}\n\nfunction drawMapName() {\n  ctx.fillStyle = "black";\n  ctx.textAlign = "start";\n  ctx.font = "bold 12pt Merriweather Sans";\n  ctx.fillText(current_map_name, 5, draw_canvas.height - 10);\n}\n// CONCATENATED MODULE: ./js/game.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "socket", function() { return socket; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "all_users", function() { return all_users; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "entities", function() { return entities; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "action_data", function() { return action_data; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "examine", function() { return examine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resetExamine", function() { return resetExamine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "object_name", function() { return object_name; });\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n// game.js\n// import \'@babel/polyfill\';\n\n\n\n\n\n/* Initializing */\n\nconst socket = io.connect(\'//\' + document.domain + \':\' + location.port);\nlet logout = false;\nlet all_users = {};\nlet entities = [];\nlet action_data = {};\nlet examine = "";\nfunction resetExamine() {\n  examine = "";\n  examine_menu_vertices = [[0, 0], [0, 0], [0, 0], [0, 0]];\n}\nlet object_name = "";\n/* Movement */\n\nfunction doMove(movement) {\n  cx = movement.cx;\n  cy = movement.cy;\n  direction = movement.direction;\n}\n/* Main game loop and socket listeners */\n\n\nlet last;\n\n(function () {\n  function main(timestamp) {\n    if (logout) {\n      return;\n    }\n\n    draw();\n    requestAnimationFrame(main);\n  }\n\n  socket.on(\'connect\', function () {\n    const form = document.getElementById("authentication");\n    form.addEventListener(\'submit\', function (e) {\n      e.preventDefault();\n      socket.emit(\'authentication\', JSON.stringify({\n        \'username\': document.getElementById(\'username\').value\n      }));\n    });\n  });\n  socket.on(\'authenticated\', function (data) {\n    data = JSON.parse(data);\n    const msg = document.getElementById("message");\n\n    if (data.success) {\n      msg.innerHTML = "Authenticated successfully!";\n      setTimeout(function () {\n        msg.innerHTML = "Loading data...";\n        socket.emit(\'retrieve_init_data\', JSON.stringify({\n          \'username\': data.username\n        }));\n      }, 300);\n    } else {\n      msg.innerHTML = "Authentication failed. Please try again.";\n    }\n  });\n\n  function loadMap(attempts) {\n    const loaded = checkDataAcquired();\n\n    if (loaded) {\n      setTimeout(function () {\n        document.getElementById("message").innerHTML = "";\n        document.getElementById(\'message\').className = "hide";\n        document.getElementById(\'auth\').className = "hide";\n        document.getElementById(\'canvas\').className = "show centered";\n        logout = false;\n        main(); // Start the cycle\n\n        listener(); // Begin movement listeners\n\n        clickListener();\n      }, 300);\n      return; // Do not execute the rest of the function.\n    }\n\n    attempts++;\n\n    if (attempts < 10) {\n      setTimeout(function () {\n        loadMap(attempts);\n      }, 100);\n      return; // Do not execute the rest of the function.\n    }\n\n    msg.innerHTML = "Failed to get data from the server.";\n  }\n\n  function checkDataAcquired() {\n    const got_user = username !== "";\n    const got_map = current_map !== undefined || current_map.length > 0;\n    return got_user && got_map;\n  } // Recieves and populates initial data.\n\n\n  socket.on(\'init_data\', function (data) {\n    data = JSON.parse(data);\n    var _data = data;\n\n    var _data2 = _slicedToArray(_data, 8);\n\n    username = _data2[0];\n\n    var _data2$ = _slicedToArray(_data2[1], 3);\n\n    cx = _data2$[0];\n    cy = _data2$[1];\n    direction = _data2$[2];\n\n    var _data2$2 = _slicedToArray(_data2[2], 2);\n\n    current_map = _data2$2[0];\n    current_map_name = _data2$2[1];\n\n    var _data2$3 = _slicedToArray(_data2[3], 7);\n\n    shirt = _data2$3[0];\n    hair = _data2$3[1];\n    skin = _data2$3[2];\n    eyes = _data2$3[3];\n    pants = _data2$3[4];\n    shoes = _data2$3[5];\n    hair_accessory = _data2$3[6];\n    entities = _data2[4];\n    settings = _data2[5];\n\n    var _data2$4 = _slicedToArray(_data2[6], 2);\n\n    tile_buffer = _data2$4[0];\n    border_size = _data2$4[1];\n    all_users = _data2[7];\n\n    if (draw_canvas.width < 450) {\n      border_size = 4;\n    }\n\n    loadMap(0);\n  });\n  socket.on(\'object_action\', function (data) {\n    action_data = JSON.parse(data);\n  }); // Recieves and populates map data.\n\n  socket.on(\'map_data\', function (data) {\n    var _JSON$parse = JSON.parse(data);\n\n    var _JSON$parse2 = _slicedToArray(_JSON$parse, 2);\n\n    current_map = _JSON$parse2[0];\n    current_map_name = _JSON$parse2[1];\n  });\n  socket.on(\'entity_data\', function (data) {\n    entities = JSON.parse(data);\n  }); // Moves the local player\n\n  socket.on(\'movement_self\', function (data) {\n    data = JSON.parse(data);\n    if (username == data.username) doMove(data);\n  }); // Updates specific player\'s data\n\n  socket.on(\'update_player\', function (data) {\n    data = JSON.parse(data);\n\n    if (data.username == username) {\n      cx = data.cx;\n      cy = data.cy;\n      direction = data.direction;\n      shirt = data.shirt;\n      hair = data.hair;\n      skin = data.skin;\n      eyes = data.eyes;\n      pants = data.pants;\n      shoes = data.shoes;\n      hair_accessory = data.hair_accessory;\n    } else {\n      all_users[data.username] = data;\n    }\n  }); // Remove player from users data\n\n  socket.on(\'remove_user\', function (data) {\n    data = JSON.parse(data);\n\n    if (data.username) {\n      delete all_users[data.username];\n    } // Logout if self\n\n\n    if (data.username == username) {\n      logout = true;\n      all_users = {};\n      document.getElementById(\'message\').className = "show";\n      document.getElementById(\'auth\').className = "show";\n      document.getElementById(\'canvas\').className = "hide";\n      removeListeners();\n    }\n  });\n  socket.on(\'failure\', function (data) {\n    console.log(\'Unsynchronized.\');\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9wbGF5ZXIuanM/N2UxYiIsIndlYnBhY2s6Ly8vLi9qcy9tYXAuanM/ZjdjNCIsIndlYnBhY2s6Ly8vLi9qcy9zZXR0aW5ncy5qcz9hNTMwIiwid2VicGFjazovLy8uL2pzL2lucHV0LmpzPzdhZWYiLCJ3ZWJwYWNrOi8vLy4vanMvZHJhdy5qcz9iMjNmIiwid2VicGFjazovLy8uL2pzL2dhbWUuanM/ZTY1NyJdLCJuYW1lcyI6WyJ1c2VybmFtZSIsImN4IiwiY3kiLCJkaXJlY3Rpb24iLCJjdXJyZW50X21hcCIsImN1cnJlbnRfbWFwX25hbWUiLCJzaGlydCIsImhhaXIiLCJza2luIiwiZXllcyIsInBhbnRzIiwic2hvZXMiLCJoYWlyX2FjY2Vzc29yeSIsImJvcmRlcl9zaXplIiwidGlsZV9idWZmZXIiLCJnZXRUaWxlIiwieF8iLCJ5XyIsImNsaWNrX3giLCJNYXRoIiwiZmxvb3IiLCJjbGlja195IiwidGlsZV94IiwidGlsZV95IiwicGxheWVyIiwiY29udGFpbnNPYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJnYW1lIiwidHlwZSIsInNldHRpbmdzIiwicGxheWVyX25hbWVzIiwiY29vcmRpbmF0ZXMiLCJoYW5kbGVDbGljayIsImNhbnZhc193aWR0aCIsImNhbnZhc19oZWlnaHQiLCJxdWFydGVyX3dpZHRoIiwicG9seWdvbl9jbGlja190ZXN0Iiwic2VuZFNldHRpbmdzIiwic29ja2V0IiwiZW1pdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJsYXN0X2NsaWNrX3giLCJsYXN0X2NsaWNrX3kiLCJzZW5kQWN0aW9uIiwiZSIsImluY2x1ZGVzIiwia2V5Q29kZSIsInByZXZlbnREZWZhdWx0IiwiY29uc29sZSIsImxvZyIsImRldGVybWluZUxlZnRDbGljayIsImRyYXciLCJ3aWR0aCIsImhlaWdodCIsIm1pZF93aWR0aCIsIm1pZF9oZWlnaHQiLCJtaWRfb2Zmc2V0IiwibWFwIiwibWlkX2xvdyIsIm1pZF9oaWdoIiwiU2V0dGluZ3MiLCJIaXN0b3J5IiwiSW52ZW50b3J5IiwiTm9uZSIsImNsaWNrVW5kZXJUaWxlIiwiY2xpY2tBZGphY2VudFRpbGUiLCJjbGlja0ZhclRpbGUiLCJjaGVja01lbnVJY29uQ2xpY2tlZCIsImNhbnZhcyIsIm52ZXJ0IiwidmVydHgiLCJ2ZXJ0eSIsInRlc3R4IiwidGVzdHkiLCJpIiwiaiIsImMiLCJzZXRUb3VjaENvb3JkcyIsInN0b3BQcm9wYWdhdGlvbiIsInRvdWNoZXMiLCJjbGllbnRYIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsImNsaWVudFkiLCJ0b3AiLCJnZXRDbGlja0Nvb3JkcyIsIm9mZnNldFgiLCJvZmZzZXRZIiwiYnV0dG9uIiwiZ2V0VG91Y2hDb29yZHMiLCJzZXRDb250ZXh0TWVudSIsInRpbGUiLCJvYmplY3QiLCJleGFtaW5lIiwiaGFuZGxlTW91c2VNb3ZlbWVudCIsIm1vdXNlX3giLCJtb3VzZV95IiwibmFtZSIsImxpc3RlbmVyIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xpY2tMaXN0ZW5lciIsInBhc3NpdmUiLCJyZW1vdmVMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJjdHgiLCJnZXRDb250ZXh0IiwidGlsZXNoZWV0IiwiSW1hZ2UiLCJzcmMiLCJjaGFyc2hlZXQiLCJvcHRpb25zaGVldCIsImV4YW1pbmVfbWVudV92ZXJ0aWNlcyIsIk9WRVJMQVlTIiwib3ZlcmxheSIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImNsZWFyUmVjdCIsImRyYXdTZXR0aW5ncyIsImRyYXdIaXN0b3J5IiwiZHJhd0ludmVudG9yeSIsImRyYXdUaWxlcyIsImRyYXdPdGhlcnMiLCJjb21wbGV0ZSIsImRyYXdQbGF5ZXIiLCJiaW5kIiwibGVuZ3RoIiwiZHJhd09iamVjdE5hbWUiLCJkcmF3UmlnaHRDbGlja0V4YW1pbmUiLCJkcmF3Q29vcmRpbmF0ZXMiLCJkcmF3TWFwTmFtZSIsImRyYXdTaWRlUGFuZWwiLCJ4IiwiY3Vycl94IiwieSIsImRlZiIsImRyYXdUaWxlIiwiZHJhd0ltYWdlIiwibG9hZCIsInN0cm9rZVN0eWxlIiwicCIsInlfb2Zmc2V0IiwiZmlsbFN0eWxlIiwiZm9udCIsInRleHRCYXNlbGluZSIsInRleHRBbGlnbiIsImZpbGxUZXh0IiwidSIsInVjeCIsInVjeSIsImJveF93aWR0aCIsIm1lYXN1cmVUZXh0IiwiYm94X2hlaWdodCIsImZpbGxSZWN0IiwiaW5wdXQiLCJkcmF3T3ZlcmxheSIsImlvIiwiY29ubmVjdCIsImRvbWFpbiIsImxvY2F0aW9uIiwicG9ydCIsImxvZ291dCIsImFsbF91c2VycyIsImVudGl0aWVzIiwiYWN0aW9uX2RhdGEiLCJyZXNldEV4YW1pbmUiLCJvYmplY3RfbmFtZSIsImRvTW92ZSIsIm1vdmVtZW50IiwibGFzdCIsIm1haW4iLCJ0aW1lc3RhbXAiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvbiIsImZvcm0iLCJ2YWx1ZSIsImRhdGEiLCJwYXJzZSIsIm1zZyIsInN1Y2Nlc3MiLCJpbm5lckhUTUwiLCJzZXRUaW1lb3V0IiwibG9hZE1hcCIsImF0dGVtcHRzIiwibG9hZGVkIiwiY2hlY2tEYXRhQWNxdWlyZWQiLCJjbGFzc05hbWUiLCJnb3RfdXNlciIsImdvdF9tYXAiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUVPLElBQUlBLFFBQVEsR0FBRyxFQUFmLEMsQ0FFUDs7QUFDTyxJQUFJQyxFQUFFLEdBQUcsQ0FBVDtBQUNBLElBQUlDLEVBQUUsR0FBRyxDQUFUO0FBQ0EsSUFBSUMsU0FBUyxHQUFHLENBQWhCO0FBRUEsSUFBSUMsV0FBVyxHQUFHLEVBQWxCO0FBQ0EsSUFBSUMsZ0JBQWdCLEdBQUcsRUFBdkI7QUFFQSxJQUFJQyxLQUFLLEdBQUcsQ0FBWjtBQUNBLElBQUlDLElBQUksR0FBRyxDQUFYO0FBQ0EsSUFBSUMsSUFBSSxHQUFHLENBQVg7QUFDQSxJ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Q0FhLG9CQUFBLEdBQXdCNEosSUFBSSxDQUFDeEssY0FBN0I7QUFDRCxLQVhELE1BWUs7QUFDSDBKLGVBQVMsQ0FBQ2MsSUFBSSxDQUFDcEwsUUFBTixDQUFULEdBQTJCb0wsSUFBM0I7QUFDRDtBQUNGLEdBakJELEVBMUdXLENBNkhYOztBQUNBN0ksUUFBTSxDQUFDMEksRUFBUCxDQUFVLGFBQVYsRUFBeUIsVUFBVUcsSUFBVixFQUFnQjtBQUN2Q0EsUUFBSSxHQUFHM0ksSUFBSSxDQUFDNEksS0FBTCxDQUFXRCxJQUFYLENBQVA7O0FBQ0EsUUFBSUEsSUFBSSxDQUFDcEwsUUFBVCxFQUFtQjtBQUNqQixhQUFPc0ssU0FBUyxDQUFDYyxJQUFJLENBQUNwTCxRQUFOLENBQWhCO0FBQ0QsS0FKc0MsQ0FNdkM7OztBQUNBLFFBQUlvTCxJQUFJLENBQUNwTCxRQUFMLElBQWlCd0IsUUFBckIsRUFBc0M7QUFDcEM2SSxZQUFNLEdBQUcsSUFBVDtBQUNBQyxlQUFTLEdBQUcsRUFBWjtBQUNBakUsY0FBUSxDQUFDTSxjQUFULENBQXdCLFNBQXhCLEVBQW1DbUYsU0FBbkMsR0FBK0MsTUFBL0M7QUFDQXpGLGNBQVEsQ0FBQ00sY0FBVCxDQUF3QixNQUF4QixFQUFnQ21GLFNBQWhDLEdBQTRDLE1BQTVDO0FBQ0F6RixjQUFRLENBQUNNLGNBQVQsQ0FBd0IsUUFBeEIsRUFBa0NtRixTQUFsQyxHQUE4QyxNQUE5QztBQUNBaEMscUJBQUE7QUFDRDtBQUNGLEdBZkQ7QUFpQkF2SCxRQUFNLENBQUMwSSxFQUFQLENBQVUsU0FBVixFQUFxQixVQUFVRyxJQUFWLEVBQWdCO0FBQ25DbEksV0FBTyxDQUFDQyxHQUFSLENBQVksaUJBQVo7QUFDRCxHQUZEO0FBR0QsQ0FsSkQiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHBsYXllci5qc1xyXG4vLyBDb250YWlucyBkZXRhaWxzIGFuZCBzb21lIGxvZ2ljXHJcbi8vIHN1cnJvdW5kaW5nIHRoZSBsb2NhbCBwbGF5ZXIuXHJcblxyXG5leHBvcnQgbGV0IHVzZXJuYW1lID0gXCJcIjtcclxuXHJcbi8vIGNoYXJhY3RlciBzdGFydCAoMCwwKVxyXG5leHBvcnQgbGV0IGN4ID0gMDtcclxuZXhwb3J0IGxldCBjeSA9IDA7XHJcbmV4cG9ydCBsZXQgZGlyZWN0aW9uID0gMDtcclxuXHJcbmV4cG9ydCBsZXQgY3VycmVudF9tYXAgPSBbXTtcclxuZXhwb3J0IGxldCBjdXJyZW50X21hcF9uYW1lID0gXCJcIjtcclxuXHJcbmV4cG9ydCBsZXQgc2hpcnQgPSAwO1xyXG5leHBvcnQgbGV0IGhhaXIgPSAwO1xyXG5leHBvcnQgbGV0IHNraW4gPSAwO1xyXG5leHBvcnQgbGV0IGV5ZXMgPSAwO1xyXG5leHBvcnQgbGV0IHBhbnRzID0gMDtcclxuZXhwb3J0IGxldCBzaG9lcyA9IDA7XHJcbmV4cG9ydCBsZXQgaGFpcl9hY2Nlc3NvcnkgPSAwOyIsIi8vIG1hcC5qc1xyXG4vLyBIYW5kbGVzIG1hcCBtYW5pcHVsYXRpb24gbG9naWMuXHJcbmltcG9ydCAqIGFzIGdhbWUgZnJvbSAnLi9nYW1lJztcclxuaW1wb3J0ICogYXMgcGxheWVyIGZyb20gJy4vcGxheWVyJztcclxuXHJcbmV4cG9ydCBsZXQgYm9yZGVyX3NpemUgPSAwOyAvLyBIb3cgbWFueSB0aWxlcyBmcm9tIGVkZ2UgdG8gcGxheWVyXHJcbmV4cG9ydCBsZXQgdGlsZV9idWZmZXIgPSAwOyAvLyBUaWxlIEJ1ZmZlcjogSG93IGxhcmdlIHRpbGVzIGFyZVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRpbGUoeF8sIHlfKSB7XHJcbiAgbGV0IGNsaWNrX3ggPSBNYXRoLmZsb29yKHhfIC8gMzApO1xyXG4gIGxldCBjbGlja195ID0gTWF0aC5mbG9vcih5XyAvIDMwKTtcclxuICBsZXQgdGlsZV94ID0gLTE7XHJcbiAgbGV0IHRpbGVfeSA9IC0xO1xyXG4gIGlmIChib3JkZXJfc2l6ZSA+IGNsaWNrX3kpIHtcclxuICAgIHRpbGVfeSA9IHBsYXllci5jeSAtIChib3JkZXJfc2l6ZSAtIGNsaWNrX3kpO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIHRpbGVfeSA9IHBsYXllci5jeSArIChjbGlja195IC0gYm9yZGVyX3NpemUpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGJvcmRlcl9zaXplID4gY2xpY2tfeCkge1xyXG4gICAgdGlsZV94ID0gcGxheWVyLmN4IC0gKGJvcmRlcl9zaXplIC0gY2xpY2tfeCk7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgdGlsZV94ID0gcGxheWVyLmN4ICsgKGNsaWNrX3ggLSBib3JkZXJfc2l6ZSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcGxheWVyLmN1cnJlbnRfbWFwW3RpbGVfeV1bdGlsZV94XTtcclxufVxyXG5cclxuLy8gQ2hlY2sgaWYgdGhlIHRpbGUgYXQgKHhfLCB5XykgaGFzIGFuIG9iamVjdC5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zT2JqZWN0KHhfLCB5Xykge1xyXG4gIGlmIChBcnJheS5pc0FycmF5KHBsYXllci5jdXJyZW50X21hcFt5X11beF9dKSkge1xyXG4gICAgaWYgKGdhbWUuZW50aXRpZXNbcGxheWVyLmN1cnJlbnRfbWFwW3lfXVt4X11bMV1dLnR5cGUgPT0gXCJvYmplY3RcIikge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59IiwiLy8gc2V0dGluZ3MuanNcclxuXHJcbmltcG9ydCB7c29ja2V0fSBmcm9tICcuL2dhbWUnO1xyXG5pbXBvcnQge3VzZXJuYW1lfSBmcm9tICcuL3BsYXllcic7XHJcbmltcG9ydCB7cG9seWdvbl9jbGlja190ZXN0fSBmcm9tICcuL2lucHV0JztcclxuXHJcbmV4cG9ydCBsZXQgc2V0dGluZ3MgPSB7XHJcbiAgcGxheWVyX25hbWVzOiB0cnVlLFxyXG4gIGNvb3JkaW5hdGVzOiBmYWxzZVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlQ2xpY2soY2xpY2tfeCwgY2xpY2tfeSwgY2FudmFzX3dpZHRoLCBjYW52YXNfaGVpZ2h0KSB7XHJcbiAgY29uc3QgcXVhcnRlcl93aWR0aCA9IGNhbnZhc193aWR0aCAvIDQgLSAyMDtcclxuXHJcbiAgLy8gU2hvdyBwbGF5ZXIgbmFtZXNcclxuICBpZiAocG9seWdvbl9jbGlja190ZXN0KDQsXHJcbiAgICBbcXVhcnRlcl93aWR0aCwgcXVhcnRlcl93aWR0aCozLCBxdWFydGVyX3dpZHRoKjMsIHF1YXJ0ZXJfd2lkdGhdLCAvLyB4IHZhbHVlc1xyXG4gICAgWzUwLCA1MCwgNzIsIDcyXSwgLyogeSB2YWx1ZXMgKi8gY2xpY2tfeCwgY2xpY2tfeSkpIHtcclxuICAgIHNldHRpbmdzLnBsYXllcl9uYW1lcyA9ICFzZXR0aW5ncy5wbGF5ZXJfbmFtZXM7XHJcbiAgICBzZW5kU2V0dGluZ3MoKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLy8gU2hvdyBjdXJyZW50IGNvb3JkaW5hdGVzXHJcbiAgZWxzZSBpZiAocG9seWdvbl9jbGlja190ZXN0KDQsXHJcbiAgICBbcXVhcnRlcl93aWR0aCwgcXVhcnRlcl93aWR0aCozLCBxdWFydGVyX3dpZHRoKjMsIHF1YXJ0ZXJfd2lkdGhdLCAvLyB4IHZhbHVlc1xyXG4gICAgWzczLCA3MywgOTUsIDk1XSwgLyogeSB2YWx1ZXMgKi8gY2xpY2tfeCwgY2xpY2tfeSkpIHtcclxuICAgIHNldHRpbmdzLmNvb3JkaW5hdGVzID0gIXNldHRpbmdzLmNvb3JkaW5hdGVzO1xyXG4gICAgc2VuZFNldHRpbmdzKCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZW5kU2V0dGluZ3MoKSB7XHJcbiAgc29ja2V0LmVtaXQoJ3NldHRpbmdzJywgSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgJ3VzZXJuYW1lJzogdXNlcm5hbWUsXHJcbiAgICAnc2V0dGluZ3MnOiBzZXR0aW5ncyxcclxuICB9KSk7XHJcbn0iLCIvLyBpbnB1dC5qc1xyXG4vLyBIYW5kbGVzIHVzZXIgaW5wdXQuXHJcblxyXG5pbXBvcnQgKiBhcyBkcmF3IGZyb20gJy4vZHJhdyc7XHJcbmltcG9ydCAqIGFzIGdhbWUgZnJvbSAnLi9nYW1lJztcclxuaW1wb3J0ICogYXMgbWFwIGZyb20gJy4vbWFwJztcclxuaW1wb3J0ICogYXMgcGxheWVyIGZyb20gJy4vcGxheWVyJztcclxuaW1wb3J0ICogYXMgc2V0dGluZ3MgZnJvbSAnLi9zZXR0aW5ncyc7XHJcblxyXG5leHBvcnQgbGV0IGxhc3RfY2xpY2tfeCA9IC0xO1xyXG5leHBvcnQgbGV0IGxhc3RfY2xpY2tfeSA9IC0xO1xyXG5cclxuZnVuY3Rpb24gc2VuZEFjdGlvbihlKSB7XHJcbiAgaWYgKCFbXHJcbiAgICAzMiwgMzcsIDM4LCAzOSwgNDAsIDY1LCA2OCwgNjksIDgzLCA4N1xyXG4gIF0uaW5jbHVkZXMoZS5rZXlDb2RlKSkgcmV0dXJuO1xyXG4gIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgaWYgKGUua2V5Q29kZSA9PSAzMikgeyAvLyBTcGFjZWJhclxyXG4gICAgY29uc29sZS5sb2coXCJFdmVudHVhbGx5IHdlIHdpbGwgaW1wbGVtZW50IHRoZSBzcGFjZWJhciBmb3IgaW50ZXJhY3RpbmdcIlxyXG4gICAgICArIFwiIHdpdGggaXRlbXMgYmVsb3cgeW91ciBjaGFyYWN0ZXIuXCIpO1xyXG4gIH1cclxuXHJcbiAgZ2FtZS5zb2NrZXQuZW1pdCgnanNvbicsIEpTT04uc3RyaW5naWZ5KHtcclxuICAgICd1c2VybmFtZSc6IHBsYXllci51c2VybmFtZSxcclxuICAgICdhY3Rpb24nOiBlLmtleUNvZGUsXHJcbiAgfSkpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRldGVybWluZUxlZnRDbGljayhjbGlja194LCBjbGlja195KSB7XHJcbiAgbGV0IGNhbnZhc193aWR0aCA9IGRyYXcuY2FudmFzLndpZHRoIC0gNjA7XHJcbiAgbGV0IGNhbnZhc19oZWlnaHQgPSBkcmF3LmNhbnZhcy5oZWlnaHQgLSAyMDtcclxuXHJcbiAgY29uc3QgbWlkX3dpZHRoID0gTWF0aC5mbG9vcihjYW52YXNfd2lkdGggLyAyKTtcclxuICBjb25zdCBtaWRfaGVpZ2h0ID0gTWF0aC5mbG9vcihjYW52YXNfaGVpZ2h0IC8gMik7XHJcbiAgY29uc3QgbWlkX29mZnNldCA9IE1hdGguZmxvb3IobWFwLnRpbGVfYnVmZmVyIC8gMik7XHJcbiAgY29uc3QgbWlkX2xvdyA9IG1pZF93aWR0aCAtIG1pZF9vZmZzZXQ7XHJcbiAgY29uc3QgbWlkX2hpZ2ggPSBtaWRfd2lkdGggKyBtaWRfb2Zmc2V0O1xyXG5cclxuICBnYW1lLnJlc2V0RXhhbWluZSgpO1xyXG5cclxuICAvLyBXZSBkaXZpZGUgdGhpcyBpbnRvIFwicGFnZWRcIiBjaGVja2luZ1xyXG4gIC8vIFJldHVybiBpZiB3ZSBmaW5kIGEgbWF0Y2hpbmcgY2xpY2ssIHRvIGF2b2lkIG11bHRpcGxlXHJcbiAgLy8gZXhlY3V0aW9ucy5cclxuXHJcbiAgLy8gU2V0dGluZ3Mgc2NvcGVcclxuICBpZiAoZHJhdy5vdmVybGF5ID09IGRyYXcuT1ZFUkxBWVMuU2V0dGluZ3MpIHtcclxuXHJcbiAgICAvLyBDaGVjayBpZiBhIHNldHRpbmcgaXMgY2xpY2tlZC4gSWYgc28sIHNlbmQgZGF0YSB0byBzZXJ2ZXIuXHJcbiAgICBpZiAoc2V0dGluZ3MuaGFuZGxlQ2xpY2soY2xpY2tfeCwgY2xpY2tfeSwgY2FudmFzX3dpZHRoLCBjYW52YXNfaGVpZ2h0KSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBNZXNzYWdlIEhpc3RvcnkgU2NvcGVcclxuICBlbHNlIGlmIChkcmF3Lm92ZXJsYXkgPT0gZHJhdy5PVkVSTEFZUy5IaXN0b3J5KSB7XHJcbiAgICAvLyBDaGVjayBmb3IgbWVzc2FnZSBoaXN0b3J5IGludGVyYWN0aW9uLlxyXG4gIH1cclxuXHJcbiAgLy8gSW52ZW50b3J5IHNjb3BlXHJcbiAgZWxzZSBpZiAoZHJhdy5vdmVybGF5ID09IGRyYXcuT1ZFUkxBWVMuSW52ZW50b3J5KSB7XHJcbiAgICAvLyBDaGVjayBmb3IgaW52ZW50b3J5IGludGVyYWN0aW9uLlxyXG4gIH1cclxuXHJcbiAgLy8gTWFwIHNjb3BlXHJcbiAgZWxzZSBpZiAoZHJhdy5vdmVybGF5ID09IGRyYXcuT1ZFUkxBWVMuTm9uZSkge1xyXG4gICAgaWYgKGNsaWNrVW5kZXJUaWxlKGNsaWNrX3gsIGNsaWNrX3ksIG1pZF9sb3csIG1pZF9oaWdoKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNsaWNrQWRqYWNlbnRUaWxlKGNsaWNrX3gsIGNsaWNrX3ksIG1pZF9sb3csIG1pZF9oaWdoKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNsaWNrRmFyVGlsZShjbGlja194LCBjbGlja195LCBjYW52YXNfd2lkdGgsIGNhbnZhc19oZWlnaHQsIG1pZF93aWR0aCwgbWlkX2hlaWdodCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gR2VuZXJhbCBzY29wZVxyXG4gIGlmIChjaGVja01lbnVJY29uQ2xpY2tlZChjbGlja194LCBjbGlja195LCBjYW52YXNfd2lkdGgpKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tNZW51SWNvbkNsaWNrZWQoY2xpY2tfeCwgY2xpY2tfeSwgY2FudmFzX3dpZHRoKSB7XHJcbiAgLy8gQ2xpY2sgb24gc2V0dGluZ3MgbWVudSBpY29uXHJcbiAgaWYgKHBvbHlnb25fY2xpY2tfdGVzdCg0LFxyXG4gICAgW2NhbnZhc193aWR0aCwgY2FudmFzLndpZHRoLCBjYW52YXMud2lkdGgsIGNhbnZhc193aWR0aF0sIC8vIHggdmFsdWVzXHJcbiAgICBbMCwgMCwgNTksIDU5XSwgLyogeSB2YWx1ZXMgKi8gY2xpY2tfeCwgY2xpY2tfeSkpIHtcclxuICAgIGRyYXcub3ZlcmxheSA9IGRyYXcub3ZlcmxheSAhPSBkcmF3Lk9WRVJMQVlTLlNldHRpbmdzID9cclxuICAgICAgZHJhdy5PVkVSTEFZUy5TZXR0aW5ncyA6IGRyYXcuT1ZFUkxBWVMuTm9uZTtcclxuICB9XHJcblxyXG4gIC8vIENsaWNrIG1lc3NhZ2UgaGlzdG9yeSBpY29uXHJcbiAgZWxzZSBpZiAocG9seWdvbl9jbGlja190ZXN0KDQsXHJcbiAgICBbY2FudmFzX3dpZHRoLCBjYW52YXMud2lkdGgsIGNhbnZhcy53aWR0aCwgY2FudmFzX3dpZHRoXSwgLy8geCB2YWx1ZXNcclxuICAgIFs2MCwgNjAsIDExOSwgMTE5XSwgLyogeSB2YWx1ZXMgKi8gY2xpY2tfeCwgY2xpY2tfeSkpIHtcclxuICAgIGRyYXcub3ZlcmxheSA9IGRyYXcub3ZlcmxheSAhPSBkcmF3Lk9WRVJMQVlTLkludmVudG9yeSA/XHJcbiAgICAgIGRyYXcuT1ZFUkxBWVMuSW52ZW50b3J5IDogZHJhdy5PVkVSTEFZUy5Ob25lO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2xpY2sgaW52ZW50b3J5IGljb25cclxuICBlbHNlIGlmIChwb2x5Z29uX2NsaWNrX3Rlc3QoNCxcclxuICAgIFtjYW52YXNfd2lkdGgsIGNhbnZhcy53aWR0aCwgY2FudmFzLndpZHRoLCBjYW52YXNfd2lkdGhdLCAvLyB4IHZhbHVlc1xyXG4gICAgWzEyMCwgMTIwLCAxNzksIDE3OV0sIC8qIHkgdmFsdWVzICovIGNsaWNrX3gsIGNsaWNrX3kpKSB7XHJcbiAgICBkcmF3Lm92ZXJsYXkgPSBkcmF3Lm92ZXJsYXkgIT0gZHJhdy5PVkVSTEFZUy5IaXN0b3J5ID9cclxuICAgICAgZHJhdy5PVkVSTEFZUy5IaXN0b3J5IDogZHJhdy5PVkVSTEFZUy5Ob25lO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2xpY2sgbG9nb3V0IGljb25cclxuICBlbHNlIGlmIChwb2x5Z29uX2NsaWNrX3Rlc3QoNCxcclxuICAgIFtjYW52YXNfd2lkdGgsIGNhbnZhcy53aWR0aCwgY2FudmFzLndpZHRoLCBjYW52YXNfd2lkdGhdLCAvLyB4IHZhbHVlc1xyXG4gICAgW2NhbnZhcy5oZWlnaHQgLSAzMCwgY2FudmFzLmhlaWdodCAtIDMwLCBjYW52YXMuaGVpZ2h0LCBjYW52YXMuaGVpZ2h0XSwgLyogeSB2YWx1ZXMgKi8gY2xpY2tfeCwgY2xpY2tfeSkpIHtcclxuICAgIGdhbWUuc29ja2V0LmVtaXQoJ2xvZ291dCcpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2xpY2tVbmRlclRpbGUoY2xpY2tfeCwgY2xpY2tfeSwgbWlkX2xvdywgbWlkX2hpZ2gpIHtcclxuICAvLyBDbGljayBvbiBtaWRkbGUgc3F1YXJlICh3aGVyZSBwbGF5ZXIgaXMgc3RhbmRpbmcpXHJcbiAgaWYgKHBvbHlnb25fY2xpY2tfdGVzdCg0LFxyXG4gICAgW21pZF9sb3csIG1pZF9oaWdoLCBtaWRfaGlnaCwgbWlkX2xvd10sIC8vIHggdmFsdWVzXHJcbiAgICBbbWlkX2xvdywgbWlkX2xvdywgbWlkX2hpZ2gsIG1pZF9oaWdoXSwgLy8geSB2YWx1ZXNcclxuICAgIGNsaWNrX3gsIGNsaWNrX3kpKSB7XHJcbiAgICBzZW5kQWN0aW9uKHsna2V5Q29kZSc6IDMyLCAncHJldmVudERlZmF1bHQnOiBmdW5jdGlvbigpe319KTsgLy8gU3BhY2ViYXJcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsaWNrQWRqYWNlbnRUaWxlKGNsaWNrX3gsIGNsaWNrX3ksIG1pZF9sb3csIG1pZF9oaWdoKSB7XHJcbiAgLy8gQ2xpY2sgb24gc3F1YXJlIGRpcmVjdGx5IGFib3ZlIHBsYXllciBsb2NhdGlvbi5cclxuICBpZiAocG9seWdvbl9jbGlja190ZXN0KDQsXHJcbiAgICBbbWlkX2xvdywgbWlkX2hpZ2gsIG1pZF9oaWdoLCBtaWRfbG93XSwgLy8geCB2YWx1ZXNcclxuICAgIFttaWRfbG93IC0gbWFwLnRpbGVfYnVmZmVyLCBtaWRfbG93IC0gbWFwLnRpbGVfYnVmZmVyLCBtaWRfbG93LCBtaWRfbG93XSwgLy8geSB2YWx1ZXNcclxuICAgIGNsaWNrX3gsIGNsaWNrX3kpKSB7XHJcbiAgICBpZiAocGxheWVyLmRpcmVjdGlvbiA9PSAxICYmIG1hcC5jb250YWluc09iamVjdChwbGF5ZXIuY3gsIHBsYXllci5jeS0xKSkge1xyXG4gICAgICBzZW5kQWN0aW9uKHsna2V5Q29kZSc6IDY5LCAncHJldmVudERlZmF1bHQnOiBmdW5jdGlvbigpe319KTsgLy8gRVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHNlbmRBY3Rpb24oeydrZXlDb2RlJzogMzgsICdwcmV2ZW50RGVmYXVsdCc6IGZ1bmN0aW9uKCl7fX0pOyAvLyBVcFxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvLyBDbGljayBvbiBzcXVhcmUgb25lIGJlbG93IHBsYXllciBsb2NhdGlvbi5cclxuICBlbHNlIGlmIChwb2x5Z29uX2NsaWNrX3Rlc3QoNCxcclxuICAgIFttaWRfbG93LCBtaWRfbG93LCBtaWRfaGlnaCwgbWlkX2hpZ2hdLCAvLyB4IHZhbHVlc1xyXG4gICAgW21pZF9oaWdoLCBtaWRfaGlnaCArIG1hcC50aWxlX2J1ZmZlciwgbWlkX2hpZ2ggKyBtYXAudGlsZV9idWZmZXIsIG1pZF9oaWdoXSwgLy8geSB2YWx1ZXNcclxuICAgIGNsaWNrX3gsIGNsaWNrX3kpKSB7XHJcbiAgICBpZiAocGxheWVyLmRpcmVjdGlvbiA9PSAwICYmIG1hcC5jb250YWluc09iamVjdChwbGF5ZXIuY3gsIHBsYXllci5jeSsxKSkge1xyXG4gICAgICBzZW5kQWN0aW9uKHsna2V5Q29kZSc6IDY5LCAncHJldmVudERlZmF1bHQnOiBmdW5jdGlvbigpe319KTsgLy8gRVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHNlbmRBY3Rpb24oeydrZXlDb2RlJzogNDAsICdwcmV2ZW50RGVmYXVsdCc6IGZ1bmN0aW9uKCl7fX0pOyAvLyBVcFxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvLyBDbGljayBvbiBzcXVhcmUgZGlyZWN0bHkgbGVmdCBwbGF5ZXIgbG9jYXRpb24uXHJcbiAgZWxzZSBpZiAocG9seWdvbl9jbGlja190ZXN0KDQsXHJcbiAgICBbbWlkX2xvdyAtIG1hcC50aWxlX2J1ZmZlciwgbWlkX2xvdywgbWlkX2xvdywgbWlkX2xvdyAtIG1hcC50aWxlX2J1ZmZlcl0sIC8vIHggdmFsdWVzXHJcbiAgICBbbWlkX2xvdywgbWlkX2xvdywgbWlkX2hpZ2gsIG1pZF9oaWdoXSwgLy8geSB2YWx1ZXNcclxuICAgIGNsaWNrX3gsIGNsaWNrX3kpKSB7XHJcbiAgICBpZiAocGxheWVyLmRpcmVjdGlvbiA9PSAzICYmIG1hcC5jb250YWluc09iamVjdChwbGF5ZXIuY3gtMSwgcGxheWVyLmN5KSkge1xyXG4gICAgICBzZW5kQWN0aW9uKHsna2V5Q29kZSc6IDY5LCAncHJldmVudERlZmF1bHQnOiBmdW5jdGlvbigpe319KTsgLy8gRVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHNlbmRBY3Rpb24oeydrZXlDb2RlJzogMzcsICdwcmV2ZW50RGVmYXVsdCc6IGZ1bmN0aW9uKCl7fX0pOyAvLyBVcFxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvLyBDbGljayBvbiBzcXVhcmUgZGlyZWN0bHkgcmlnaHQgcGxheWVyIGxvY2F0aW9uLlxyXG4gIGVsc2UgaWYgKHBvbHlnb25fY2xpY2tfdGVzdCg0LFxyXG4gICAgW21pZF9oaWdoLCBtaWRfaGlnaCArIG1hcC50aWxlX2J1ZmZlciwgbWlkX2hpZ2ggKyBtYXAudGlsZV9idWZmZXIsIG1pZF9oaWdoXSwgLy8geCB2YWx1ZXNcclxuICAgIFttaWRfbG93LCBtaWRfbG93LCBtaWRfaGlnaCwgbWlkX2hpZ2hdLCAvLyB5IHZhbHVlc1xyXG4gICAgY2xpY2tfeCwgY2xpY2tfeSkpIHtcclxuICAgIGlmIChwbGF5ZXIuZGlyZWN0aW9uID09IDIgJiYgbWFwLmNvbnRhaW5zT2JqZWN0KHBsYXllci5jeCsxLCBwbGF5ZXIuY3kpKSB7XHJcbiAgICAgIHNlbmRBY3Rpb24oeydrZXlDb2RlJzogNjksICdwcmV2ZW50RGVmYXVsdCc6IGZ1bmN0aW9uKCl7fX0pOyAvLyBFXHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgc2VuZEFjdGlvbih7J2tleUNvZGUnOiAzOSwgJ3ByZXZlbnREZWZhdWx0JzogZnVuY3Rpb24oKXt9fSk7IC8vIFVwXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjbGlja0ZhclRpbGUoY2xpY2tfeCwgY2xpY2tfeSwgY2FudmFzX3dpZHRoLCBjYW52YXNfaGVpZ2h0LCBtaWRfd2lkdGgsIG1pZF9oZWlnaHQpIHtcclxuXHJcbiAgLyogTW92ZW1lbnQgKi9cclxuICBpZiAocG9seWdvbl9jbGlja190ZXN0KDMsXHJcbiAgICBbMCwgbWlkX3dpZHRoLCBjYW52YXNfd2lkdGhdLCBbMCwgbWlkX2hlaWdodCwgMF0sXHJcbiAgICBjbGlja194LCBjbGlja195KSkgeyAvLyBVcFxyXG4gICAgc2VuZEFjdGlvbih7J2tleUNvZGUnOiAzOCwgJ3ByZXZlbnREZWZhdWx0JzogZnVuY3Rpb24oKXt9fSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgZWxzZSBpZiAocG9seWdvbl9jbGlja190ZXN0KDMsXHJcbiAgICBbMCwgbWlkX3dpZHRoLCBjYW52YXNfd2lkdGhdLCBbY2FudmFzX2hlaWdodCwgbWlkX2hlaWdodCwgY2FudmFzX2hlaWdodF0sXHJcbiAgICBjbGlja194LCBjbGlja195KSkgeyAvLyBEb3duXHJcbiAgICBzZW5kQWN0aW9uKHsna2V5Q29kZSc6IDQwLCAncHJldmVudERlZmF1bHQnOiBmdW5jdGlvbigpe319KTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICBlbHNlIGlmIChwb2x5Z29uX2NsaWNrX3Rlc3QoMyxcclxuICAgIFswLCBtaWRfd2lkdGgsIDBdLCBbMCwgbWlkX2hlaWdodCwgY2FudmFzX2hlaWdodF0sXHJcbiAgICBjbGlja194LCBjbGlja195KSkgeyAvLyBMZWZ0XHJcbiAgICBzZW5kQWN0aW9uKHsna2V5Q29kZSc6IDM3LCAncHJldmVudERlZmF1bHQnOiBmdW5jdGlvbigpe319KTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICBlbHNlIGlmIChwb2x5Z29uX2NsaWNrX3Rlc3QoMyxcclxuICAgIFtjYW52YXNfd2lkdGgsIG1pZF93aWR0aCwgY2FudmFzX3dpZHRoXSwgWzAsIG1pZF9oZWlnaHQsIGNhbnZhc19oZWlnaHRdLFxyXG4gICAgY2xpY2tfeCwgY2xpY2tfeSkpIHsgLy8gUmlnaHRcclxuICAgIHNlbmRBY3Rpb24oeydrZXlDb2RlJzogMzksICdwcmV2ZW50RGVmYXVsdCc6IGZ1bmN0aW9uKCl7fX0pO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLy8gcG9seWdvbl9jbGlja190ZXN0IGJ5IFdtLiBSYW5kb2xwaCBGcmFua2xpblxyXG4vLyBpbnQgbGlzdChpbnQpIGxpc3QoaW50KSBpbnQgaW50IC0+IGJvb2xcclxuLy8gQ29uc3VtZXMgdGhlIG51bWJlciBvZiB2ZXJ0aWNlcywgYWxvbmcgd2l0aCBlYWNoIHZlcnRleCBjb29yZGluYXRlLFxyXG4vLyBhcyBhIGxpc3Qgb2YgeCBjb29yZGluYXRlcyBhbmQgYSBzZWNvbmQgbGlzdCBvZiB5IGNvb3JkaW5hdGVzLlxyXG4vLyBUZXN0cyBhZ2FpbnN0IGNsaWNrZWQgY29vcmRpbmF0ZXMgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlXHJcbi8vIGNsaWNrIHdhcyB3aXRoaW4gdGhlIHBvbHlnb24gZm9ybWVkIGJ5IHNhaWQgdmVydGljZXMuXHJcbmV4cG9ydCBmdW5jdGlvbiBwb2x5Z29uX2NsaWNrX3Rlc3QoIG52ZXJ0LCB2ZXJ0eCwgdmVydHksIHRlc3R4LCB0ZXN0eSApIHtcclxuICAgIGxldCBpLCBqLCBjID0gZmFsc2U7XHJcbiAgICBmb3IoIGkgPSAwLCBqID0gbnZlcnQtMTsgaSA8IG52ZXJ0OyBqID0gaSsrICkge1xyXG4gICAgICAgIGlmKCAoICggdmVydHlbaV0gPiB0ZXN0eSApICE9ICggdmVydHlbal0gPiB0ZXN0eSApICkgJiZcclxuICAgICAgICAgICAgKCB0ZXN0eCA8ICggdmVydHhbal0gLSB2ZXJ0eFtpXSApICogKCB0ZXN0eSAtIHZlcnR5W2ldICkgLyAoIHZlcnR5W2pdIC0gdmVydHlbaV0gKSArIHZlcnR4W2ldICkgKSB7XHJcbiAgICAgICAgICBjID0gIWM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFRvdWNoQ29vcmRzKGUpIHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICBsYXN0X2NsaWNrX3ggPSBlLnRvdWNoZXNbMF0uY2xpZW50WCAtIGRyYXcuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XHJcbiAgbGFzdF9jbGlja195ID0gZS50b3VjaGVzWzBdLmNsaWVudFkgLSBkcmF3LmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENsaWNrQ29vcmRzKGUpIHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgaWYgKGxhc3RfY2xpY2tfeCA+IC0xIHx8IGxhc3RfY2xpY2tfeSA+IC0xKSB7XHJcbiAgICBsYXN0X2NsaWNrX3ggPSAwO1xyXG4gICAgbGFzdF9jbGlja195ID0gMDtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgY29uc3QgY2xpY2tfeCA9IGUub2Zmc2V0WDtcclxuICBjb25zdCBjbGlja195ID0gZS5vZmZzZXRZO1xyXG4gIGlmIChlLmJ1dHRvbiA9PSAyKSB7XHJcbiAgICBsYXN0X2NsaWNrX3ggPSBjbGlja194O1xyXG4gICAgbGFzdF9jbGlja195ID0gY2xpY2tfeTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgZGV0ZXJtaW5lTGVmdENsaWNrKGNsaWNrX3gsIGNsaWNrX3kpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUb3VjaENvb3JkcyhlKSB7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIGRldGVybWluZUxlZnRDbGljayhsYXN0X2NsaWNrX3gsIGxhc3RfY2xpY2tfeSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldENvbnRleHRNZW51KGUpIHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgbGV0IHRpbGUgPSBtYXAuZ2V0VGlsZShsYXN0X2NsaWNrX3gsIGxhc3RfY2xpY2tfeSk7XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkodGlsZSkpIHtcclxuICAgIGxldCBvYmplY3QgPSBnYW1lLmVudGl0aWVzW3RpbGVbMV1dO1xyXG4gICAgaWYgKG9iamVjdC50eXBlID09IFwib2JqZWN0XCIpIHtcclxuICAgICAgZ2FtZS5leGFtaW5lID0gb2JqZWN0LmV4YW1pbmU7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVNb3VzZU1vdmVtZW50KGUpIHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgbGV0IG1vdXNlX3ggPSBlLm9mZnNldFg7XHJcbiAgbGV0IG1vdXNlX3kgPSBlLm9mZnNldFk7XHJcblxyXG4gIC8vIE1vdXNlIG9mZiByaWdodC1jbGljayBtZW51IGNsb3NlcyBpdCAoKy0gNXB4KVxyXG4gIGlmICghcG9seWdvbl9jbGlja190ZXN0KDQsIFtcclxuICAgIGRyYXcuZXhhbWluZV9tZW51X3ZlcnRpY2VzWzBdWzBdLCBkcmF3LmV4YW1pbmVfbWVudV92ZXJ0aWNlc1sxXVswXSxcclxuICAgIGRyYXcuZXhhbWluZV9tZW51X3ZlcnRpY2VzWzJdWzBdLCBkcmF3LmV4YW1pbmVfbWVudV92ZXJ0aWNlc1szXVswXVxyXG4gIF0sIFtcclxuICAgIGRyYXcuZXhhbWluZV9tZW51X3ZlcnRpY2VzWzBdWzFdLCBkcmF3LmV4YW1pbmVfbWVudV92ZXJ0aWNlc1sxXVsxXSxcclxuICAgIGRyYXcuZXhhbWluZV9tZW51X3ZlcnRpY2VzWzJdWzFdLCBkcmF3LmV4YW1pbmVfbWVudV92ZXJ0aWNlc1szXVsxXVxyXG4gIF0sIG1vdXNlX3gsIG1vdXNlX3kpKSB7XHJcbiAgICBnYW1lLnJlc2V0RXhhbWluZSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gTW91c2Ugb3ZlciBvYmplY3Qgc2hvd3MgdGV4dCBpbiBjb3JuZXJcclxuICBsZXQgdGlsZSA9IG1hcC5nZXRUaWxlKG1vdXNlX3gsIG1vdXNlX3kpO1xyXG4gIGlmIChBcnJheS5pc0FycmF5KHRpbGUpKSB7XHJcbiAgICBsZXQgb2JqZWN0ID0gZ2FtZS5lbnRpdGllc1t0aWxlWzFdXTtcclxuICAgIGlmIChvYmplY3QudHlwZSA9PSBcIm9iamVjdFwiIHx8IG9iamVjdC50eXBlID09IFwiaXRlbVwiKSB7XHJcbiAgICAgIGdhbWUub2JqZWN0X25hbWUgPSBvYmplY3QubmFtZTtcclxuICAgIH1cclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICBnYW1lLm9iamVjdF9uYW1lID0gXCJcIjtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgc2VuZEFjdGlvbik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGlja0xpc3RlbmVyKCkge1xyXG4gIGRyYXcuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGdldENsaWNrQ29vcmRzKTtcclxuICBkcmF3LmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgc2V0VG91Y2hDb29yZHMsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgZHJhdy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBnZXRUb3VjaENvb3JkcywgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuICBkcmF3LmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHNldENvbnRleHRNZW51KTtcclxuICBkcmF3LmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVNb3VzZU1vdmVtZW50KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVycygpIHtcclxuICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgc2VuZEFjdGlvbik7XHJcbiAgZHJhdy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZ2V0Q2xpY2tDb29yZHMpO1xyXG4gIGRyYXcuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBzZXRUb3VjaENvb3JkcywgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuICBkcmF3LmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGdldFRvdWNoQ29vcmRzLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xyXG4gIGRyYXcuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51Jywgc2V0Q29udGV4dE1lbnUpO1xyXG4gIGRyYXcuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZU1vdXNlTW92ZW1lbnQpO1xyXG59IiwiLy8gZHJhdy5qc1xyXG5cclxuaW1wb3J0ICogYXMgZ2FtZSBmcm9tICcuL2dhbWUnO1xyXG5pbXBvcnQgKiBhcyBpbnB1dCBmcm9tICcuL2lucHV0JztcclxuaW1wb3J0ICogYXMgcGxheWVyIGZyb20gJy4vcGxheWVyJztcclxuaW1wb3J0ICogYXMgc2V0dGluZ3MgZnJvbSAnLi9zZXR0aW5ncyc7XHJcbmltcG9ydCAqIGFzIG1hcCBmcm9tICcuL21hcCc7XHJcblxyXG5leHBvcnQgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbnZhcycpO1xyXG5cclxuY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG4vLyBSb3dzIG9mIDEwIDMweDMwIHRpbGVzLlxyXG5jb25zdCB0aWxlc2hlZXQgPSBuZXcgSW1hZ2UoKTtcclxudGlsZXNoZWV0LnNyYyA9IFwic3RhdGljL3RpbGVzaGVldC5wbmdcIjtcclxuXHJcbmNvbnN0IGNoYXJzaGVldCA9IG5ldyBJbWFnZSgpO1xyXG5jaGFyc2hlZXQuc3JjID0gXCJzdGF0aWMvc3ByaXRlc2hlZXQucG5nXCI7XHJcblxyXG5jb25zdCBvcHRpb25zaGVldCA9IG5ldyBJbWFnZSgpO1xyXG5vcHRpb25zaGVldC5zcmMgPSBcInN0YXRpYy9vcHRpb25zaGVldC5wbmdcIjtcclxuXHJcbmV4cG9ydCBsZXQgZXhhbWluZV9tZW51X3ZlcnRpY2VzID0gW1xyXG4gIFswLCAwXSxcclxuICBbMCwgMF0sXHJcbiAgWzAsIDBdLFxyXG4gIFswLCAwXVxyXG5dO1xyXG5cclxuZXhwb3J0IGNvbnN0IE9WRVJMQVlTID0ge1xyXG4gIE5vbmU6IDAsXHJcbiAgU2V0dGluZ3M6IDEsXHJcbiAgSGlzdG9yeTogMixcclxuICBJbnZlbnRvcnk6IDNcclxufTtcclxuZXhwb3J0IGxldCBvdmVybGF5ID0gT1ZFUkxBWVMuTm9uZTtcclxuXHJcbi8vIFNtYWxsIHdpbmRvd3MgbWVhbnMgc21hbGxlciBjYW52YXMuXHJcbmlmICh3aW5kb3cuaW5uZXJXaWR0aCA8IDYwMCB8fCB3aW5kb3cuaW5uZXJIZWlnaHQgPCA2MDApIHtcclxuICBjYW52YXMud2lkdGggPSAzMzA7XHJcbiAgY2FudmFzLmhlaWdodCA9IDMwMDtcclxufVxyXG5cclxuLyogRFJBV0lORyAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZHJhdygpIHtcclxuICBjb25zdCBjYW52YXNfd2lkdGggPSBjYW52YXMud2lkdGggLSA2MDtcclxuICBjb25zdCBjYW52YXNfaGVpZ2h0ID0gY2FudmFzLmhlaWdodCAtIDMwO1xyXG4gIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgaWYgKG92ZXJsYXkgPT0gT1ZFUkxBWVMuU2V0dGluZ3MpIHtcclxuICAgIGRyYXdTZXR0aW5ncyhjYW52YXNfd2lkdGgsIGNhbnZhc19oZWlnaHQpO1xyXG4gIH1cclxuICBlbHNlIGlmIChvdmVybGF5ID09IE9WRVJMQVlTLkhpc3RvcnkpIHtcclxuICAgIGRyYXdIaXN0b3J5KGNhbnZhc193aWR0aCwgY2FudmFzX2hlaWdodCk7XHJcbiAgfVxyXG4gIGVsc2UgaWYgKG92ZXJsYXkgPT0gT1ZFUkxBWVMuSW52ZW50b3J5KSB7XHJcbiAgICBkcmF3SW52ZW50b3J5KGNhbnZhc193aWR0aCwgY2FudmFzX2hlaWdodCk7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgZHJhd1RpbGVzKGNhbnZhc193aWR0aCwgY2FudmFzX2hlaWdodCk7XHJcbiAgICBkcmF3T3RoZXJzKCk7XHJcblxyXG4gICAgLy8gRmlsbCB0aGUgbG9jYWwgY2hhcmFjdGVyIHRpbGVcclxuICAgIGlmIChjaGFyc2hlZXQuY29tcGxldGUpIHtcclxuICAgICAgZHJhd1BsYXllcihcclxuICAgICAgICBtYXAuYm9yZGVyX3NpemUsIG1hcC5ib3JkZXJfc2l6ZSwgcGxheWVyXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgY2hhcnNoZWV0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBkcmF3UGxheWVyLmJpbmQoXHJcbiAgICAgICAgbWFwLmJvcmRlcl9zaXplLCBtYXAuYm9yZGVyX3NpemUsIHBsYXllclxyXG4gICAgICApKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZ2FtZS5vYmplY3RfbmFtZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGRyYXdPYmplY3ROYW1lKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGdhbWUuZXhhbWluZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGRyYXdSaWdodENsaWNrRXhhbWluZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKHNldHRpbmdzLnNldHRpbmdzLmNvb3JkaW5hdGVzKSB7XHJcbiAgICBkcmF3Q29vcmRpbmF0ZXMoY2FudmFzX3dpZHRoLCBjYW52YXNfaGVpZ2h0KTtcclxuICB9XHJcbiAgZHJhd01hcE5hbWUoKTtcclxuICBkcmF3U2lkZVBhbmVsKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdUaWxlcyhjYW52YXNfd2lkdGgsIGNhbnZhc19oZWlnaHQpIHtcclxuICBmb3IgKGxldCB4ID0gMDsgeCA8IGNhbnZhc193aWR0aDsgeCArPSBtYXAudGlsZV9idWZmZXIpIHtcclxuICAgIGNvbnN0IGN1cnJfeCA9IHgvbWFwLnRpbGVfYnVmZmVyKyhwbGF5ZXIuY3gtbWFwLmJvcmRlcl9zaXplKTtcclxuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgY2FudmFzX2hlaWdodDsgeSArPSBtYXAudGlsZV9idWZmZXIpIHtcclxuICAgICAgY29uc3QgdGlsZSA9IHBsYXllci5jdXJyZW50X21hcFt5L21hcC50aWxlX2J1ZmZlcisocGxheWVyLmN5LW1hcC5ib3JkZXJfc2l6ZSldW2N1cnJfeF07XHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRpbGUpKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBkZWYgaW4gdGlsZSkge1xyXG4gICAgICAgICAgZHJhd1RpbGUodGlsZVtkZWZdLCB4LCB5KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgZHJhd1RpbGUodGlsZSwgeCwgeSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdUaWxlKHRpbGUsIHgsIHkpIHtcclxuICBpZiAodGlsZXNoZWV0LmNvbXBsZXRlKSB7XHJcbiAgICBkcmF3SW1hZ2UodGlsZSwgeCwgeSk7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgdGlsZXNoZWV0LmxvYWQgPSBkcmF3SW1hZ2UuYmluZCh0aWxlLCB4LCB5KTtcclxuICB9XHJcbiAgLypcclxuICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgY3R4Lm1vdmVUbyh4LCB5KTtcclxuICBjdHgubGluZVRvKHggKyBtYXAudGlsZV9idWZmZXIsIHkpO1xyXG4gIGN0eC5tb3ZlVG8oeCwgeSk7XHJcbiAgY3R4LmxpbmVUbyh4LCB5ICsgbWFwLnRpbGVfYnVmZmVyKTtcclxuICBjdHguc3Ryb2tlKCk7XHJcbiAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICovXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdJbWFnZSh0aWxlLCB4LCB5KSB7XHJcbiAgY3R4LnN0cm9rZVN0eWxlID0gXCJ0cmFuc3BhcmVudFwiO1xyXG4gIGN0eC5kcmF3SW1hZ2UodGlsZXNoZWV0LFxyXG4gICAgKHRpbGUgJSAxMCkgKiBtYXAudGlsZV9idWZmZXIsXHJcbiAgICBNYXRoLmZsb29yKHRpbGUgLyAxMCkgKiBtYXAudGlsZV9idWZmZXIsXHJcbiAgICBtYXAudGlsZV9idWZmZXIsIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIHgsIHksXHJcbiAgICBtYXAudGlsZV9idWZmZXIsIG1hcC50aWxlX2J1ZmZlclxyXG4gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdQbGF5ZXIoeF8sIHlfLCBwKSB7XHJcbiAgY3R4LnN0cm9rZVN0eWxlID0gXCJ0cmFuc3BhcmVudFwiO1xyXG5cclxuICAvLyBVc2VkIHRvIGdvIGhvcml6b250YWxseSB0byB0aGUgbmV4dFxyXG4gIC8vIHBsYXllciBwb3J0aW9uIG9uIHRoZSBzcHJpdGVzaGVldC5cclxuICBsZXQgeV9vZmZzZXQgPSA0O1xyXG5cclxuICAvLyBTaGlydFxyXG4gIGN0eC5kcmF3SW1hZ2UoY2hhcnNoZWV0LFxyXG4gICAgKHAuZGlyZWN0aW9uKSAqIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIHAuc2hpcnQgKiBtYXAudGlsZV9idWZmZXIsXHJcbiAgICBtYXAudGlsZV9idWZmZXIsIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIHhfICogbWFwLnRpbGVfYnVmZmVyLCB5XyAqIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIG1hcC50aWxlX2J1ZmZlciwgbWFwLnRpbGVfYnVmZmVyXHJcbiAgKTtcclxuXHJcbiAgLy8gSGFpclxyXG4gIGN0eC5kcmF3SW1hZ2UoY2hhcnNoZWV0LFxyXG4gICAgKHAuZGlyZWN0aW9uICsgeV9vZmZzZXQpICogbWFwLnRpbGVfYnVmZmVyLFxyXG4gICAgcC5oYWlyICogbWFwLnRpbGVfYnVmZmVyLFxyXG4gICAgbWFwLnRpbGVfYnVmZmVyLCBtYXAudGlsZV9idWZmZXIsXHJcbiAgICB4XyAqIG1hcC50aWxlX2J1ZmZlciwgeV8gKiBtYXAudGlsZV9idWZmZXIsXHJcbiAgICBtYXAudGlsZV9idWZmZXIsIG1hcC50aWxlX2J1ZmZlclxyXG4gICk7XHJcblxyXG4gIHlfb2Zmc2V0ICs9IDQ7XHJcblxyXG4gIC8vIFNraW5cclxuICBjdHguZHJhd0ltYWdlKGNoYXJzaGVldCxcclxuICAgIChwLmRpcmVjdGlvbiArIHlfb2Zmc2V0KSAqIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIHAuc2tpbiAqIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIG1hcC50aWxlX2J1ZmZlciwgbWFwLnRpbGVfYnVmZmVyLFxyXG4gICAgeF8gKiBtYXAudGlsZV9idWZmZXIsIHlfICogbWFwLnRpbGVfYnVmZmVyLFxyXG4gICAgbWFwLnRpbGVfYnVmZmVyLCBtYXAudGlsZV9idWZmZXJcclxuICApO1xyXG5cclxuICB5X29mZnNldCArPSA0O1xyXG5cclxuICAvLyBFeWVzXHJcbiAgY3R4LmRyYXdJbWFnZShjaGFyc2hlZXQsXHJcbiAgICAocC5kaXJlY3Rpb24gKyB5X29mZnNldCkgKiBtYXAudGlsZV9idWZmZXIsXHJcbiAgICBwLmV5ZXMgKiBtYXAudGlsZV9idWZmZXIsXHJcbiAgICBtYXAudGlsZV9idWZmZXIsIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIHhfICogbWFwLnRpbGVfYnVmZmVyLCB5XyAqIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIG1hcC50aWxlX2J1ZmZlciwgbWFwLnRpbGVfYnVmZmVyXHJcbiAgKTtcclxuXHJcbiAgeV9vZmZzZXQgKz0gNDtcclxuXHJcbiAgLy8gUGFudHNcclxuICBjdHguZHJhd0ltYWdlKGNoYXJzaGVldCxcclxuICAgIChwLmRpcmVjdGlvbiArIHlfb2Zmc2V0KSAqIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIHAucGFudHMgKiBtYXAudGlsZV9idWZmZXIsXHJcbiAgICBtYXAudGlsZV9idWZmZXIsIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIHhfICogbWFwLnRpbGVfYnVmZmVyLCB5XyAqIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIG1hcC50aWxlX2J1ZmZlciwgbWFwLnRpbGVfYnVmZmVyXHJcbiAgKTtcclxuXHJcbiAgeV9vZmZzZXQgKz0gNDtcclxuXHJcbiAgLy8gU2hvZXNcclxuICBjdHguZHJhd0ltYWdlKGNoYXJzaGVldCxcclxuICAgIChwLmRpcmVjdGlvbiArIHlfb2Zmc2V0KSAqIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIHAuc2hvZXMgKiBtYXAudGlsZV9idWZmZXIsXHJcbiAgICBtYXAudGlsZV9idWZmZXIsIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIHhfICogbWFwLnRpbGVfYnVmZmVyLCB5XyAqIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIG1hcC50aWxlX2J1ZmZlciwgbWFwLnRpbGVfYnVmZmVyXHJcbiAgKTtcclxuXHJcbiAgeV9vZmZzZXQgKz0gNDtcclxuXHJcbiAgLy8gSGFpciBBY2Nlc3NvcnlcclxuICBjdHguZHJhd0ltYWdlKGNoYXJzaGVldCxcclxuICAgIChwLmRpcmVjdGlvbiArIHlfb2Zmc2V0KSAqIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIHAuaGFpcl9hY2Nlc3NvcnkgKiBtYXAudGlsZV9idWZmZXIsXHJcbiAgICBtYXAudGlsZV9idWZmZXIsIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIHhfICogbWFwLnRpbGVfYnVmZmVyLCB5XyAqIG1hcC50aWxlX2J1ZmZlcixcclxuICAgIG1hcC50aWxlX2J1ZmZlciwgbWFwLnRpbGVfYnVmZmVyXHJcbiAgKTtcclxuXHJcbiAgaWYgKHNldHRpbmdzLnNldHRpbmdzLnBsYXllcl9uYW1lcykge1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgIGN0eC5mb250ID0gXCIxMHB0IE1lcnJpd2VhdGhlciBTYW5zXCI7XHJcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIjtcclxuICAgIGN0eC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgY3R4LmZpbGxUZXh0KHAudXNlcm5hbWUsXHJcbiAgICAgIHhfICogbWFwLnRpbGVfYnVmZmVyICsgKG1hcC50aWxlX2J1ZmZlciAvIDIpLFxyXG4gICAgICB5XyAqIG1hcC50aWxlX2J1ZmZlciAtIDVcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3T3RoZXJzKCkge1xyXG4gIGZvciAoY29uc3QgdSBpbiBnYW1lLmFsbF91c2Vycykge1xyXG4gICAgaWYgKHUgIT0gcGxheWVyLnVzZXJuYW1lKSB7XHJcbiAgICAgIGNvbnN0IHVjeCA9IGdhbWUuYWxsX3VzZXJzW3VdLmN4O1xyXG4gICAgICBjb25zdCB1Y3kgPSBnYW1lLmFsbF91c2Vyc1t1XS5jeTtcclxuICAgICAgY29uc3QgeCA9IHVjeCAtIHBsYXllci5jeDtcclxuICAgICAgY29uc3QgeSA9IHVjeSAtIHBsYXllci5jeTtcclxuICAgICAgaWYgKHggPj0gLW1hcC5ib3JkZXJfc2l6ZSAmJiB4IDw9IG1hcC5ib3JkZXJfc2l6ZVxyXG4gICAgICAgICYmIHkgPj0gLW1hcC5ib3JkZXJfc2l6ZSAmJiB5IDw9IG1hcC5ib3JkZXJfc2l6ZSkge1xyXG4gICAgICAgIC8vIEZpbGwgdGhlIGNoYXJhY3RlciB0aWxlXHJcbiAgICAgICAgZHJhd1BsYXllcihcclxuICAgICAgICAgIHggKyBtYXAuYm9yZGVyX3NpemUsIHkgKyBtYXAuYm9yZGVyX3NpemUsXHJcbiAgICAgICAgICBnYW1lLmFsbF91c2Vyc1t1XVxyXG4gICAgICAgIClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1NpZGVQYW5lbCgpIHtcclxuICBjdHguc3Ryb2tlU3R5bGUgPSBcInRyYW5zcGFyZW50XCI7XHJcbiAgXHJcbiAgLy8gU2V0dGluZ3NcclxuICBjdHguZHJhd0ltYWdlKG9wdGlvbnNoZWV0LFxyXG4gICAgMCwgMCxcclxuICAgIDYwLCA2MCxcclxuICAgIGNhbnZhcy53aWR0aCAtIDYwLCAwLFxyXG4gICAgNjAsIDYwXHJcbiAgKTtcclxuXHJcbiAgLy8gTWVzc2FnZSBIaXN0b3J5XHJcbiAgY3R4LmRyYXdJbWFnZShvcHRpb25zaGVldCxcclxuICAgIDAsIDYwLFxyXG4gICAgNjAsIDYwLFxyXG4gICAgY2FudmFzLndpZHRoIC0gNjAsIDYwLFxyXG4gICAgNjAsIDYwXHJcbiAgKTtcclxuXHJcbiAgLy8gSW52ZW50b3J5XHJcbiAgY3R4LmRyYXdJbWFnZShvcHRpb25zaGVldCxcclxuICAgIDAsIDEyMCxcclxuICAgIDYwLCA2MCxcclxuICAgIGNhbnZhcy53aWR0aCAtIDYwLCAxMjAsXHJcbiAgICA2MCwgNjBcclxuICApO1xyXG5cclxuICAvLyBMb2dvdXRcclxuICBjdHguZHJhd0ltYWdlKG9wdGlvbnNoZWV0LFxyXG4gICAgMCwgNDIwLFxyXG4gICAgNjAsIDMwLFxyXG4gICAgY2FudmFzLndpZHRoIC0gNjAsIGNhbnZhcy5oZWlnaHQgLSAzMCxcclxuICAgIDYwLCAzMFxyXG4gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdSaWdodENsaWNrRXhhbWluZSgpIHtcclxuICBsZXQgYm94X3dpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KGdhbWUuZXhhbWluZSkud2lkdGggKyAxMDtcclxuICBsZXQgYm94X2hlaWdodCA9IDIyO1xyXG5cclxuICBjdHguZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gIGN0eC5maWxsUmVjdChcclxuICAgIGlucHV0Lmxhc3RfY2xpY2tfeCxcclxuICAgIGlucHV0Lmxhc3RfY2xpY2tfeSxcclxuICAgIGJveF93aWR0aCwgYm94X2hlaWdodFxyXG4gICk7XHJcblxyXG4gIGV4YW1pbmVfbWVudV92ZXJ0aWNlcyA9IFtcclxuICAgIFtpbnB1dC5sYXN0X2NsaWNrX3ggLSA1LCBpbnB1dC5sYXN0X2NsaWNrX3kgLSA1XSxcclxuICAgIFtpbnB1dC5sYXN0X2NsaWNrX3ggKyBib3hfd2lkdGggKyA1LCBpbnB1dC5sYXN0X2NsaWNrX3kgLSA1XSxcclxuICAgIFtpbnB1dC5sYXN0X2NsaWNrX3ggKyBib3hfd2lkdGggKyA1LCBpbnB1dC5sYXN0X2NsaWNrX3kgKyBib3hfaGVpZ2h0ICsgNV0sXHJcbiAgICBbaW5wdXQubGFzdF9jbGlja194IC0gNSwgaW5wdXQubGFzdF9jbGlja195ICsgYm94X2hlaWdodCArIDVdXHJcbiAgXTtcclxuXHJcbiAgY3R4LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcclxuICBjdHgudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICBjdHguZmlsbFRleHQoZ2FtZS5leGFtaW5lLFxyXG4gICAgaW5wdXQubGFzdF9jbGlja194ICsgTWF0aC5mbG9vcihib3hfd2lkdGggLyAyKSxcclxuICAgIGlucHV0Lmxhc3RfY2xpY2tfeSArIE1hdGguZmxvb3IoYm94X2hlaWdodCAvIDIpXHJcbiAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd09iamVjdE5hbWUoKSB7XHJcbiAgY3R4LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcclxuICBjdHgudGV4dEFsaWduID0gXCJlbmRcIjtcclxuICBjdHguZmlsbFRleHQoZ2FtZS5vYmplY3RfbmFtZSxcclxuICAgIGNhbnZhcy53aWR0aCAtIDY1LCAxMCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdDb29yZGluYXRlcyhjYW52YXNfd2lkdGgsIGNhbnZhc19oZWlnaHQpIHtcclxuICAvLyBGaWxsIHRoZSBwb3NpdGlvblxyXG4gIGN0eC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XHJcbiAgY3R4LnRleHRBbGlnbiA9IFwiZW5kXCI7XHJcbiAgY3R4LmZpbGxSZWN0KDAsIGNhbnZhc19oZWlnaHQsIGNhbnZhc193aWR0aCwgMjApO1xyXG4gIGN0eC5mb250ID0gXCIxMnB0IE1lcnJpd2VhdGhlciBTYW5zXCI7XHJcbiAgY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICBjdHguZmlsbFRleHQoXHJcbiAgICBcIihcIiArIHBsYXllci5jeCArIFwiLCBcIiArIHBsYXllci5jeSArIFwiKVwiLFxyXG4gICAgY2FudmFzX3dpZHRoIC0gNSwgY2FudmFzX2hlaWdodCArIDEwXHJcbiAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd092ZXJsYXkoY2FudmFzX3dpZHRoLCBjYW52YXNfaGVpZ2h0KSB7XHJcbiAgY3R4LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcclxuICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzX3dpZHRoLCBjYW52YXNfaGVpZ2h0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1NldHRpbmdzKGNhbnZhc193aWR0aCwgY2FudmFzX2hlaWdodCkge1xyXG4gIGRyYXdPdmVybGF5KGNhbnZhc193aWR0aCwgY2FudmFzX2hlaWdodCk7XHJcbiAgY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICBjdHgudGV4dEFsaWduID0gXCJzdGFydFwiO1xyXG5cclxuICBjdHguZm9udCA9IFwiYm9sZCAyNHB0IE1lcnJpd2VhdGhlciBTYW5zXCI7XHJcbiAgY3R4LmZpbGxUZXh0KFwiU2V0dGluZ3NcIixcclxuICBjYW52YXNfd2lkdGggLyA0IC0gMjUsIDQwXHJcbiAgKTtcclxuXHJcbiAgY3R4LmZvbnQgPSBcIjEycHQgTWVycml3ZWF0aGVyIFNhbnNcIjtcclxuXHJcbiAgLy8gU2hvdyBwbGF5ZXIgbmFtZXNcclxuICBjdHguZmlsbFRleHQoXHJcbiAgICBcIlNob3cgUGxheWVyIE5hbWVzOiBcIiArIChzZXR0aW5ncy5zZXR0aW5ncy5wbGF5ZXJfbmFtZXMgPyBcIk9uXCIgOiBcIk9mZlwiKSxcclxuICAgIGNhbnZhc193aWR0aCAvIDQgLSAyNCxcclxuICAgIDcwXHJcbiAgKTtcclxuXHJcbiAgLy8gU2hvdyBjdXJyZW50IGNvb3JkaW5hdGVzXHJcbiAgY3R4LmZpbGxUZXh0KFxyXG4gICAgXCJTaG93IENvb3JkaW5hdGVzOiBcIiArIChzZXR0aW5ncy5zZXR0aW5ncy5jb29yZGluYXRlcyA/IFwiT25cIiA6IFwiT2ZmXCIpLFxyXG4gICAgY2FudmFzX3dpZHRoIC8gNCAtIDI0LFxyXG4gICAgOTVcclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3SGlzdG9yeShjYW52YXNfd2lkdGgsIGNhbnZhc19oZWlnaHQpIHtcclxuICBkcmF3T3ZlcmxheShjYW52YXNfd2lkdGgsIGNhbnZhc19oZWlnaHQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3SW52ZW50b3J5KGNhbnZhc193aWR0aCwgY2FudmFzX2hlaWdodCkge1xyXG4gIGRyYXdPdmVybGF5KGNhbnZhc193aWR0aCwgY2FudmFzX2hlaWdodCk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBkcmF3TWFwTmFtZSgpIHtcclxuICBjdHguZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gIGN0eC50ZXh0QWxpZ24gPSBcInN0YXJ0XCI7XHJcbiAgY3R4LmZvbnQgPSBcImJvbGQgMTJwdCBNZXJyaXdlYXRoZXIgU2Fuc1wiO1xyXG4gIGN0eC5maWxsVGV4dChwbGF5ZXIuY3VycmVudF9tYXBfbmFtZSxcclxuICAgIDUsIGNhbnZhcy5oZWlnaHQgLSAxMFxyXG4gICk7XHJcbn1cclxuIiwiLy8gZ2FtZS5qc1xyXG5cclxuLy8gaW1wb3J0ICdAYmFiZWwvcG9seWZpbGwnO1xyXG5pbXBvcnQgKiBhcyBkcmF3IGZyb20gJy4vZHJhdyc7XHJcbmltcG9ydCAqIGFzIHNldHRpbmdzIGZyb20gJy4vc2V0dGluZ3MnO1xyXG5pbXBvcnQgKiBhcyBwbGF5ZXIgZnJvbSAnLi9wbGF5ZXInO1xyXG5pbXBvcnQgKiBhcyBpbnB1dCBmcm9tICcuL2lucHV0JztcclxuaW1wb3J0ICogYXMgbWFwIGZyb20gJy4vbWFwJztcclxuXHJcbi8qIEluaXRpYWxpemluZyAqL1xyXG5leHBvcnQgY29uc3Qgc29ja2V0ID0gaW8uY29ubmVjdCgnLy8nICsgZG9jdW1lbnQuZG9tYWluICsgJzonICsgbG9jYXRpb24ucG9ydCk7XHJcblxyXG5sZXQgbG9nb3V0ID0gZmFsc2U7XHJcblxyXG5leHBvcnQgbGV0IGFsbF91c2VycyA9IHt9O1xyXG5cclxuZXhwb3J0IGxldCBlbnRpdGllcyA9IFtdO1xyXG5leHBvcnQgbGV0IGFjdGlvbl9kYXRhID0ge307XHJcblxyXG5leHBvcnQgbGV0IGV4YW1pbmUgPSBcIlwiO1xyXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRFeGFtaW5lKCkge1xyXG4gIGV4YW1pbmUgPSBcIlwiO1xyXG4gIGRyYXcuZXhhbWluZV9tZW51X3ZlcnRpY2VzID0gW1xyXG4gICAgWzAsIDBdLFxyXG4gICAgWzAsIDBdLFxyXG4gICAgWzAsIDBdLFxyXG4gICAgWzAsIDBdXHJcbiAgXTtcclxufVxyXG5cclxuZXhwb3J0IGxldCBvYmplY3RfbmFtZSA9IFwiXCI7XHJcblxyXG4vKiBNb3ZlbWVudCAqL1xyXG5mdW5jdGlvbiBkb01vdmUobW92ZW1lbnQpIHtcclxuICBwbGF5ZXIuY3ggPSBtb3ZlbWVudC5jeDtcclxuICBwbGF5ZXIuY3kgPSBtb3ZlbWVudC5jeTtcclxuICBwbGF5ZXIuZGlyZWN0aW9uID0gbW92ZW1lbnQuZGlyZWN0aW9uO1xyXG59XHJcblxyXG4vKiBNYWluIGdhbWUgbG9vcCBhbmQgc29ja2V0IGxpc3RlbmVycyAqL1xyXG5sZXQgbGFzdDtcclxuKGZ1bmN0aW9uICgpIHtcclxuICBmdW5jdGlvbiBtYWluKCB0aW1lc3RhbXAgKSB7XHJcbiAgICBpZiAobG9nb3V0KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGRyYXcuZHJhdygpO1xyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBtYWluICk7XHJcbiAgfVxyXG5cclxuICBzb2NrZXQub24oJ2Nvbm5lY3QnLCBmdW5jdGlvbigpIHtcclxuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImF1dGhlbnRpY2F0aW9uXCIpO1xyXG4gICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgc29ja2V0LmVtaXQoJ2F1dGhlbnRpY2F0aW9uJywgSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICd1c2VybmFtZSc6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1c2VybmFtZScpLnZhbHVlXHJcbiAgICAgIH0pKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBzb2NrZXQub24oJ2F1dGhlbnRpY2F0ZWQnLCBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgIGNvbnN0IG1zZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWVzc2FnZVwiKTtcclxuICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgbXNnLmlubmVySFRNTCA9IFwiQXV0aGVudGljYXRlZCBzdWNjZXNzZnVsbHkhXCI7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgbXNnLmlubmVySFRNTCA9IFwiTG9hZGluZyBkYXRhLi4uXCI7XHJcbiAgICAgICAgc29ja2V0LmVtaXQoJ3JldHJpZXZlX2luaXRfZGF0YScsIEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICd1c2VybmFtZSc6IGRhdGEudXNlcm5hbWVcclxuICAgICAgICB9KSk7XHJcbiAgICAgIH0sIDMwMCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgbXNnLmlubmVySFRNTCA9IFwiQXV0aGVudGljYXRpb24gZmFpbGVkLiBQbGVhc2UgdHJ5IGFnYWluLlwiO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBmdW5jdGlvbiBsb2FkTWFwKGF0dGVtcHRzKSB7XHJcbiAgICBjb25zdCBsb2FkZWQgPSBjaGVja0RhdGFBY3F1aXJlZCgpO1xyXG4gICAgaWYgKGxvYWRlZCkge1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWVzc2FnZVwiKS5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlJykuY2xhc3NOYW1lID0gXCJoaWRlXCI7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2F1dGgnKS5jbGFzc05hbWUgPSBcImhpZGVcIjtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzJykuY2xhc3NOYW1lID0gXCJzaG93IGNlbnRlcmVkXCI7XHJcbiAgICAgICAgbG9nb3V0ID0gZmFsc2U7XHJcbiAgICAgICAgbWFpbigpOyAvLyBTdGFydCB0aGUgY3ljbGVcclxuICAgICAgICBpbnB1dC5saXN0ZW5lcigpOyAvLyBCZWdpbiBtb3ZlbWVudCBsaXN0ZW5lcnNcclxuICAgICAgICBpbnB1dC5jbGlja0xpc3RlbmVyKCk7XHJcbiAgICAgIH0sIDMwMCk7XHJcbiAgICAgIHJldHVybjsgLy8gRG8gbm90IGV4ZWN1dGUgdGhlIHJlc3Qgb2YgdGhlIGZ1bmN0aW9uLlxyXG4gICAgfVxyXG4gICAgYXR0ZW1wdHMrKztcclxuICAgIGlmIChhdHRlbXB0cyA8IDEwKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICBsb2FkTWFwKGF0dGVtcHRzKTtcclxuICAgICAgfSwgMTAwKTtcclxuICAgICAgcmV0dXJuOyAvLyBEbyBub3QgZXhlY3V0ZSB0aGUgcmVzdCBvZiB0aGUgZnVuY3Rpb24uXHJcbiAgICB9XHJcblxyXG4gICAgbXNnLmlubmVySFRNTCA9IFwiRmFpbGVkIHRvIGdldCBkYXRhIGZyb20gdGhlIHNlcnZlci5cIjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNoZWNrRGF0YUFjcXVpcmVkKCkge1xyXG4gICAgY29uc3QgZ290X3VzZXIgPSBwbGF5ZXIudXNlcm5hbWUgIT09IFwiXCI7XHJcbiAgICBjb25zdCBnb3RfbWFwID0gcGxheWVyLmN1cnJlbnRfbWFwICE9PSB1bmRlZmluZWQgfHwgcGxheWVyLmN1cnJlbnRfbWFwLmxlbmd0aCA+IDA7XHJcbiAgICByZXR1cm4gZ290X3VzZXIgJiYgZ290X21hcDtcclxuICB9XHJcblxyXG4gIC8vIFJlY2lldmVzIGFuZCBwb3B1bGF0ZXMgaW5pdGlhbCBkYXRhLlxyXG4gIHNvY2tldC5vbignaW5pdF9kYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgW3BsYXllci51c2VybmFtZSwgW3BsYXllci5jeCwgcGxheWVyLmN5LCBwbGF5ZXIuZGlyZWN0aW9uXSxcclxuICAgICAgW3BsYXllci5jdXJyZW50X21hcCwgcGxheWVyLmN1cnJlbnRfbWFwX25hbWVdLFxyXG4gICAgICBbcGxheWVyLnNoaXJ0LCBwbGF5ZXIuaGFpciwgcGxheWVyLnNraW4sIHBsYXllci5leWVzLFxyXG4gICAgICAgIHBsYXllci5wYW50cywgcGxheWVyLnNob2VzLCBwbGF5ZXIuaGFpcl9hY2Nlc3NvcnldLFxyXG4gICAgICBlbnRpdGllcywgc2V0dGluZ3Muc2V0dGluZ3MsXHJcbiAgICAgIFttYXAudGlsZV9idWZmZXIsIG1hcC5ib3JkZXJfc2l6ZV0sXHJcbiAgICAgIGFsbF91c2Vyc1xyXG4gICAgXSA9IGRhdGE7XHJcbiAgICBpZiAoZHJhdy5jYW52YXMud2lkdGggPCA0NTApIHtcclxuICAgICAgbWFwLmJvcmRlcl9zaXplID0gNDtcclxuICAgIH1cclxuICAgIGxvYWRNYXAoMCk7XHJcbiAgfSk7XHJcblxyXG4gIHNvY2tldC5vbignb2JqZWN0X2FjdGlvbicsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICBhY3Rpb25fZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIFJlY2lldmVzIGFuZCBwb3B1bGF0ZXMgbWFwIGRhdGEuXHJcbiAgc29ja2V0Lm9uKCdtYXBfZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICBbcGxheWVyLmN1cnJlbnRfbWFwLCBwbGF5ZXIuY3VycmVudF9tYXBfbmFtZV0gPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gIH0pO1xyXG5cclxuICBzb2NrZXQub24oJ2VudGl0eV9kYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIGVudGl0aWVzID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICB9KTtcclxuXHJcbiAgLy8gTW92ZXMgdGhlIGxvY2FsIHBsYXllclxyXG4gIHNvY2tldC5vbignbW92ZW1lbnRfc2VsZicsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgIGlmIChwbGF5ZXIudXNlcm5hbWUgPT0gZGF0YS51c2VybmFtZSlcclxuICAgICAgZG9Nb3ZlKGRhdGEpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBVcGRhdGVzIHNwZWNpZmljIHBsYXllcidzIGRhdGFcclxuICBzb2NrZXQub24oJ3VwZGF0ZV9wbGF5ZXInLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICBpZiAoZGF0YS51c2VybmFtZSA9PSBwbGF5ZXIudXNlcm5hbWUpIHtcclxuICAgICAgcGxheWVyLmN4ID0gZGF0YS5jeDtcclxuICAgICAgcGxheWVyLmN5ID0gZGF0YS5jeTtcclxuICAgICAgcGxheWVyLmRpcmVjdGlvbiA9IGRhdGEuZGlyZWN0aW9uO1xyXG4gICAgICBwbGF5ZXIuc2hpcnQgPSBkYXRhLnNoaXJ0O1xyXG4gICAgICBwbGF5ZXIuaGFpciA9IGRhdGEuaGFpcjtcclxuICAgICAgcGxheWVyLnNraW4gPSBkYXRhLnNraW47XHJcbiAgICAgIHBsYXllci5leWVzID0gZGF0YS5leWVzO1xyXG4gICAgICBwbGF5ZXIucGFudHMgPSBkYXRhLnBhbnRzO1xyXG4gICAgICBwbGF5ZXIuc2hvZXMgPSBkYXRhLnNob2VzO1xyXG4gICAgICBwbGF5ZXIuaGFpcl9hY2Nlc3NvcnkgPSBkYXRhLmhhaXJfYWNjZXNzb3J5O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGFsbF91c2Vyc1tkYXRhLnVzZXJuYW1lXSA9IGRhdGE7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIC8vIFJlbW92ZSBwbGF5ZXIgZnJvbSB1c2VycyBkYXRhXHJcbiAgc29ja2V0Lm9uKCdyZW1vdmVfdXNlcicsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgIGlmIChkYXRhLnVzZXJuYW1lKSB7XHJcbiAgICAgIGRlbGV0ZSBhbGxfdXNlcnNbZGF0YS51c2VybmFtZV07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTG9nb3V0IGlmIHNlbGZcclxuICAgIGlmIChkYXRhLnVzZXJuYW1lID09IHBsYXllci51c2VybmFtZSkge1xyXG4gICAgICBsb2dvdXQgPSB0cnVlO1xyXG4gICAgICBhbGxfdXNlcnMgPSB7fTtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lc3NhZ2UnKS5jbGFzc05hbWUgPSBcInNob3dcIjtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2F1dGgnKS5jbGFzc05hbWUgPSBcInNob3dcIjtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbnZhcycpLmNsYXNzTmFtZSA9IFwiaGlkZVwiO1xyXG4gICAgICBpbnB1dC5yZW1vdmVMaXN0ZW5lcnMoKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgc29ja2V0Lm9uKCdmYWlsdXJlJywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIGNvbnNvbGUubG9nKCdVbnN5bmNocm9uaXplZC4nKTtcclxuICB9KTtcclxufSkoKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n')}]);