!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var s=F[U]={i:U,l:!1,exports:{}};return Q[U].call(s.exports,s,s.exports,B),s.l=!0,s.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var s in Q)B.d(U,s,function(F){return Q[F]}.bind(null,s));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=0)}([function(module,exports){eval("// game.js\n// import '@babel/polyfill';\n\n/* Initializing */\nconst socket = io.connect('//' + document.domain + ':' + location.port);\nlet user = 0;\nconst canvas = document.getElementById('canvas');\ncanvas.addEventListener(\"contextmenu\", function (e) {\n  e.preventDefault();\n}, false);\nconst ctx = canvas.getContext('2d');\n\nif (window.innerWidth < 500) {\n  canvas.width = 270;\n  canvas.height = 290;\n}\n\nconst mid_width = canvas.width / 2;\nconst mid_height = canvas.height / 2;\nlet tile_buffer = 0; // Tile Buffer: How large tiles are\n// character start (0,0)\n\nlet cx = 0;\nlet cy = 0;\nlet dir = 0;\nlet sx = 0;\nlet sy = 0;\nlet mouse_down = 0;\nconst tilesheet = new Image();\ntilesheet.src = \"static/tilesheet.png\";\nconst charsheet = new Image();\ncharsheet.src = \"static/charsheet.png\";\nlet map = [];\n/* MAP OPTIONS */\n\nlet tiles = {};\nlet all_users = {};\n/* DRAWING */\n\nctx.font = \"11pt Verdana\";\nctx.textAlign = \"end\";\nconst w = canvas.clientWidth;\nconst h = canvas.clientHeight - 20;\n\nfunction draw() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let x = 0; x < w; x += tile_buffer) {\n    const curr_x = x / tile_buffer + (cx - sx);\n\n    for (let y = 0; y < h; y += tile_buffer) {\n      const tile = map[y / tile_buffer + (cy - sy)][curr_x];\n\n      if (Array.isArray(tile)) {\n        for (const def in tile) {\n          drawTile(tile[def], x, y);\n        }\n      } else {\n        drawTile(tile, x, y);\n      }\n    }\n  }\n\n  drawOthers(); // Fill the local character tile\n\n  if (charsheet.complete) {\n    drawPlayer(sx, sy, dir);\n  } else {\n    charsheet.addEventListener('load', drawPlayer);\n  } // Fill the position\n\n\n  ctx.fillStyle = \"white\";\n  ctx.fillRect(0, canvas.height - 20, canvas.width, 20);\n  ctx.strokeText(\"(\" + cx + \", \" + cy + \")\", 14 * tile_buffer + 30, 15 * tile_buffer + 15);\n}\n\nfunction drawTile(tile, x, y) {\n  ctx.beginPath();\n\n  if (tilesheet.complete) {\n    drawImage(tile, x, y);\n  } else {\n    tilesheet.load = drawImage.bind(tile, x, y);\n  }\n\n  ctx.moveTo(x, y);\n  ctx.lineTo(x + tile_buffer, y);\n  ctx.moveTo(x, y);\n  ctx.lineTo(x, y + tile_buffer);\n  ctx.stroke();\n  ctx.closePath();\n}\n\nfunction drawPlayer(x_, y_, direction) {\n  ctx.strokeStyle = \"transparent\";\n  ctx.drawImage(charsheet, direction * tile_buffer, 0, tile_buffer, tile_buffer, x_ * tile_buffer, y_ * tile_buffer, tile_buffer, tile_buffer);\n}\n\nfunction drawImage(tile, x, y) {\n  ctx.strokeStyle = \"transparent\";\n  ctx.drawImage(tilesheet, tile % 10 * tile_buffer, Math.floor(tile / 10) * tile_buffer, tile_buffer, tile_buffer, x, y, tile_buffer, tile_buffer);\n}\n\nfunction drawOthers() {\n  for (const u in all_users) {\n    if (u != user) {\n      const ucx = all_users[u]['cx'];\n      const ucy = all_users[u]['cy'];\n      const x = ucx - cx;\n      const y = ucy - cy;\n\n      if (x >= -sx && x <= sx && y >= -sy && y <= sy) {\n        // Fill the character tile\n        drawPlayer(x + sx, y + sy, all_users[u]['direction']);\n      }\n    }\n  }\n}\n/* MOVEMENT */\n\n\nfunction sendAction(e) {\n  if (![32, 37, 38, 39, 40, 65, 68, 69, 83, 87].includes(e.keyCode)) return;\n  e.preventDefault();\n\n  if (e.keyCode == 32) {\n    // Spacebar\n    console.log(\"Eventually we will implement the spacebar for interacting\" + \" with items below your character.\");\n  } else if (e.keyCode == 69) {\n    console.log(\"Eventually we will implement the 'e' key for interacting\" + \" with nearby npcs and objects, if your player is facing them!\");\n  }\n\n  socket.emit('json', JSON.stringify({\n    'user': user,\n    'action': e.keyCode\n  }));\n}\n\nfunction determineClick(click_x, click_y) {\n  const mid_offset = 15;\n  const mid_low = mid_width - mid_offset;\n  const mid_high = mid_width - mid_offset;\n\n  if (polygon_click_test(4, [mid_low, mid_high, mid_high, mid_low], // x values\n  [mid_low, mid_low, mid_high, mid_high], // y values\n  click_x, click_y)) {\n    sendAction({\n      'keyCode': 32,\n      'preventDefault': function preventDefault() {}\n    }); // Spacebar\n  } else if (polygon_click_test(3, [0, mid_width, canvas.width], [0, mid_height, 0], click_x, click_y)) {\n    sendAction({\n      'keyCode': 38,\n      'preventDefault': function preventDefault() {}\n    }); // Up\n  } else if (polygon_click_test(3, [0, mid_width, canvas.width], [canvas.height, mid_height, canvas.height], click_x, click_y)) {\n    sendAction({\n      'keyCode': 40,\n      'preventDefault': function preventDefault() {}\n    }); // Down\n  } else if (polygon_click_test(3, [0, mid_width, 0], [0, mid_height, canvas.height], click_x, click_y)) {\n    sendAction({\n      'keyCode': 37,\n      'preventDefault': function preventDefault() {}\n    }); // Left\n  } else if (polygon_click_test(3, [canvas.width, mid_width, canvas.width], [0, mid_height, canvas.height], click_x, click_y)) {\n    sendAction({\n      'keyCode': 39,\n      'preventDefault': function preventDefault() {}\n    }); // Right\n  }\n} // polygon_click_test by Wm. Randolph Franklin\n// int list(int) list(int) int int -> bool\n// Consumes the number of vertices, along with each vertex coordinate,\n// as a list of x coordinates and a second list of y coordinates.\n// Tests against clicked coordinates to determine whether the\n// click was within the polygon formed by said vertices.\n\n\nfunction polygon_click_test(nvert, vertx, verty, testx, testy) {\n  let i,\n      j,\n      c = false;\n\n  for (i = 0, j = nvert - 1; i < nvert; j = i++) {\n    if (verty[i] > testy != verty[j] > testy && testx < (vertx[j] - vertx[i]) * (testy - verty[i]) / (verty[j] - verty[i]) + vertx[i]) {\n      c = !c;\n    }\n  }\n\n  return c;\n}\n\nfunction doMove(movement) {\n  cx = movement['cx'];\n  cy = movement['cy'];\n  dir = movement['direction'];\n}\n\nfunction getClickCoords(e) {\n  e.preventDefault();\n  mouse_down = 1;\n  const click_x = e.offsetX;\n  const click_y = e.offsetY;\n  determineClick(click_x, click_y);\n}\n\nfunction getTouchCoords(e) {\n  e.preventDefault();\n  mouse_down = 2;\n  const click_x = e.touches[0].clientX - canvas.getBoundingClientRect().left;\n  const click_y = e.touches[0].clientY - canvas.getBoundingClientRect().top;\n  determineClick(click_x, click_y);\n}\n\nfunction listener() {\n  document.addEventListener('keydown', sendAction);\n}\n\nfunction clickListener() {\n  canvas.addEventListener('mousedown', getClickCoords);\n  canvas.addEventListener('touchstart', getTouchCoords);\n  mouse_down = 0;\n}\n\nlet last;\n\n(function () {\n  function main(timestamp) {\n    if (!last) {\n      last = timestamp;\n      draw();\n    } else {\n      if (timestamp - last > 100) {\n        draw();\n      }\n    }\n\n    requestAnimationFrame(main);\n  }\n\n  socket.on('connect', function () {\n    listener(); // Begin movement listeners\n\n    clickListener();\n  }); // Recieves and populates initial data.\n\n  socket.on('init_data', function (data) {\n    data = JSON.parse(data);\n    user = data[0];\n    cx = data[1][0];\n    cy = data[1][1];\n    dir = data[1][2];\n    map = data[2]['map'];\n    tile_buffer = data[3][0];\n\n    if (canvas.width < 450) {\n      sx = 4;\n      sy = 4;\n    } else {\n      sx = data[3][1];\n      sy = data[3][2];\n    }\n\n    main(); // Start the cycle\n  });\n  socket.on('tiles', function (data) {\n    tiles = JSON.parse(data);\n  }); // Recieves and populates map data.\n\n  socket.on('map_data', function (data) {\n    data = JSON.parse(data);\n  }); // Moves the local player\n\n  socket.on('movement_self', function (data) {\n    data = JSON.parse(data);\n    if (user == data['user']) doMove(data);\n  }); // Updates all players\n\n  socket.on('update_all', function (data) {\n    all_users = JSON.parse(data);\n  });\n  socket.on('failure', function (data) {\n    console.log('Unsynchronized.');\n  });\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);